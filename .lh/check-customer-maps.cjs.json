{
    "sourceFile": "check-customer-maps.cjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760437799097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760437799097,
            "name": "Commit-0",
            "content": "// Check maps for specific customer\r\nconst { Pool } = require('pg');\r\n\r\nconst pool = new Pool({\r\n  user: 'postgres',\r\n  host: 'localhost',\r\n  database: 'mapit',\r\n  password: 'NewStrongPass123',\r\n  port: 5432,\r\n});\r\n\r\nasync function checkCustomerMaps() {\r\n  try {\r\n    // Find customer by email\r\n    console.log('\\n=== CHECKING CUSTOMER ===');\r\n    const customer = await pool.query(`\r\n      SELECT customer_id, email, first_name, last_name\r\n      FROM customer\r\n      WHERE email = 'eidimontaha20@gmail.com';\r\n    `);\r\n    \r\n    if (customer.rows.length === 0) {\r\n      console.log('❌ Customer not found');\r\n      return;\r\n    }\r\n    \r\n    console.log('Customer found:', customer.rows[0]);\r\n    const customerId = customer.rows[0].customer_id;\r\n    \r\n    // Check maps directly owned by this customer\r\n    console.log('\\n=== MAPS OWNED BY CUSTOMER (from map table) ===');\r\n    const ownedMaps = await pool.query(`\r\n      SELECT map_id, title, description, created_at, customer_id\r\n      FROM map\r\n      WHERE customer_id = $1\r\n      ORDER BY created_at DESC;\r\n    `, [customerId]);\r\n    \r\n    console.log(`Found ${ownedMaps.rows.length} maps owned by customer:`);\r\n    ownedMaps.rows.forEach(map => {\r\n      console.log(`  - Map ${map.map_id}: ${map.title} (customer_id: ${map.customer_id})`);\r\n    });\r\n    \r\n    // Check maps via customer_map relationship\r\n    console.log('\\n=== MAPS VIA CUSTOMER_MAP RELATIONSHIP ===');\r\n    const relatedMaps = await pool.query(`\r\n      SELECT cm.customer_id, cm.map_id, m.title, cm.access_level\r\n      FROM customer_map cm\r\n      JOIN map m ON cm.map_id = m.map_id\r\n      WHERE cm.customer_id = $1;\r\n    `, [customerId]);\r\n    \r\n    console.log(`Found ${relatedMaps.rows.length} maps via customer_map:`);\r\n    relatedMaps.rows.forEach(map => {\r\n      console.log(`  - Map ${map.map_id}: ${map.title} (access: ${map.access_level})`);\r\n    });\r\n    \r\n    // Check with zone counts (same query as API)\r\n    console.log('\\n=== MAPS WITH ZONE COUNTS (API Query) ===');\r\n    const mapsWithZones = await pool.query(`\r\n      SELECT \r\n        m.map_id,\r\n        m.title,\r\n        m.description,\r\n        m.created_at,\r\n        m.active,\r\n        m.country,\r\n        COUNT(z.id) as zone_count\r\n      FROM map m\r\n      LEFT JOIN zones z ON m.map_id = z.map_id\r\n      WHERE m.customer_id = $1\r\n      GROUP BY m.map_id, m.title, m.description, m.created_at, m.active, m.country\r\n      ORDER BY m.created_at DESC;\r\n    `, [customerId]);\r\n    \r\n    console.log(`\\nAPI would return ${mapsWithZones.rows.length} maps:`);\r\n    mapsWithZones.rows.forEach(map => {\r\n      console.log(`  - Map ${map.map_id}: ${map.title} | Zones: ${map.zone_count} | Created: ${map.created_at}`);\r\n    });\r\n    \r\n    // Check ALL maps in database\r\n    console.log('\\n=== ALL MAPS IN DATABASE ===');\r\n    const allMaps = await pool.query(`\r\n      SELECT map_id, title, customer_id, \r\n             (SELECT email FROM customer WHERE customer_id = map.customer_id) as owner_email\r\n      FROM map\r\n      ORDER BY map_id;\r\n    `);\r\n    \r\n    console.log(`\\nTotal maps in database: ${allMaps.rows.length}`);\r\n    allMaps.rows.forEach(map => {\r\n      console.log(`  - Map ${map.map_id}: ${map.title} | Owner: ${map.owner_email} (ID: ${map.customer_id})`);\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error:', error.message);\r\n  } finally {\r\n    await pool.end();\r\n  }\r\n}\r\n\r\ncheckCustomerMaps();\r\n"
        }
    ]
}