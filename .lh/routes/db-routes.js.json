{
    "sourceFile": "routes/db-routes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760433584605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760433584605,
            "name": "Commit-0",
            "content": "/**\r\n * API Routes for database CRUD operations\r\n * \r\n * This file demonstrates how to create an Express API that uses the database operations\r\n * module to perform CRUD operations on PostgreSQL tables.\r\n * \r\n * Usage: \r\n * - Import this file in your main server.js\r\n * - Add 'app.use('/api/db', dbRoutes);' to your Express setup\r\n */\r\n\r\nimport express from 'express';\r\nimport db from '../src/db/dbOperations.js';\r\n\r\nconst router = express.Router();\r\n\r\n// Get all tables\r\nrouter.get('/tables', async (_req, res) => {\r\n  try {\r\n    const tables = await db.listTables();\r\n    res.json({ success: true, tables });\r\n  } catch (error) {\r\n    res.status(500).json({ \r\n      success: false, \r\n      error: error instanceof Error ? error.message : String(error)\r\n    });\r\n  }\r\n});\r\n\r\n// Get table structure\r\nrouter.get('/tables/:tableName/structure', async (req, res) => {\r\n  try {\r\n    const tableName = req.params.tableName;\r\n    const structure = await db.getTableStructure(tableName);\r\n    res.json({ success: true, structure });\r\n  } catch (error) {\r\n    res.status(500).json({ \r\n      success: false, \r\n      error: error instanceof Error ? error.message : String(error)\r\n    });\r\n  }\r\n});\r\n\r\n// Database connection status check\r\nrouter.get('/status', async (_req, res) => {\r\n  try {\r\n    const isConnected = await db.testConnection();\r\n    res.json({ \r\n      success: true, \r\n      connected: isConnected,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ \r\n      success: false, \r\n      connected: false,\r\n      error: error instanceof Error ? error.message : String(error)\r\n    });\r\n  }\r\n});\r\n\r\n// Get all records from a table\r\nrouter.get('/tables/:tableName', async (req, res) => {\r\n  try {\r\n    const tableName = req.params.tableName;\r\n    const orderBy = req.query.orderBy ? String(req.query.orderBy) : undefined;\r\n    const customer_id = req.query.customer_id;\r\n    const map_id = req.query.map_id;\r\n    \r\n    console.log(`[GET /tables/${tableName}] Request - customer_id: ${customer_id}, map_id: ${map_id}, orderBy: ${orderBy}`);\r\n    \r\n    let records;\r\n    \r\n    // If customer_id is provided and table is 'map', filter by customer\r\n    if (customer_id && tableName === 'map') {\r\n      console.log(`[GET /tables/${tableName}] Filtering by customer_id: ${customer_id}`);\r\n      \r\n      // Use raw query to filter by customer_id\r\n      const query = `\r\n        SELECT * FROM map \r\n        WHERE customer_id = $1 \r\n        ${orderBy ? `ORDER BY ${orderBy}` : 'ORDER BY created_at DESC'}\r\n      `;\r\n      \r\n      console.log(`[GET /tables/${tableName}] Executing query:`, query);\r\n      const result = await db.pool.query(query, [customer_id]);\r\n      records = result.rows;\r\n      \r\n      console.log(`[GET /tables/${tableName}] Found ${records.length} maps for customer ${customer_id}`);\r\n    } \r\n    // If map_id is provided and table is 'zones', filter by map\r\n    else if (map_id && tableName === 'zones') {\r\n      console.log(`[GET /tables/${tableName}] Filtering by map_id: ${map_id}`);\r\n      \r\n      // Use raw query to filter by map_id\r\n      const query = `\r\n        SELECT * FROM zones \r\n        WHERE map_id = $1 \r\n        ${orderBy ? `ORDER BY ${orderBy}` : 'ORDER BY created_at DESC'}\r\n      `;\r\n      \r\n      const result = await db.pool.query(query, [map_id]);\r\n      records = result.rows;\r\n      \r\n      console.log(`[GET /tables/${tableName}] Found ${records.length} zones for map ${map_id}`);\r\n    } else {\r\n      records = await db.getAll(tableName, orderBy);\r\n    }\r\n    \r\n    console.log(`[GET /tables/${tableName}] Returning ${records.length} records`);\r\n    res.json({ success: true, records });\r\n  } catch (error) {\r\n    console.error(`[GET /tables/${req.params.tableName}] Error:`, error);\r\n    console.error(`[GET /tables/${req.params.tableName}] Error stack:`, error instanceof Error ? error.stack : 'No stack');\r\n    res.status(500).json({ \r\n      success: false, \r\n      error: error instanceof Error ? error.message : String(error)\r\n    });\r\n  }\r\n});\r\n\r\n// Get a specific record by ID\r\nrouter.get('/tables/:tableName/:id', async (req, res) => {\r\n  try {\r\n    const { tableName, id } = req.params;\r\n    // Use map_id for map table, id for others\r\n    const idColumn = req.query.idColumn ? String(req.query.idColumn) : (tableName === 'map' ? 'map_id' : 'id');\r\n    \r\n    console.log(`[GET /tables/${tableName}/${id}] Using ${idColumn} as ID column`);\r\n    \r\n    const record = await db.getById(tableName, id, idColumn);\r\n    \r\n    if (!record) {\r\n      console.log(`[GET /tables/${tableName}/${id}] Record not found`);\r\n      return res.status(404).json({ \r\n        success: false, \r\n        error: `Record not found in ${tableName} with ${idColumn}=${id}` \r\n      });\r\n    }\r\n    \r\n    console.log(`[GET /tables/${tableName}/${id}] Record found:`, record.title || 'Untitled');\r\n    res.json({ success: true, record });\r\n  } catch (error) {\r\n    console.error(`[GET /tables/${tableName}/${id}] Error:`, error);\r\n    res.status(500).json({ \r\n      success: false, \r\n      error: error instanceof Error ? error.message : String(error)\r\n    });\r\n  }\r\n});\r\n\r\n// Create a new record\r\nrouter.post('/tables/:tableName', async (req, res) => {\r\n  try {\r\n    const { tableName } = req.params;\r\n    const data = req.body;\r\n    \r\n    console.log(`[POST /tables/${tableName}] Received data:`, data);\r\n    \r\n    if (!data || Object.keys(data).length === 0) {\r\n      console.log(`[POST /tables/${tableName}] Empty data received`);\r\n      return res.status(400).json({ \r\n        success: false, \r\n        error: 'Request body is empty or invalid'\r\n      });\r\n    }\r\n    \r\n    console.log(`[POST /tables/${tableName}] Inserting data...`);\r\n    const newRecord = await db.insert(tableName, data);\r\n    console.log(`[POST /tables/${tableName}] Record inserted:`, newRecord);\r\n    res.status(201).json({ success: true, record: newRecord });\r\n  } catch (error) {\r\n    res.status(500).json({ \r\n      success: false, \r\n      error: error instanceof Error ? error.message : String(error)\r\n    });\r\n  }\r\n});\r\n\r\n// Update a record\r\nrouter.put('/tables/:tableName/:id', async (req, res) => {\r\n  try {\r\n    const { tableName, id } = req.params;\r\n    const idColumn = req.query.idColumn ? String(req.query.idColumn) : 'id';\r\n    const data = req.body;\r\n    \r\n    if (!data || Object.keys(data).length === 0) {\r\n      return res.status(400).json({ \r\n        success: false, \r\n        error: 'Request body is empty or invalid'\r\n      });\r\n    }\r\n    \r\n    const updatedRecord = await db.update(tableName, id, data, idColumn);\r\n    res.json({ success: true, record: updatedRecord });\r\n  } catch (error) {\r\n    // Check if it's a \"not found\" error\r\n    if (error instanceof Error && error.message.includes('No') && error.message.includes('found')) {\r\n      return res.status(404).json({ \r\n        success: false, \r\n        error: error.message \r\n      });\r\n    }\r\n    \r\n    res.status(500).json({ \r\n      success: false, \r\n      error: error instanceof Error ? error.message : String(error)\r\n    });\r\n  }\r\n});\r\n\r\n// Delete a record\r\nrouter.delete('/tables/:tableName/:id', async (req, res) => {\r\n  try {\r\n    const { tableName, id } = req.params;\r\n    const idColumn = req.query.idColumn ? String(req.query.idColumn) : (tableName === 'map' ? 'map_id' : 'id');\r\n    \r\n    console.log(`[DELETE /tables/${tableName}/${id}] Attempting to delete record`);\r\n    \r\n    // For map table, we should verify ownership (but we don't have user context here)\r\n    // For now, we'll proceed with the deletion\r\n    // In a production app, you'd want to verify the user has permission to delete this map\r\n    \r\n    await db.remove(tableName, id, idColumn);\r\n    console.log(`[DELETE /tables/${tableName}/${id}] Record deleted successfully`);\r\n    res.json({ success: true, message: `Record with ${idColumn}=${id} deleted from ${tableName}` });\r\n  } catch (error) {\r\n    // Check if it's a \"not found\" error\r\n    if (error instanceof Error && error.message.includes('No') && error.message.includes('found')) {\r\n      return res.status(404).json({ \r\n        success: false, \r\n        error: error.message \r\n      });\r\n    }\r\n    \r\n    res.status(500).json({ \r\n      success: false, \r\n      error: error instanceof Error ? error.message : String(error)\r\n    });\r\n  }\r\n});\r\n\r\n// Execute a custom SQL query\r\nrouter.post('/query', async (req, res) => {\r\n  try {\r\n    const { sql, params } = req.body;\r\n    \r\n    if (!sql) {\r\n      return res.status(400).json({ \r\n        success: false, \r\n        error: 'SQL query is required'\r\n      });\r\n    }\r\n    \r\n    const result = await db.executeQuery(sql, params || []);\r\n    res.json({ \r\n      success: true, \r\n      rowCount: result.rowCount, \r\n      rows: result.rows \r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({ \r\n      success: false, \r\n      error: error instanceof Error ? error.message : String(error)\r\n    });\r\n  }\r\n});\r\n\r\n// Create a new map\r\nrouter.post('/map', async (req, res) => {\r\n  try {\r\n    console.log('🔍 POST /api/db/map - Request received');\r\n    console.log('Request body:', JSON.stringify(req.body, null, 2));\r\n    \r\n    // Check for required fields\r\n    const { title, customer_id, map_data, map_bounds } = req.body;\r\n    \r\n    console.log(`Extracted title: \"${title}\", customer_id: ${customer_id}`);\r\n    console.log('Map data:', JSON.stringify(map_data, null, 2));\r\n    \r\n    if (!title || !customer_id) {\r\n      console.log('❌ Missing required fields: title or customer_id');\r\n      return res.status(400).json({ \r\n        success: false, \r\n        error: 'Title and customer_id are required'\r\n      });\r\n    }\r\n    \r\n    // Insert map data\r\n    console.log('Preparing to insert map data into database...');\r\n    \r\n    const mapDataToInsert = {\r\n      title: title,\r\n      description: req.body.description || null,\r\n      map_data: map_data ? JSON.stringify(map_data) : null,\r\n      map_bounds: map_bounds ? JSON.stringify(map_bounds) : null,\r\n      active: req.body.active !== undefined ? req.body.active : true,\r\n      country: req.body.country || null,\r\n      map_codes: req.body.map_codes || null,\r\n      customer_id: customer_id\r\n    };\r\n    \r\n    console.log('Data to insert:', JSON.stringify(mapDataToInsert, null, 2));\r\n    \r\n    const mapRecord = await db.insert('map', mapDataToInsert);\r\n    console.log('✅ Map inserted successfully:', JSON.stringify(mapRecord, null, 2));\r\n    \r\n    // Create a customer-map relationship\r\n    if (mapRecord && mapRecord.map_id) {\r\n      try {\r\n        console.log('Creating customer-map relationship...');\r\n        const relationData = {\r\n          customer_id: customer_id,\r\n          map_id: mapRecord.map_id,\r\n          access_level: 'owner',\r\n          last_accessed: new Date()\r\n        };\r\n        \r\n        console.log('Relation data:', JSON.stringify(relationData, null, 2));\r\n        const relationRecord = await db.insert('customer_map', relationData);\r\n        console.log('✅ Customer-map relation created:', JSON.stringify(relationRecord, null, 2));\r\n      } catch (relError) {\r\n        console.error('❌ Failed to create customer-map relation, but map was created:', relError);\r\n        // Continue even if relation creation fails, as we already created the map\r\n      }\r\n    } else {\r\n      console.warn('⚠️ No map record or map_id returned, cannot create relationship');\r\n    }\r\n    \r\n    res.json({ \r\n      success: true, \r\n      message: 'Map created successfully', \r\n      record: mapRecord \r\n    });\r\n    \r\n    console.log('✅ Map creation API call completed successfully');\r\n  } catch (error) {\r\n    console.error('❌ Error creating map:', error);\r\n    console.error('Error details:', error instanceof Error ? error.stack : 'Unknown error');\r\n    res.status(500).json({ \r\n      success: false, \r\n      error: error instanceof Error ? error.message : String(error)\r\n    });\r\n  }\r\n});\r\n\r\n// Update an existing map\r\nrouter.put('/map/:mapId', async (req, res) => {\r\n  try {\r\n    console.log('🔍 PUT /api/db/map/:mapId - Request received');\r\n    console.log('Request body:', JSON.stringify(req.body, null, 2));\r\n    \r\n    const mapId = req.params.mapId;\r\n    \r\n    // Check for required fields\r\n    const { title, customer_id } = req.body;\r\n    \r\n    console.log(`Updating map ID: ${mapId}, title: \"${title}\", customer_id: ${customer_id}`);\r\n    \r\n    if (!title || !customer_id) {\r\n      console.log('❌ Missing required fields: title or customer_id');\r\n      return res.status(400).json({ \r\n        success: false, \r\n        error: 'Title and customer_id are required'\r\n      });\r\n    }\r\n    \r\n    // Verify map exists and belongs to this customer\r\n    const existingMap = await db.query(\r\n      'SELECT map_id FROM map WHERE map_id = $1 AND customer_id = $2',\r\n      [mapId, customer_id]\r\n    );\r\n    \r\n    if (!existingMap.rows.length) {\r\n      console.log(`❌ Map not found or not owned by customer ${customer_id}`);\r\n      return res.status(404).json({\r\n        success: false,\r\n        error: 'Map not found or you do not have permission to edit it'\r\n      });\r\n    }\r\n    \r\n    // Prepare data for update\r\n    const mapDataToUpdate = {\r\n      title: title,\r\n      description: req.body.description || null,\r\n      map_data: req.body.map_data ? JSON.stringify(req.body.map_data) : null,\r\n      map_bounds: req.body.map_bounds ? JSON.stringify(req.body.map_bounds) : null,\r\n      active: req.body.active !== undefined ? req.body.active : true,\r\n      country: req.body.country || null,\r\n      map_codes: req.body.map_codes || null,\r\n      updated_at: new Date()\r\n    };\r\n    \r\n    console.log('Data to update:', JSON.stringify(mapDataToUpdate, null, 2));\r\n    \r\n    // Update the map\r\n    const result = await db.update('map', mapDataToUpdate, { map_id: mapId });\r\n    console.log('✅ Map updated successfully:', JSON.stringify(result, null, 2));\r\n    \r\n    res.json({\r\n      success: true,\r\n      message: 'Map updated successfully',\r\n      record: result\r\n    });\r\n    \r\n    console.log('✅ Map update API call completed successfully');\r\n  } catch (error) {\r\n    console.error('❌ Error updating map:', error);\r\n    console.error('Error details:', error instanceof Error ? error.stack : 'Unknown error');\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error instanceof Error ? error.message : String(error)\r\n    });\r\n  }\r\n});\r\n\r\nexport default router;"
        }
    ]
}