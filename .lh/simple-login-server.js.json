{
    "sourceFile": "simple-login-server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1760436748302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760436969189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,72 @@\n // Create database pool\r\n const pool = new Pool({ connectionString: CONNECTION_STRING });\r\n \r\n // Health check\r\n-app.get('/api/health', (req, res) => {\r\n-  res.json({ status: 'ok', timestamp: new Date().toISOString() });\r\n+app.get('/api/health', async (req, res) => {\r\n+  try {\r\n+    const r = await pool.query('SELECT NOW() as now');\r\n+    res.json({ status: 'ok', time: r.rows[0].now });\r\n+  } catch (e) {\r\n+    res.status(500).json({ status: 'error', error: e.message });\r\n+  }\r\n });\r\n \r\n+// Register endpoint\r\n+app.post('/api/register', async (req, res) => {\r\n+  res.setHeader('Content-Type', 'application/json');\r\n+  const { first_name, last_name, email, password } = req.body ?? {};\r\n+  console.log('[POST /api/register] incoming body:', req.body);\r\n+  \r\n+  if (!first_name || !last_name || !email || !password) {\r\n+    return res.status(400).json({ \r\n+      success: false, \r\n+      error: 'All fields (first_name, last_name, email, password) are required.' \r\n+    });\r\n+  }\r\n+  \r\n+  try {\r\n+    // Hash the password\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    \r\n+    // Insert new customer\r\n+    const result = await pool.query(\r\n+      `INSERT INTO customer (first_name, last_name, email, password_hash, registration_date) \r\n+       VALUES ($1, $2, $3, $4, NOW()) \r\n+       RETURNING customer_id, first_name, last_name, email`,\r\n+      [first_name, last_name, email.toLowerCase().trim(), hashedPassword]\r\n+    );\r\n+    \r\n+    const newCustomer = result.rows[0];\r\n+    console.log('[POST /api/register] successfully registered:', newCustomer.email);\r\n+    \r\n+    return res.status(201).json({\r\n+      success: true,\r\n+      user: {\r\n+        customer_id: newCustomer.customer_id,\r\n+        email: newCustomer.email,\r\n+        first_name: newCustomer.first_name,\r\n+        last_name: newCustomer.last_name\r\n+      }\r\n+    });\r\n+  } catch (err) {\r\n+    console.error('[POST /api/register] error:', err);\r\n+    \r\n+    // Check for unique constraint violation (email already exists)\r\n+    if (err.code === '23505') {\r\n+      return res.status(409).json({\r\n+        success: false,\r\n+        error: 'Email already registered.'\r\n+      });\r\n+    }\r\n+    \r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      error: err.message || 'Registration failed.'\r\n+    });\r\n+  }\r\n+});\r\n+\r\n // Login endpoint\r\n app.post('/api/login', async (req, res) => {\r\n   res.setHeader('Content-Type', 'application/json');\r\n   const { email, password } = req.body ?? {};\r\n"
                },
                {
                    "date": 1760437509083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,97 @@\n     });\r\n   }\r\n });\r\n \r\n+// Get maps for a specific customer with zone counts\r\n+app.get('/api/customer/:customer_id/maps', async (req, res) => {\r\n+  res.setHeader('Content-Type', 'application/json');\r\n+  const { customer_id } = req.params;\r\n+  \r\n+  if (!customer_id) {\r\n+    return res.status(400).json({ \r\n+      success: false, \r\n+      error: 'Customer ID is required.' \r\n+    });\r\n+  }\r\n+  \r\n+  try {\r\n+    // Get all maps for this customer with zone counts\r\n+    const result = await pool.query(`\r\n+      SELECT \r\n+        m.map_id,\r\n+        m.title,\r\n+        m.description,\r\n+        m.created_at,\r\n+        m.active,\r\n+        m.country,\r\n+        COUNT(z.id) as zone_count\r\n+      FROM map m\r\n+      LEFT JOIN zones z ON m.map_id = z.map_id\r\n+      WHERE m.customer_id = $1\r\n+      GROUP BY m.map_id, m.title, m.description, m.created_at, m.active, m.country\r\n+      ORDER BY m.created_at DESC;\r\n+    `, [customer_id]);\r\n+    \r\n+    console.log(`[GET /api/customer/${customer_id}/maps] Found ${result.rows.length} maps`);\r\n+    \r\n+    return res.json({\r\n+      success: true,\r\n+      maps: result.rows\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(`[GET /api/customer/${customer_id}/maps] error:`, err);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      error: err.message || 'Failed to fetch maps.'\r\n+    });\r\n+  }\r\n+});\r\n+\r\n+// Get zones for a specific map\r\n+app.get('/api/map/:map_id/zones', async (req, res) => {\r\n+  res.setHeader('Content-Type', 'application/json');\r\n+  const { map_id } = req.params;\r\n+  \r\n+  if (!map_id) {\r\n+    return res.status(400).json({ \r\n+      success: false, \r\n+      error: 'Map ID is required.' \r\n+    });\r\n+  }\r\n+  \r\n+  try {\r\n+    // Get all zones for this map\r\n+    const result = await pool.query(`\r\n+      SELECT \r\n+        id,\r\n+        map_id,\r\n+        name,\r\n+        color,\r\n+        coordinates,\r\n+        created_at,\r\n+        updated_at,\r\n+        customer_id\r\n+      FROM zones\r\n+      WHERE map_id = $1\r\n+      ORDER BY created_at DESC;\r\n+    `, [map_id]);\r\n+    \r\n+    console.log(`[GET /api/map/${map_id}/zones] Found ${result.rows.length} zones`);\r\n+    \r\n+    return res.json({\r\n+      success: true,\r\n+      zones: result.rows\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(`[GET /api/map/${map_id}/zones] error:`, err);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      error: err.message || 'Failed to fetch zones.'\r\n+    });\r\n+  }\r\n+});\r\n+\r\n // Login endpoint\r\n app.post('/api/login', async (req, res) => {\r\n   res.setHeader('Content-Type', 'application/json');\r\n   const { email, password } = req.body ?? {};\r\n@@ -179,17 +268,31 @@\n     });\r\n   }\r\n });\r\n \r\n+// Global error handlers\r\n+process.on('uncaughtException', (err) => {\r\n+  console.error('❌ Uncaught Exception:', err);\r\n+});\r\n+\r\n+process.on('unhandledRejection', (reason, promise) => {\r\n+  console.error('❌ Unhandled Rejection at:', promise, 'reason:', reason);\r\n+});\r\n+\r\n // Start server\r\n async function start() {\r\n   try {\r\n     await pool.query('SELECT 1');\r\n     console.log('✅ PostgreSQL connection successful');\r\n     \r\n-    app.listen(PORT, HOST, () => {\r\n+    const server = app.listen(PORT, HOST, () => {\r\n       console.log(`✅ API server running on http://${HOST}:${PORT}`);\r\n     });\r\n+    \r\n+    server.on('error', (err) => {\r\n+      console.error('❌ Server error:', err);\r\n+    });\r\n+    \r\n   } catch (err) {\r\n     console.error('❌ Failed to start:', err.message);\r\n     process.exit(1);\r\n   }\r\n"
                },
                {
                    "date": 1760438136193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,8 +184,282 @@\n     });\r\n   }\r\n });\r\n \r\n+// Create a new map\r\n+app.post('/api/map', async (req, res) => {\r\n+  res.setHeader('Content-Type', 'application/json');\r\n+  const { title, description, map_code, customer_id, country, map_data, map_bounds, active } = req.body ?? {};\r\n+  \r\n+  console.log('[POST /api/map] Creating new map:', { title, customer_id, map_code });\r\n+  \r\n+  if (!title || !customer_id) {\r\n+    return res.status(400).json({ \r\n+      success: false, \r\n+      error: 'Title and customer_id are required.' \r\n+    });\r\n+  }\r\n+  \r\n+  try {\r\n+    // Generate map code if not provided\r\n+    const finalMapCode = map_code || `MAP-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\r\n+    \r\n+    // Insert new map\r\n+    const result = await pool.query(`\r\n+      INSERT INTO map (title, description, map_code, customer_id, country, map_data, map_bounds, active, created_at)\r\n+      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW())\r\n+      RETURNING map_id, title, description, map_code, customer_id, created_at;\r\n+    `, [\r\n+      title,\r\n+      description || null,\r\n+      finalMapCode,\r\n+      customer_id,\r\n+      country || null,\r\n+      map_data ? JSON.stringify(map_data) : null,\r\n+      map_bounds ? JSON.stringify(map_bounds) : null,\r\n+      active !== undefined ? active : true\r\n+    ]);\r\n+    \r\n+    const newMap = result.rows[0];\r\n+    console.log(`[POST /api/map] Map created successfully: ${newMap.map_id} - Code: ${newMap.map_code}`);\r\n+    \r\n+    // Also create entry in customer_map table for relationship\r\n+    await pool.query(`\r\n+      INSERT INTO customer_map (customer_id, map_id, access_level, created_at)\r\n+      VALUES ($1, $2, 'owner', NOW())\r\n+      ON CONFLICT DO NOTHING;\r\n+    `, [customer_id, newMap.map_id]);\r\n+    \r\n+    return res.status(201).json({\r\n+      success: true,\r\n+      map: newMap\r\n+    });\r\n+  } catch (err) {\r\n+    console.error('[POST /api/map] error:', err);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      error: err.message || 'Failed to create map.'\r\n+    });\r\n+  }\r\n+});\r\n+\r\n+// Update an existing map\r\n+app.put('/api/map/:map_id', async (req, res) => {\r\n+  res.setHeader('Content-Type', 'application/json');\r\n+  const { map_id } = req.params;\r\n+  const { title, description, country, map_data, map_bounds, active } = req.body ?? {};\r\n+  \r\n+  console.log(`[PUT /api/map/${map_id}] Updating map`);\r\n+  \r\n+  if (!title) {\r\n+    return res.status(400).json({ \r\n+      success: false, \r\n+      error: 'Title is required.' \r\n+    });\r\n+  }\r\n+  \r\n+  try {\r\n+    const result = await pool.query(`\r\n+      UPDATE map\r\n+      SET title = $1,\r\n+          description = $2,\r\n+          country = $3,\r\n+          map_data = $4,\r\n+          map_bounds = $5,\r\n+          active = $6\r\n+      WHERE map_id = $7\r\n+      RETURNING map_id, title, description, map_code, customer_id, created_at;\r\n+    `, [\r\n+      title,\r\n+      description || null,\r\n+      country || null,\r\n+      map_data ? JSON.stringify(map_data) : null,\r\n+      map_bounds ? JSON.stringify(map_bounds) : null,\r\n+      active !== undefined ? active : true,\r\n+      map_id\r\n+    ]);\r\n+    \r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        error: 'Map not found.'\r\n+      });\r\n+    }\r\n+    \r\n+    console.log(`[PUT /api/map/${map_id}] Map updated successfully`);\r\n+    \r\n+    return res.json({\r\n+      success: true,\r\n+      map: result.rows[0]\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(`[PUT /api/map/${map_id}] error:`, err);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      error: err.message || 'Failed to update map.'\r\n+    });\r\n+  }\r\n+});\r\n+\r\n+// Get a specific map by ID\r\n+app.get('/api/map/:map_id', async (req, res) => {\r\n+  res.setHeader('Content-Type', 'application/json');\r\n+  const { map_id } = req.params;\r\n+  \r\n+  try {\r\n+    const result = await pool.query(`\r\n+      SELECT map_id, title, description, map_code, customer_id, country, \r\n+             map_data, map_bounds, active, created_at\r\n+      FROM map\r\n+      WHERE map_id = $1;\r\n+    `, [map_id]);\r\n+    \r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        error: 'Map not found.'\r\n+      });\r\n+    }\r\n+    \r\n+    return res.json({\r\n+      success: true,\r\n+      map: result.rows[0]\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(`[GET /api/map/${map_id}] error:`, err);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      error: err.message || 'Failed to fetch map.'\r\n+    });\r\n+  }\r\n+});\r\n+\r\n+// Create a new zone\r\n+app.post('/api/zone', async (req, res) => {\r\n+  res.setHeader('Content-Type', 'application/json');\r\n+  const { map_id, name, color, coordinates, customer_id } = req.body ?? {};\r\n+  \r\n+  console.log('[POST /api/zone] Creating zone:', { map_id, name, customer_id });\r\n+  \r\n+  if (!map_id || !name || !color || !coordinates) {\r\n+    return res.status(400).json({ \r\n+      success: false, \r\n+      error: 'map_id, name, color, and coordinates are required.' \r\n+    });\r\n+  }\r\n+  \r\n+  try {\r\n+    // Use uuid_generate_v4() if available, otherwise generate on server\r\n+    const result = await pool.query(`\r\n+      INSERT INTO zones (id, map_id, name, color, coordinates, customer_id, created_at, updated_at)\r\n+      VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, NOW(), NOW())\r\n+      RETURNING id, map_id, name, color, coordinates, customer_id, created_at, updated_at;\r\n+    `, [\r\n+      map_id,\r\n+      name,\r\n+      color,\r\n+      JSON.stringify(coordinates),\r\n+      customer_id || null\r\n+    ]);\r\n+    \r\n+    const newZone = result.rows[0];\r\n+    console.log(`[POST /api/zone] Zone created: ${newZone.id} for map ${map_id}`);\r\n+    \r\n+    return res.status(201).json({\r\n+      success: true,\r\n+      zone: newZone\r\n+    });\r\n+  } catch (err) {\r\n+    console.error('[POST /api/zone] error:', err);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      error: err.message || 'Failed to create zone.'\r\n+    });\r\n+  }\r\n+});\r\n+\r\n+// Update an existing zone\r\n+app.put('/api/zone/:zone_id', async (req, res) => {\r\n+  res.setHeader('Content-Type', 'application/json');\r\n+  const { zone_id } = req.params;\r\n+  const { name, color, coordinates } = req.body ?? {};\r\n+  \r\n+  console.log(`[PUT /api/zone/${zone_id}] Updating zone`);\r\n+  \r\n+  try {\r\n+    const result = await pool.query(`\r\n+      UPDATE zones\r\n+      SET name = COALESCE($1, name),\r\n+          color = COALESCE($2, color),\r\n+          coordinates = COALESCE($3, coordinates),\r\n+          updated_at = NOW()\r\n+      WHERE id = $4\r\n+      RETURNING id, map_id, name, color, coordinates, customer_id, created_at, updated_at;\r\n+    `, [\r\n+      name || null,\r\n+      color || null,\r\n+      coordinates ? JSON.stringify(coordinates) : null,\r\n+      zone_id\r\n+    ]);\r\n+    \r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        error: 'Zone not found.'\r\n+      });\r\n+    }\r\n+    \r\n+    console.log(`[PUT /api/zone/${zone_id}] Zone updated successfully`);\r\n+    \r\n+    return res.json({\r\n+      success: true,\r\n+      zone: result.rows[0]\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(`[PUT /api/zone/${zone_id}] error:`, err);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      error: err.message || 'Failed to update zone.'\r\n+    });\r\n+  }\r\n+});\r\n+\r\n+// Delete a zone\r\n+app.delete('/api/zone/:zone_id', async (req, res) => {\r\n+  res.setHeader('Content-Type', 'application/json');\r\n+  const { zone_id } = req.params;\r\n+  \r\n+  console.log(`[DELETE /api/zone/${zone_id}] Deleting zone`);\r\n+  \r\n+  try {\r\n+    const result = await pool.query(`\r\n+      DELETE FROM zones\r\n+      WHERE id = $1\r\n+      RETURNING id;\r\n+    `, [zone_id]);\r\n+    \r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        error: 'Zone not found.'\r\n+      });\r\n+    }\r\n+    \r\n+    console.log(`[DELETE /api/zone/${zone_id}] Zone deleted successfully`);\r\n+    \r\n+    return res.json({\r\n+      success: true,\r\n+      message: 'Zone deleted successfully.'\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(`[DELETE /api/zone/${zone_id}] error:`, err);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      error: err.message || 'Failed to delete zone.'\r\n+    });\r\n+  }\r\n+});\r\n+\r\n // Login endpoint\r\n app.post('/api/login', async (req, res) => {\r\n   res.setHeader('Content-Type', 'application/json');\r\n   const { email, password } = req.body ?? {};\r\n"
                },
                {
                    "date": 1760438406102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -458,8 +458,57 @@\n     });\r\n   }\r\n });\r\n \r\n+// Delete a map (and all its zones)\r\n+app.delete('/api/map/:map_id', async (req, res) => {\r\n+  res.setHeader('Content-Type', 'application/json');\r\n+  const { map_id } = req.params;\r\n+  \r\n+  console.log(`[DELETE /api/map/${map_id}] Deleting map and its zones`);\r\n+  \r\n+  try {\r\n+    // First delete all zones for this map\r\n+    await pool.query(`\r\n+      DELETE FROM zones\r\n+      WHERE map_id = $1;\r\n+    `, [map_id]);\r\n+    \r\n+    // Delete from customer_map table\r\n+    await pool.query(`\r\n+      DELETE FROM customer_map\r\n+      WHERE map_id = $1;\r\n+    `, [map_id]);\r\n+    \r\n+    // Then delete the map\r\n+    const result = await pool.query(`\r\n+      DELETE FROM map\r\n+      WHERE map_id = $1\r\n+      RETURNING map_id;\r\n+    `, [map_id]);\r\n+    \r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({\r\n+        success: false,\r\n+        error: 'Map not found.'\r\n+      });\r\n+    }\r\n+    \r\n+    console.log(`[DELETE /api/map/${map_id}] Map and zones deleted successfully`);\r\n+    \r\n+    return res.json({\r\n+      success: true,\r\n+      message: 'Map deleted successfully.'\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(`[DELETE /api/map/${map_id}] error:`, err);\r\n+    return res.status(500).json({\r\n+      success: false,\r\n+      error: err.message || 'Failed to delete map.'\r\n+    });\r\n+  }\r\n+});\r\n+\r\n // Login endpoint\r\n app.post('/api/login', async (req, res) => {\r\n   res.setHeader('Content-Type', 'application/json');\r\n   const { email, password } = req.body ?? {};\r\n"
                },
                {
                    "date": 1760438988262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,16 +114,17 @@\n       SELECT \r\n         m.map_id,\r\n         m.title,\r\n         m.description,\r\n+        m.map_code,\r\n         m.created_at,\r\n         m.active,\r\n         m.country,\r\n         COUNT(z.id) as zone_count\r\n       FROM map m\r\n       LEFT JOIN zones z ON m.map_id = z.map_id\r\n       WHERE m.customer_id = $1\r\n-      GROUP BY m.map_id, m.title, m.description, m.created_at, m.active, m.country\r\n+      GROUP BY m.map_id, m.title, m.description, m.map_code, m.created_at, m.active, m.country\r\n       ORDER BY m.created_at DESC;\r\n     `, [customer_id]);\r\n     \r\n     console.log(`[GET /api/customer/${customer_id}/maps] Found ${result.rows.length} maps`);\r\n"
                }
            ],
            "date": 1760436748302,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport cors from 'cors';\r\nimport pg from 'pg';\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst { Pool } = pg;\r\n\r\nconst PORT = 3101;\r\nconst HOST = '127.0.0.1';\r\nconst CONNECTION_STRING = 'postgres://postgres:NewStrongPass123@localhost:5432/mapit';\r\n\r\nconst app = express();\r\n\r\n// Enable CORS\r\napp.use(cors({\r\n  origin: [\r\n    'http://localhost:8080',\r\n    'http://127.0.0.1:8080',\r\n    'http://localhost:5173',\r\n    'http://127.0.0.1:5173',\r\n    'http://localhost:5174',\r\n    'http://127.0.0.1:5174'\r\n  ],\r\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\r\n  allowedHeaders: ['Content-Type', 'Authorization'],\r\n  credentials: true\r\n}));\r\n\r\napp.use(express.json());\r\n\r\n// Create database pool\r\nconst pool = new Pool({ connectionString: CONNECTION_STRING });\r\n\r\n// Health check\r\napp.get('/api/health', (req, res) => {\r\n  res.json({ status: 'ok', timestamp: new Date().toISOString() });\r\n});\r\n\r\n// Login endpoint\r\napp.post('/api/login', async (req, res) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  const { email, password } = req.body ?? {};\r\n  console.log('[POST /api/login] attempting login for:', email);\r\n  \r\n  if (!email || !password) {\r\n    return res.status(400).json({ \r\n      success: false, \r\n      error: 'Email and password are required.' \r\n    });\r\n  }\r\n  \r\n  try {\r\n    // Find user by email\r\n    const result = await pool.query(\r\n      'SELECT customer_id, email, first_name, last_name, password_hash FROM customer WHERE email = $1',\r\n      [email.toLowerCase().trim()]\r\n    );\r\n    \r\n    if (result.rows.length === 0) {\r\n      console.warn('[POST /api/login] no user found with email:', email);\r\n      return res.status(401).json({ \r\n        success: false, \r\n        error: 'Invalid email or password.' \r\n      });\r\n    }\r\n    \r\n    const user = result.rows[0];\r\n    \r\n    // Verify password\r\n    let isPasswordValid = false;\r\n    \r\n    // First try bcrypt comparison (for hashed passwords starting with $2b$)\r\n    if (user.password_hash.startsWith('$2b$')) {\r\n      try {\r\n        isPasswordValid = await bcrypt.compare(password, user.password_hash);\r\n        console.log('[POST /api/login] using bcrypt verification');\r\n      } catch (bcryptError) {\r\n        console.log('[POST /api/login] bcrypt error:', bcryptError.message);\r\n        isPasswordValid = false;\r\n      }\r\n    } else {\r\n      // Try base64 decoding first (for legacy base64 encoded passwords)\r\n      try {\r\n        const decodedPassword = Buffer.from(user.password_hash, 'base64').toString();\r\n        isPasswordValid = (password === decodedPassword);\r\n        console.log('[POST /api/login] using base64 decoding verification');\r\n      } catch (base64Error) {\r\n        // If base64 fails, try plain text comparison\r\n        console.log('[POST /api/login] base64 failed, trying plain text comparison');\r\n        isPasswordValid = (password === user.password_hash);\r\n      }\r\n    }\r\n    \r\n    if (!isPasswordValid) {\r\n      console.warn('[POST /api/login] invalid password for:', email);\r\n      return res.status(401).json({ \r\n        success: false, \r\n        error: 'Invalid email or password.' \r\n      });\r\n    }\r\n    \r\n    // Return user data (excluding password_hash)\r\n    console.log('[POST /api/login] successful login for:', email);\r\n    return res.json({\r\n      success: true,\r\n      user: {\r\n        customer_id: user.customer_id,\r\n        email: user.email,\r\n        first_name: user.first_name,\r\n        last_name: user.last_name\r\n      }\r\n    });\r\n  } catch (err) {\r\n    console.error('[POST /api/login] error:', err);\r\n    const message = err && typeof err === 'object' && 'message' in err ? err.message : 'Login failed.';\r\n    return res.status(500).json({ \r\n      success: false, \r\n      error: message \r\n    });\r\n  }\r\n});\r\n\r\n// Start server\r\nasync function start() {\r\n  try {\r\n    await pool.query('SELECT 1');\r\n    console.log('✅ PostgreSQL connection successful');\r\n    \r\n    app.listen(PORT, HOST, () => {\r\n      console.log(`✅ API server running on http://${HOST}:${PORT}`);\r\n    });\r\n  } catch (err) {\r\n    console.error('❌ Failed to start:', err.message);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nstart();\r\n"
        }
    ]
}