{
    "sourceFile": "ZONE_SAVING_CODE_EXAMPLE.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760434497752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760434497752,
            "name": "Commit-0",
            "content": "# Zone Saving Code Example\r\n\r\n## How Zones Are Automatically Saved to Database\r\n\r\n### Example Scenario\r\n\r\nYou create a map titled \"Lebanon Sales Territory\" and draw 3 zones:\r\n1. North Region (Blue - #3b82f6)\r\n2. Central Region (Red - #ef4444)  \r\n3. South Region (Green - #22c55e)\r\n\r\n### Step 1: Zones Are Created on Map\r\n\r\nWhen you draw zones, they're stored temporarily:\r\n\r\n```typescript\r\n// Each zone has this structure\r\nconst zone = {\r\n  id: \"a1b2c3d4-e5f6-7890-abcd-ef1234567890\", // UUID\r\n  name: \"North Region\",\r\n  color: \"#3b82f6\",\r\n  coordinates: [\r\n    [33.8547, 35.8623],\r\n    [34.1234, 35.9876],\r\n    [33.9876, 36.1234],\r\n    // ... more coordinates forming the polygon\r\n  ]\r\n}\r\n```\r\n\r\nThese zones go into the `pendingZones` array:\r\n\r\n```typescript\r\npendingZones = [\r\n  { id: \"...\", name: \"North Region\", color: \"#3b82f6\", coordinates: [...] },\r\n  { id: \"...\", name: \"Central Region\", color: \"#ef4444\", coordinates: [...] },\r\n  { id: \"...\", name: \"South Region\", color: \"#22c55e\", coordinates: [...] }\r\n]\r\n```\r\n\r\n### Step 2: User Clicks \"Save Map & 3 Zone(s)\"\r\n\r\nThe save process begins:\r\n\r\n```typescript\r\nconst handleSave = async () => {\r\n  // 1. Generate map code\r\n  const mapCode = \"MAP-L4B2-9K7M\";\r\n  \r\n  // 2. Save map to database\r\n  const mapData = {\r\n    title: \"Lebanon Sales Territory\",\r\n    description: \"Sales territories for Lebanon region\",\r\n    map_code: mapCode,\r\n    customer_id: 5,\r\n    map_data: { lat: 33.8547, lng: 35.8623, zoom: 8 }\r\n  };\r\n  \r\n  const mapResponse = await fetch('/api/map', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(mapData)\r\n  });\r\n  \r\n  const mapResult = await mapResponse.json();\r\n  // mapResult.record.map_id = 42\r\n  \r\n  // 3. Save all zones to database\r\n  await savePendingZones(42, 5);\r\n}\r\n```\r\n\r\n### Step 3: Zones Are Saved to Database\r\n\r\n```typescript\r\nconst savePendingZones = async (mapId: number, customerId: number) => {\r\n  let successCount = 0;\r\n  \r\n  for (const zone of pendingZones) {\r\n    // Each zone is saved individually\r\n    const zoneData = {\r\n      id: zone.id,                    // UUID from frontend\r\n      map_id: mapId,                  // Link to created map\r\n      customer_id: customerId,        // Owner of the zone\r\n      name: zone.name,                // Zone name\r\n      color: zone.color,              // Display color\r\n      coordinates: zone.coordinates   // GeoJSON coordinates\r\n    };\r\n    \r\n    const response = await fetch('/api/db/tables/zones', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(zoneData)\r\n    });\r\n    \r\n    const result = await response.json();\r\n    if (result.success) {\r\n      successCount++;\r\n      console.log(`✅ Zone \"${zone.name}\" saved`);\r\n    }\r\n  }\r\n  \r\n  return { success: successCount === pendingZones.length, count: successCount };\r\n}\r\n```\r\n\r\n### Step 4: Database Records Created\r\n\r\n#### MAP Table\r\n```sql\r\nINSERT INTO map (\r\n  map_id, \r\n  title, \r\n  description, \r\n  map_code, \r\n  customer_id,\r\n  map_data,\r\n  created_at\r\n) VALUES (\r\n  42,\r\n  'Lebanon Sales Territory',\r\n  'Sales territories for Lebanon region',\r\n  'MAP-L4B2-9K7M',\r\n  5,\r\n  '{\"lat\": 33.8547, \"lng\": 35.8623, \"zoom\": 8}',\r\n  '2025-10-14 09:30:00'\r\n);\r\n```\r\n\r\n#### ZONES Table\r\n```sql\r\n-- Zone 1: North Region\r\nINSERT INTO zones (\r\n  id, \r\n  map_id, \r\n  customer_id, \r\n  name, \r\n  color, \r\n  coordinates,\r\n  created_at\r\n) VALUES (\r\n  'a1b2c3d4-e5f6-7890-abcd-ef1234567890',\r\n  42,\r\n  5,\r\n  'North Region',\r\n  '#3b82f6',\r\n  '[[33.8547,35.8623],[34.1234,35.9876],[33.9876,36.1234]]',\r\n  '2025-10-14 09:30:01'\r\n);\r\n\r\n-- Zone 2: Central Region  \r\nINSERT INTO zones (\r\n  id, \r\n  map_id, \r\n  customer_id, \r\n  name, \r\n  color, \r\n  coordinates,\r\n  created_at\r\n) VALUES (\r\n  'd4e5f6g7-h8i9-0j1k-2l3m-4n5678901234',\r\n  42,\r\n  5,\r\n  'Central Region',\r\n  '#ef4444',\r\n  '[[33.5432,35.6789],[33.7654,35.8901],[33.6789,36.0123]]',\r\n  '2025-10-14 09:30:02'\r\n);\r\n\r\n-- Zone 3: South Region\r\nINSERT INTO zones (\r\n  id, \r\n  map_id, \r\n  customer_id, \r\n  name, \r\n  color, \r\n  coordinates,\r\n  created_at\r\n) VALUES (\r\n  'g7h8i9j0-k1l2-3m4n-5o6p-7q8901234567',\r\n  42,\r\n  5,\r\n  'South Region',\r\n  '#22c55e',\r\n  '[[33.2345,35.4567],[33.4567,35.5678],[33.3456,35.6789]]',\r\n  '2025-10-14 09:30:03'\r\n);\r\n```\r\n\r\n### Step 5: Success Message Displayed\r\n\r\n```typescript\r\n// Success message is shown\r\nsetError(\r\n  `Map saved successfully! Code: MAP-L4B2-9K7M | 3 zone(s) saved to database`\r\n);\r\n\r\n// After 2 seconds, redirect to dashboard\r\nsetTimeout(() => {\r\n  navigate('/dashboard');\r\n}, 2000);\r\n```\r\n\r\n## Backend API Endpoint (server.js)\r\n\r\n### Map Creation Endpoint\r\n\r\n```javascript\r\napp.post('/api/map', async (req, res) => {\r\n  const { title, description, map_code, customer_id, map_data } = req.body;\r\n  \r\n  const insertSql = `\r\n    INSERT INTO map (title, description, map_data, map_code, customer_id)\r\n    VALUES ($1, $2, $3, $4, $5)\r\n    RETURNING map_id\r\n  `;\r\n  \r\n  const result = await pool.query(insertSql, [\r\n    title,\r\n    description,\r\n    map_data,\r\n    map_code,\r\n    customer_id\r\n  ]);\r\n  \r\n  res.status(201).json({\r\n    success: true,\r\n    record: {\r\n      map_id: result.rows[0].map_id,\r\n      map_code: map_code\r\n    }\r\n  });\r\n});\r\n```\r\n\r\n### Zone Creation Endpoint (routes/db-routes.js)\r\n\r\n```javascript\r\nrouter.post('/tables/zones', async (req, res) => {\r\n  const { id, map_id, customer_id, name, color, coordinates } = req.body;\r\n  \r\n  try {\r\n    const query = `\r\n      INSERT INTO zones (id, map_id, customer_id, name, color, coordinates)\r\n      VALUES ($1, $2, $3, $4, $5, $6)\r\n      RETURNING *\r\n    `;\r\n    \r\n    const result = await pool.query(query, [\r\n      id,\r\n      map_id,\r\n      customer_id,\r\n      name,\r\n      color,\r\n      JSON.stringify(coordinates)\r\n    ]);\r\n    \r\n    res.status(201).json({\r\n      success: true,\r\n      record: result.rows[0]\r\n    });\r\n  } catch (error) {\r\n    res.status(500).json({\r\n      success: false,\r\n      error: error.message\r\n    });\r\n  }\r\n});\r\n```\r\n\r\n## Data Flow Diagram\r\n\r\n```\r\n┌──────────────┐\r\n│   User       │\r\n│   Draws      │\r\n│   Zones      │\r\n└──────┬───────┘\r\n       │\r\n       ▼\r\n┌──────────────────┐\r\n│  pendingZones[]  │  ← Stored in React State\r\n│  [Zone1, Zone2,  │\r\n│   Zone3]         │\r\n└──────┬───────────┘\r\n       │\r\n       ▼ Click \"Save Map\"\r\n┌──────────────────┐\r\n│  Generate Code   │  → MAP-L4B2-9K7M\r\n└──────┬───────────┘\r\n       │\r\n       ▼\r\n┌──────────────────┐\r\n│  POST /api/map   │  → Creates map record\r\n└──────┬───────────┘\r\n       │\r\n       ▼ Returns map_id: 42\r\n┌──────────────────────┐\r\n│  savePendingZones()  │\r\n└──────┬───────────────┘\r\n       │\r\n       ├─► POST /api/db/tables/zones (Zone 1)\r\n       │   ✅ Success\r\n       │\r\n       ├─► POST /api/db/tables/zones (Zone 2)\r\n       │   ✅ Success\r\n       │\r\n       └─► POST /api/db/tables/zones (Zone 3)\r\n           ✅ Success\r\n       \r\n┌──────────────────┐\r\n│  Database        │\r\n│  ┌────────────┐  │\r\n│  │ MAP Table  │  │  ← 1 record added\r\n│  └────────────┘  │\r\n│  ┌────────────┐  │\r\n│  │ZONES Table │  │  ← 3 records added\r\n│  └────────────┘  │\r\n└──────────────────┘\r\n       │\r\n       ▼\r\n┌──────────────────┐\r\n│  Success Message │\r\n│  \"Map saved!     │\r\n│   Code: MAP-...  │\r\n│   3 zones saved\" │\r\n└──────────────────┘\r\n       │\r\n       ▼ Wait 2 seconds\r\n┌──────────────────┐\r\n│  Redirect to     │\r\n│  Dashboard       │\r\n└──────────────────┘\r\n```\r\n\r\n## Query to Retrieve Map and Zones\r\n\r\n```sql\r\n-- Get map with all its zones\r\nSELECT \r\n  m.map_id,\r\n  m.title,\r\n  m.description,\r\n  m.map_code,\r\n  m.created_at as map_created_at,\r\n  z.id as zone_id,\r\n  z.name as zone_name,\r\n  z.color as zone_color,\r\n  z.coordinates as zone_coordinates,\r\n  z.created_at as zone_created_at\r\nFROM map m\r\nLEFT JOIN zones z ON m.map_id = z.map_id\r\nWHERE m.map_code = 'MAP-L4B2-9K7M'\r\nAND m.customer_id = 5\r\nORDER BY z.created_at;\r\n```\r\n\r\nResult:\r\n```\r\nmap_id | title                    | map_code      | zone_name      | zone_color\r\n-------|--------------------------|---------------|----------------|------------\r\n42     | Lebanon Sales Territory  | MAP-L4B2-9K7M | North Region   | #3b82f6\r\n42     | Lebanon Sales Territory  | MAP-L4B2-9K7M | Central Region | #ef4444\r\n42     | Lebanon Sales Territory  | MAP-L4B2-9K7M | South Region   | #22c55e\r\n```\r\n\r\n## Error Handling Example\r\n\r\n```typescript\r\nconst savePendingZones = async (mapId: number, customerId: number) => {\r\n  const results = {\r\n    total: pendingZones.length,\r\n    success: 0,\r\n    failed: 0,\r\n    errors: []\r\n  };\r\n  \r\n  for (const zone of pendingZones) {\r\n    try {\r\n      const response = await fetch('/api/db/tables/zones', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          id: zone.id,\r\n          map_id: mapId,\r\n          customer_id: customerId,\r\n          name: zone.name,\r\n          color: zone.color,\r\n          coordinates: zone.coordinates\r\n        })\r\n      });\r\n      \r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        results.success++;\r\n        console.log(`✅ Zone \"${zone.name}\" saved successfully`);\r\n      } else {\r\n        results.failed++;\r\n        results.errors.push({ zone: zone.name, error: result.error });\r\n        console.error(`❌ Failed to save zone \"${zone.name}\":`, result.error);\r\n      }\r\n    } catch (err) {\r\n      results.failed++;\r\n      results.errors.push({ zone: zone.name, error: err.message });\r\n      console.error(`❌ Error saving zone \"${zone.name}\":`, err);\r\n    }\r\n  }\r\n  \r\n  return results;\r\n}\r\n```\r\n\r\n## Testing the Feature\r\n\r\n### Manual Test Steps\r\n\r\n1. **Start servers**\r\n   ```bash\r\n   node server.js      # Backend on port 3101\r\n   npm run dev         # Frontend on port 5173/5174\r\n   ```\r\n\r\n2. **Create a map**\r\n   - Navigate to http://localhost:5173\r\n   - Login with test account\r\n   - Click \"Create New Map\"\r\n   - Enter title: \"Test Map\"\r\n   - Note the generated map code\r\n\r\n3. **Draw zones**\r\n   - Click on map to create polygons\r\n   - Create 2-3 test zones\r\n   - Observe zones appearing in \"Created Zones\" list\r\n   - Check they show \"Pending\" status\r\n\r\n4. **Save map**\r\n   - Click \"Save Map & X Zone(s)\" button\r\n   - Watch button change to loading state\r\n   - Wait for success message\r\n   - Verify zone count matches\r\n\r\n5. **Verify in database**\r\n   ```sql\r\n   -- Check map was created\r\n   SELECT * FROM map WHERE map_code = 'MAP-XXXX-XXXX';\r\n   \r\n   -- Check zones were saved\r\n   SELECT * FROM zones WHERE map_id = [returned_map_id];\r\n   ```\r\n\r\n### Expected Results\r\n\r\n✅ Map code generated immediately  \r\n✅ Zones appear in list as drawn  \r\n✅ Button shows zone count  \r\n✅ Save operation completes successfully  \r\n✅ Success message shows zone count  \r\n✅ Redirect to dashboard after 2 seconds  \r\n✅ Map visible in dashboard with all zones  \r\n✅ Database contains all records  \r\n\r\n## Performance Considerations\r\n\r\n- Zones are saved sequentially (not in parallel) to avoid race conditions\r\n- Each zone save is independent - if one fails, others continue\r\n- Database uses JSONB for efficient coordinate storage\r\n- UUID indexes allow fast zone lookups\r\n- Foreign keys ensure referential integrity\r\n"
        }
    ]
}