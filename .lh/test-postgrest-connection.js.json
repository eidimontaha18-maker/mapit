{
    "sourceFile": "test-postgrest-connection.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760430674784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760430674784,
            "name": "Commit-0",
            "content": "import fetch from 'node-fetch';\r\n\r\n// PostgREST configuration\r\nconst POSTGREST_URL = 'http://127.0.0.1:3100';\r\n\r\nasync function testPostgRESTConnection() {\r\n    console.log('🔍 Testing PostgREST connection...\\n');\r\n    \r\n    try {\r\n        // Test 1: Check if PostgREST server is running\r\n        console.log('1. Testing PostgREST server availability...');\r\n        const healthResponse = await fetch(`${POSTGREST_URL}/`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        });\r\n        \r\n        if (healthResponse.ok) {\r\n            console.log('✅ PostgREST server is running on port 3100');\r\n        } else {\r\n            console.log(`❌ PostgREST server responded with status: ${healthResponse.status}`);\r\n            return;\r\n        }\r\n        \r\n        // Test 2: Try to access each table through PostgREST\r\n        const tables = ['customer', 'customer_map', 'map', 'zones'];\r\n        \r\n        console.log('\\n2. Testing table access through PostgREST API:');\r\n        \r\n        for (const table of tables) {\r\n            try {\r\n                const response = await fetch(`${POSTGREST_URL}/${table}?limit=1`, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                });\r\n                \r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    console.log(`   ✅ ${table}: Accessible (sample record count: ${data.length})`);\r\n                } else {\r\n                    console.log(`   ❌ ${table}: Error ${response.status} - ${response.statusText}`);\r\n                }\r\n            } catch (error) {\r\n                console.log(`   ❌ ${table}: Connection error - ${error.message}`);\r\n            }\r\n        }\r\n        \r\n        // Test 3: Test a simple query\r\n        console.log('\\n3. Testing a simple query (GET /zones):');\r\n        try {\r\n            const zonesResponse = await fetch(`${POSTGREST_URL}/zones`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (zonesResponse.ok) {\r\n                const zones = await zonesResponse.json();\r\n                console.log(`   ✅ Retrieved ${zones.length} zones from PostgREST API`);\r\n                if (zones.length > 0) {\r\n                    console.log(`   📋 Sample zone: ${JSON.stringify(zones[0], null, 2)}`);\r\n                }\r\n            } else {\r\n                console.log(`   ❌ Query failed with status: ${zonesResponse.status}`);\r\n            }\r\n        } catch (error) {\r\n            console.log(`   ❌ Query error: ${error.message}`);\r\n        }\r\n        \r\n        console.log('\\n🎉 PostgREST connection test completed!');\r\n        \r\n    } catch (error) {\r\n        console.error('❌ Failed to connect to PostgREST:', error.message);\r\n        console.log('\\n💡 Possible issues:');\r\n        console.log('   - PostgREST server is not running');\r\n        console.log('   - PostgREST is running on a different port');\r\n        console.log('   - Network connectivity issues');\r\n        console.log('\\n🔧 To start PostgREST, run: postgrest postgrest.conf');\r\n    }\r\n}\r\n\r\n// Run the test\r\ntestPostgRESTConnection();"
        }
    ]
}