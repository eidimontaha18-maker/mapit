{
    "sourceFile": "config/database.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760955672805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760955672805,
            "name": "Commit-0",
            "content": "/**\r\n * Centralized Database Configuration\r\n * \r\n * This file provides a single source of truth for database configuration\r\n * across the entire application. Import this file wherever you need DB config.\r\n */\r\n\r\nimport dotenv from 'dotenv';\r\nimport pg from 'pg';\r\n\r\nconst { Pool } = pg;\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\n// Database configuration object\r\nexport const dbConfig = {\r\n  host: process.env.DB_HOST || '127.0.0.1',\r\n  port: parseInt(process.env.DB_PORT || '5432'),\r\n  database: process.env.DB_NAME || 'mapit',\r\n  user: process.env.DB_USER || 'postgres',\r\n  password: process.env.DB_PASSWORD || 'NewStrongPass123',\r\n  \r\n  // Connection string (alternative to individual params)\r\n  connectionString: process.env.DATABASE_URL || 'postgres://postgres:NewStrongPass123@localhost:5432/mapit',\r\n  \r\n  // Connection pool settings\r\n  max: 20, // Maximum number of clients in the pool\r\n  idleTimeoutMillis: 30000, // How long a client is allowed to remain idle before being closed\r\n  connectionTimeoutMillis: 2000, // How long to wait for a connection\r\n};\r\n\r\n// PostgREST configuration\r\nexport const postgrestConfig = {\r\n  host: process.env.POSTGREST_HOST || '127.0.0.1',\r\n  port: parseInt(process.env.POSTGREST_PORT || '3100'),\r\n  dbUri: process.env.POSTGREST_DB_URI || process.env.DATABASE_URL,\r\n  dbSchemas: process.env.POSTGREST_DB_SCHEMAS || 'public',\r\n  dbAnonRole: process.env.POSTGREST_DB_ANON_ROLE || 'anon',\r\n};\r\n\r\n// CORS configuration\r\nexport const corsConfig = {\r\n  origins: process.env.CORS_ORIGINS?.split(',').map(o => o.trim()) || [\r\n    'http://localhost:8080',\r\n    'http://127.0.0.1:8080',\r\n    'http://localhost:5173',\r\n    'http://127.0.0.1:5173',\r\n    'http://localhost:5174',\r\n    'http://127.0.0.1:5174',\r\n    'http://localhost:5175',\r\n    'http://127.0.0.1:5175',\r\n  ],\r\n  maxAge: parseInt(process.env.CORS_MAX_AGE || '86400'),\r\n};\r\n\r\n// Create and export a shared connection pool\r\nexport const pool = new Pool(dbConfig);\r\n\r\n// Handle pool errors\r\npool.on('error', (err) => {\r\n  console.error('Unexpected error on idle database client', err);\r\n  process.exit(-1);\r\n});\r\n\r\n// Test connection function\r\nexport async function testConnection() {\r\n  try {\r\n    const client = await pool.connect();\r\n    const result = await client.query('SELECT NOW() as now, current_database() as db, current_user as user');\r\n    console.log('‚úÖ Database connected successfully!');\r\n    console.log(`üìä Database: ${result.rows[0].db}`);\r\n    console.log(`üë§ User: ${result.rows[0].user}`);\r\n    console.log(`üïí Time: ${result.rows[0].now}`);\r\n    client.release();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('‚ùå Database connection failed:', error.message);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Graceful shutdown\r\nexport async function closePool() {\r\n  try {\r\n    await pool.end();\r\n    console.log('Database pool has ended');\r\n  } catch (error) {\r\n    console.error('Error closing database pool:', error.message);\r\n  }\r\n}\r\n\r\n// Export default configuration object\r\nexport default {\r\n  db: dbConfig,\r\n  postgrest: postgrestConfig,\r\n  cors: corsConfig,\r\n  pool,\r\n  testConnection,\r\n  closePool\r\n};\r\n"
        }
    ]
}