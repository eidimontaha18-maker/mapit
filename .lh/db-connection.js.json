{
    "sourceFile": "db-connection.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760955672742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760955672742,
            "name": "Commit-0",
            "content": "// Database Connection Utility\r\n// This script provides a comprehensive test and utility for \r\n// connecting to the PostgreSQL database with the specified configuration.\r\n\r\nimport pg from 'pg';\r\nimport dotenv from 'dotenv';\r\n\r\nconst { Pool } = pg;\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\n// Configuration from environment variables\r\nconst config = {\r\n  server: {\r\n    host: process.env.POSTGREST_HOST || '127.0.0.1',\r\n    port: parseInt(process.env.POSTGREST_PORT || '3100')\r\n  },\r\n  db: {\r\n    uri: process.env.DATABASE_URL || 'postgres://postgres:NewStrongPass123@localhost:5432/mapit',\r\n    schemas: [process.env.POSTGREST_DB_SCHEMAS || 'public'],\r\n    anonRole: process.env.POSTGREST_DB_ANON_ROLE || 'anon'\r\n  },\r\n  cors: {\r\n    origins: process.env.CORS_ORIGINS?.split(',') || [\r\n      'http://localhost:8080',\r\n      'http://127.0.0.1:8080',\r\n      'http://localhost:5173',\r\n      'http://127.0.0.1:5173'\r\n    ],\r\n    maxAge: parseInt(process.env.CORS_MAX_AGE || '86400')\r\n  }\r\n};\r\n\r\n// Create connection pool\r\nconst pool = new Pool({\r\n  connectionString: config.db.uri\r\n});\r\n\r\n// Function to test basic connection\r\nasync function testConnection() {\r\n  console.log('⏳ Testing PostgreSQL connection...');\r\n  try {\r\n    const client = await pool.connect();\r\n    const result = await client.query('SELECT NOW() as now');\r\n    console.log('✅ Connected to PostgreSQL database!');\r\n    console.log('🕒 Database time:', result.rows[0].now);\r\n    client.release();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('❌ Connection failed:', error.message);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Function to get database information\r\nasync function getDatabaseInfo() {\r\n  try {\r\n    const client = await pool.connect();\r\n    \r\n    // Basic database info\r\n    const dbInfo = await client.query(`\r\n      SELECT \r\n        current_database() as database_name,\r\n        current_schema() as current_schema,\r\n        current_user as connected_user,\r\n        version() as postgres_version\r\n    `);\r\n    \r\n    // Schema info\r\n    const schemaInfo = await client.query(`\r\n      SELECT schema_name \r\n      FROM information_schema.schemata \r\n      ORDER BY schema_name\r\n    `);\r\n    \r\n    // Table counts per schema\r\n    const tableCount = await client.query(`\r\n      SELECT table_schema, COUNT(*) as table_count\r\n      FROM information_schema.tables\r\n      WHERE table_schema NOT IN ('pg_catalog', 'information_schema')\r\n      GROUP BY table_schema\r\n      ORDER BY table_schema\r\n    `);\r\n    \r\n    client.release();\r\n    return {\r\n      info: dbInfo.rows[0],\r\n      schemas: schemaInfo.rows.map(row => row.schema_name),\r\n      tableCounts: tableCount.rows\r\n    };\r\n  } catch (error) {\r\n    console.error('❌ Error getting database info:', error.message);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Main function\r\nasync function main() {\r\n  console.log('📊 Database Configuration:');\r\n  console.log('🔗 URI:', config.db.uri.replace(/:([^:@]+)@/, ':******@'));\r\n  console.log('📂 Schemas:', config.db.schemas.join(', '));\r\n  console.log('👤 Anonymous Role:', config.db.anonRole);\r\n  console.log('🌐 Server Host:', config.server.host);\r\n  console.log('🔢 Server Port:', config.server.port);\r\n  console.log('🌍 CORS Origins:', config.cors.origins.join(', '));\r\n  console.log('⏱️ CORS Max Age:', config.cors.maxAge);\r\n  console.log('--------------------------------------------------');\r\n  \r\n  const isConnected = await testConnection();\r\n  \r\n  if (isConnected) {\r\n    console.log('--------------------------------------------------');\r\n    console.log('📋 Fetching database details...');\r\n    const dbInfo = await getDatabaseInfo();\r\n    \r\n    if (dbInfo) {\r\n      console.log('--------------------------------------------------');\r\n      console.log('📝 Database Information:');\r\n      console.log('📦 Database:', dbInfo.info.database_name);\r\n      console.log('📋 Current Schema:', dbInfo.info.current_schema);\r\n      console.log('👤 Connected User:', dbInfo.info.connected_user);\r\n      console.log('🔢 PostgreSQL Version:', dbInfo.info.postgres_version);\r\n      \r\n      console.log('--------------------------------------------------');\r\n      console.log('📚 Available Schemas:');\r\n      dbInfo.schemas.forEach(schema => {\r\n        console.log(` - ${schema}`);\r\n      });\r\n      \r\n      console.log('--------------------------------------------------');\r\n      console.log('📊 Table Counts by Schema:');\r\n      dbInfo.tableCounts.forEach(item => {\r\n        console.log(` - ${item.table_schema}: ${item.table_count} tables`);\r\n      });\r\n    }\r\n  }\r\n  \r\n  await pool.end();\r\n}\r\n\r\nmain().catch(err => {\r\n  console.error('❌ Unhandled error:', err);\r\n  process.exit(1);\r\n});"
        }
    ]
}