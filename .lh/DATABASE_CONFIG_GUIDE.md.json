{
    "sourceFile": "DATABASE_CONFIG_GUIDE.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760955673303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760955673303,
            "name": "Commit-0",
            "content": "# Database Configuration Guide\r\n\r\nThis guide explains how the database connection is configured in the MapIt project.\r\n\r\n## ‚úÖ Configuration Files\r\n\r\n### 1. `.env` File (Environment Variables)\r\nThe `.env` file contains all your database credentials and configuration:\r\n\r\n```env\r\n# Database Connection\r\nDB_HOST=127.0.0.1\r\nDB_PORT=5432\r\nDB_NAME=mapit\r\nDB_USER=postgres\r\nDB_PASSWORD=NewStrongPass123\r\n\r\n# Full Database URI\r\nDATABASE_URL=postgres://postgres:NewStrongPass123@localhost:5432/mapit\r\n\r\n# PostgREST Configuration\r\nPOSTGREST_HOST=127.0.0.1\r\nPOSTGREST_PORT=3100\r\nPOSTGREST_DB_URI=postgres://postgres:NewStrongPass123@localhost:5432/mapit\r\nPOSTGREST_DB_SCHEMAS=public\r\nPOSTGREST_DB_ANON_ROLE=anon\r\n\r\n# CORS Settings\r\nCORS_ORIGINS=http://localhost:8080,http://127.0.0.1:8080,http://localhost:5173,http://127.0.0.1:5173\r\nCORS_MAX_AGE=86400\r\n\r\n# API Base URL\r\nAPI_URL=http://127.0.0.1:3100\r\n```\r\n\r\n### 2. `config/database.js` (Centralized Config)\r\nThis file imports the `.env` variables and creates a shared database pool that all other files use.\r\n\r\n**Benefits:**\r\n- ‚úÖ Single source of truth\r\n- ‚úÖ No hardcoded credentials\r\n- ‚úÖ Shared connection pool (better performance)\r\n- ‚úÖ Easy to update configuration\r\n\r\n## üöÄ Quick Start\r\n\r\n### 1. Test Database Connection\r\n```powershell\r\nnode test-db-config.js\r\n```\r\n\r\nThis will verify:\r\n- Database credentials are correct\r\n- PostgreSQL is running\r\n- Connection can be established\r\n\r\n### 2. Start Your Application\r\n```powershell\r\n# Start the Node.js server\r\nnpm run server\r\n\r\n# In another terminal, start the frontend\r\nnpm run dev\r\n```\r\n\r\n### 3. Start PostgREST (Optional)\r\n```powershell\r\npostgrest postgrest.conf\r\n```\r\n\r\n## üìÅ File Structure\r\n\r\n```\r\nmapit/\r\n‚îú‚îÄ‚îÄ .env                      # Environment variables (DO NOT commit!)\r\n‚îú‚îÄ‚îÄ config/\r\n‚îÇ   ‚îî‚îÄ‚îÄ database.js          # Centralized DB configuration\r\n‚îú‚îÄ‚îÄ server.js                # Main Express server\r\n‚îú‚îÄ‚îÄ src/\r\n‚îÇ   ‚îî‚îÄ‚îÄ db/\r\n‚îÇ       ‚îî‚îÄ‚îÄ dbOperations.js  # Database operations\r\n‚îú‚îÄ‚îÄ routes/\r\n‚îÇ   ‚îú‚îÄ‚îÄ db-routes.js         # Database API routes\r\n‚îÇ   ‚îî‚îÄ‚îÄ zone-routes.js       # Zone management routes\r\n‚îî‚îÄ‚îÄ test-db-config.js        # Connection test script\r\n```\r\n\r\n## üîß How It Works\r\n\r\n### Before (‚ùå Multiple Hardcoded Connections)\r\nEach file had its own hardcoded connection:\r\n```javascript\r\n// server.js\r\nconst pool = new Pool({ \r\n  connectionString: 'postgres://postgres:pass@localhost:5432/mapit' \r\n});\r\n\r\n// dbOperations.js\r\nconst pool = new Pool({ \r\n  connectionString: 'postgres://postgres:pass@localhost:5432/mapit' \r\n});\r\n```\r\n\r\n**Problems:**\r\n- Had to update credentials in multiple files\r\n- Multiple connection pools (inefficient)\r\n- Easy to make mistakes\r\n- Hard to maintain\r\n\r\n### After (‚úÖ Centralized Configuration)\r\nAll files import from one place:\r\n```javascript\r\n// config/database.js\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nexport const pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL\r\n});\r\n\r\n// server.js\r\nimport dbConfig from './config/database.js';\r\nconst { pool } = dbConfig;\r\n\r\n// dbOperations.js\r\nimport { pool } from '../../config/database.js';\r\n```\r\n\r\n**Benefits:**\r\n- Update `.env` file once, works everywhere\r\n- Single shared connection pool\r\n- Type-safe configuration\r\n- Easy to test and debug\r\n\r\n## üîê Security Best Practices\r\n\r\n1. **Never commit `.env` to git**\r\n   ```bash\r\n   # .gitignore should contain:\r\n   .env\r\n   .env.local\r\n   .env.*.local\r\n   ```\r\n\r\n2. **Use strong passwords**\r\n   - Default: `NewStrongPass123`\r\n   - Change in production!\r\n\r\n3. **Different environments**\r\n   ```env\r\n   # Development\r\n   DATABASE_URL=postgres://postgres:devpass@localhost:5432/mapit_dev\r\n\r\n   # Production\r\n   DATABASE_URL=postgres://postgres:strongpass@prod-server:5432/mapit_prod\r\n   ```\r\n\r\n## üêõ Troubleshooting\r\n\r\n### Connection Refused\r\n```\r\nError: connect ECONNREFUSED 127.0.0.1:5432\r\n```\r\n**Solution:** PostgreSQL is not running\r\n```powershell\r\n# Start PostgreSQL service\r\nnet start postgresql-x64-14\r\n```\r\n\r\n### Authentication Failed\r\n```\r\nError: password authentication failed for user \"postgres\"\r\n```\r\n**Solution:** Check credentials in `.env` file\r\n\r\n### Database Does Not Exist\r\n```\r\nError: database \"mapit\" does not exist\r\n```\r\n**Solution:** Create the database\r\n```sql\r\nCREATE DATABASE mapit;\r\n```\r\n\r\n### Pool Exhausted\r\n```\r\nError: Connection pool exhausted\r\n```\r\n**Solution:** Increase pool size in `config/database.js`\r\n```javascript\r\nexport const dbConfig = {\r\n  // ...\r\n  max: 50, // Increase from default 20\r\n};\r\n```\r\n\r\n## üìä Monitoring\r\n\r\n### Check Active Connections\r\n```sql\r\nSELECT count(*) \r\nFROM pg_stat_activity \r\nWHERE datname = 'mapit';\r\n```\r\n\r\n### View Connection Pool Status\r\n```javascript\r\nimport dbConfig from './config/database.js';\r\n\r\nconsole.log('Total:', dbConfig.pool.totalCount);\r\nconsole.log('Idle:', dbConfig.pool.idleCount);\r\nconsole.log('Waiting:', dbConfig.pool.waitingCount);\r\n```\r\n\r\n## üîÑ Migration from Old Setup\r\n\r\nIf you have old files with hardcoded connections:\r\n\r\n1. **Find all database connections:**\r\n   ```powershell\r\n   findstr /s /i \"new Pool\" *.js\r\n   ```\r\n\r\n2. **Replace with centralized config:**\r\n   ```javascript\r\n   // Old\r\n   const pool = new Pool({ \r\n     connectionString: 'postgres://...' \r\n   });\r\n\r\n   // New\r\n   import { pool } from './config/database.js';\r\n   ```\r\n\r\n3. **Test thoroughly:**\r\n   ```powershell\r\n   node test-db-config.js\r\n   npm run server\r\n   ```\r\n\r\n## üìö Additional Resources\r\n\r\n- [PostgreSQL Documentation](https://www.postgresql.org/docs/)\r\n- [node-postgres (pg) Documentation](https://node-postgres.com/)\r\n- [PostgREST Documentation](https://postgrest.org/)\r\n- [dotenv Documentation](https://github.com/motdotla/dotenv)\r\n\r\n## ‚ú® Summary\r\n\r\nYou now have:\r\n- ‚úÖ `.env` file with all credentials\r\n- ‚úÖ Centralized `config/database.js`\r\n- ‚úÖ All files using shared configuration\r\n- ‚úÖ Test script to verify connections\r\n- ‚úÖ No more hardcoded credentials\r\n- ‚úÖ Easy to maintain and update\r\n\r\n**To change database settings:** Just update the `.env` file! üéâ\r\n"
        }
    ]
}