{
    "sourceFile": "src/components/NewMapForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1760440396569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760440627803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,28 +4,95 @@\n interface NewMapFormProps {\r\n   onCancel: () => void;\r\n }\r\n \r\n+// Function to generate unique map code\r\n+const generateMapCode = (): string => {\r\n+  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n+  const part1 = Array.from({ length: 4 }, () => chars[Math.floor(Math.random() * chars.length)]).join('');\r\n+  const part2 = Array.from({ length: 4 }, () => chars[Math.floor(Math.random() * chars.length)]).join('');\r\n+  return `MAP-${part1}-${part2}`;\r\n+};\r\n+\r\n const NewMapForm: React.FC<NewMapFormProps> = ({ onCancel }) => {\r\n   const [mapTitle, setMapTitle] = useState('');\r\n   const [mapDescription, setMapDescription] = useState('');\r\n   const [error, setError] = useState('');\r\n+  const [isSaving, setIsSaving] = useState(false);\r\n   const navigate = useNavigate();\r\n \r\n-  const handleSubmit = (e: React.FormEvent) => {\r\n+  const handleSubmit = async (e: React.FormEvent) => {\r\n     e.preventDefault();\r\n     if (!mapTitle.trim()) {\r\n       setError('Title is required');\r\n       return;\r\n     }\r\n     \r\n-    // Store the initial map details in session storage\r\n-    // to be used on the create-map page\r\n-    sessionStorage.setItem('new_map_title', mapTitle);\r\n-    sessionStorage.setItem('new_map_description', mapDescription);\r\n+    setIsSaving(true);\r\n+    setError('');\r\n     \r\n-    // Navigate to the create-map page\r\n-    navigate('/create-map');\r\n+    try {\r\n+      // Get customer_id from localStorage\r\n+      const userStr = localStorage.getItem('user');\r\n+      if (!userStr) {\r\n+        setError('You must be logged in to create maps');\r\n+        setIsSaving(false);\r\n+        return;\r\n+      }\r\n+      \r\n+      const user = JSON.parse(userStr);\r\n+      if (!user.customer_id) {\r\n+        setError('Invalid user data');\r\n+        setIsSaving(false);\r\n+        return;\r\n+      }\r\n+      \r\n+      // Generate map code\r\n+      const mapCode = generateMapCode();\r\n+      \r\n+      // Create map data\r\n+      const mapData = {\r\n+        title: mapTitle,\r\n+        description: mapDescription,\r\n+        map_code: mapCode,\r\n+        customer_id: user.customer_id,\r\n+        map_data: { lat: 20, lng: 0, zoom: 2 },\r\n+        map_bounds: { center: [20, 0], zoom: 2 },\r\n+        active: true,\r\n+        country: null\r\n+      };\r\n+      \r\n+      console.log('Creating map:', mapData);\r\n+      \r\n+      // Save map to database\r\n+      const response = await fetch('/api/map', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify(mapData)\r\n+      });\r\n+      \r\n+      if (!response.ok) {\r\n+        const errorData = await response.json();\r\n+        throw new Error(errorData.error || 'Failed to create map');\r\n+      }\r\n+      \r\n+      const result = await response.json();\r\n+      console.log('Map created successfully:', result);\r\n+      \r\n+      // Navigate to edit the new map\r\n+      if (result.map && result.map.map_id) {\r\n+        navigate(`/edit-map/${result.map.map_id}`);\r\n+      } else {\r\n+        throw new Error('Map ID not returned from server');\r\n+      }\r\n+      \r\n+    } catch (err) {\r\n+      console.error('Error creating map:', err);\r\n+      setError(err instanceof Error ? err.message : 'Failed to create map');\r\n+      setIsSaving(false);\r\n+    }\r\n   };\r\n \r\n   return (\r\n     <>\r\n@@ -61,8 +128,12 @@\n           0%, 100% { transform: translateX(0); }\r\n           25% { transform: translateX(-5px); }\r\n           75% { transform: translateX(5px); }\r\n         }\r\n+        @keyframes spin {\r\n+          from { transform: rotate(0deg); }\r\n+          to { transform: rotate(360deg); }\r\n+        }\r\n         .input-focus:focus {\r\n           border-color: #4f8cff !important;\r\n           box-shadow: 0 0 0 3px rgba(79, 140, 255, 0.1) !important;\r\n         }\r\n@@ -303,43 +374,50 @@\n           }}>\r\n             <button\r\n               type=\"button\"\r\n               onClick={onCancel}\r\n+              disabled={isSaving}\r\n               style={{\r\n                 padding: '13px 24px',\r\n                 borderRadius: '12px',\r\n                 border: '2px solid #e2e8f0',\r\n                 background: 'white',\r\n                 color: '#4a5568',\r\n                 fontSize: '15px',\r\n                 fontWeight: '600',\r\n-                cursor: 'pointer',\r\n+                cursor: isSaving ? 'not-allowed' : 'pointer',\r\n                 transition: 'all 0.2s ease',\r\n                 flex: '0 0 auto',\r\n-                minWidth: '100px'\r\n+                minWidth: '100px',\r\n+                opacity: isSaving ? 0.5 : 1\r\n               }}\r\n               onMouseOver={e => {\r\n-                e.currentTarget.style.background = '#f7fafc';\r\n-                e.currentTarget.style.borderColor = '#cbd5e0';\r\n+                if (!isSaving) {\r\n+                  e.currentTarget.style.background = '#f7fafc';\r\n+                  e.currentTarget.style.borderColor = '#cbd5e0';\r\n+                }\r\n               }}\r\n               onMouseOut={e => {\r\n-                e.currentTarget.style.background = 'white';\r\n-                e.currentTarget.style.borderColor = '#e2e8f0';\r\n+                if (!isSaving) {\r\n+                  e.currentTarget.style.background = 'white';\r\n+                  e.currentTarget.style.borderColor = '#e2e8f0';\r\n+                }\r\n               }}\r\n             >\r\n               Cancel\r\n             </button>\r\n             <button\r\n               type=\"submit\"\r\n+              disabled={isSaving}\r\n               style={{\r\n                 padding: '13px 28px',\r\n                 borderRadius: '12px',\r\n                 border: 'none',\r\n-                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n+                background: isSaving ? '#94a3b8' : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                 color: 'white',\r\n                 fontSize: '15px',\r\n                 fontWeight: '600',\r\n-                cursor: 'pointer',\r\n+                cursor: isSaving ? 'not-allowed' : 'pointer',\r\n                 transition: 'all 0.2s ease',\r\n                 boxShadow: '0 4px 14px rgba(102, 126, 234, 0.4)',\r\n                 flex: '1',\r\n                 display: 'flex',\r\n@@ -347,21 +425,36 @@\n                 justifyContent: 'center',\r\n                 gap: '8px'\r\n               }}\r\n               onMouseOver={e => {\r\n-                e.currentTarget.style.transform = 'translateY(-1px)';\r\n-                e.currentTarget.style.boxShadow = '0 6px 20px rgba(102, 126, 234, 0.5)';\r\n+                if (!isSaving) {\r\n+                  e.currentTarget.style.transform = 'translateY(-1px)';\r\n+                  e.currentTarget.style.boxShadow = '0 6px 20px rgba(102, 126, 234, 0.5)';\r\n+                }\r\n               }}\r\n               onMouseOut={e => {\r\n-                e.currentTarget.style.transform = 'translateY(0)';\r\n-                e.currentTarget.style.boxShadow = '0 4px 14px rgba(102, 126, 234, 0.4)';\r\n+                if (!isSaving) {\r\n+                  e.currentTarget.style.transform = 'translateY(0)';\r\n+                  e.currentTarget.style.boxShadow = '0 4px 14px rgba(102, 126, 234, 0.4)';\r\n+                }\r\n               }}\r\n             >\r\n-              Continue to Map Editor\r\n-              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n-                <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\r\n-                <polyline points=\"12 5 19 12 12 19\"></polyline>\r\n-              </svg>\r\n+              {isSaving ? (\r\n+                <>\r\n+                  <svg style={{ animation: 'spin 1s linear infinite' }} xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n+                    <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\r\n+                  </svg>\r\n+                  Creating Map...\r\n+                </>\r\n+              ) : (\r\n+                <>\r\n+                  Create Map & Add Zones\r\n+                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n+                    <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\r\n+                    <polyline points=\"12 5 19 12 12 19\"></polyline>\r\n+                  </svg>\r\n+                </>\r\n+              )}\r\n             </button>\r\n           </div>\r\n         </form>\r\n       </div>\r\n"
                },
                {
                    "date": 1760440831056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,18 +31,20 @@\n     setError('');\r\n     \r\n     try {\r\n       // Get customer_id from localStorage\r\n-      const userStr = localStorage.getItem('user');\r\n+      const userStr = localStorage.getItem('mapit_user');\r\n       if (!userStr) {\r\n-        setError('You must be logged in to create maps');\r\n+        setError('You must be logged in to create maps. Please log in again.');\r\n         setIsSaving(false);\r\n         return;\r\n       }\r\n       \r\n       const user = JSON.parse(userStr);\r\n+      console.log('User data from localStorage:', user);\r\n+      \r\n       if (!user.customer_id) {\r\n-        setError('Invalid user data');\r\n+        setError('Session expired. Please log out and log in again to refresh your session.');\r\n         setIsSaving(false);\r\n         return;\r\n       }\r\n       \r\n"
                }
            ],
            "date": 1760440396569,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ninterface NewMapFormProps {\r\n  onCancel: () => void;\r\n}\r\n\r\nconst NewMapForm: React.FC<NewMapFormProps> = ({ onCancel }) => {\r\n  const [mapTitle, setMapTitle] = useState('');\r\n  const [mapDescription, setMapDescription] = useState('');\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!mapTitle.trim()) {\r\n      setError('Title is required');\r\n      return;\r\n    }\r\n    \r\n    // Store the initial map details in session storage\r\n    // to be used on the create-map page\r\n    sessionStorage.setItem('new_map_title', mapTitle);\r\n    sessionStorage.setItem('new_map_description', mapDescription);\r\n    \r\n    // Navigate to the create-map page\r\n    navigate('/create-map');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Backdrop overlay */}\r\n      <div style={{\r\n        position: 'fixed',\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        background: 'rgba(0, 0, 0, 0.5)',\r\n        backdropFilter: 'blur(8px)',\r\n        zIndex: 999,\r\n        animation: 'fadeIn 0.2s ease-out'\r\n      }} onClick={onCancel} />\r\n      \r\n      <style>{`\r\n        @keyframes fadeIn {\r\n          from { opacity: 0; }\r\n          to { opacity: 1; }\r\n        }\r\n        @keyframes slideUp {\r\n          from { \r\n            opacity: 0;\r\n            transform: translateY(30px) scale(0.95);\r\n          }\r\n          to { \r\n            opacity: 1;\r\n            transform: translateY(0) scale(1);\r\n          }\r\n        }\r\n        @keyframes shake {\r\n          0%, 100% { transform: translateX(0); }\r\n          25% { transform: translateX(-5px); }\r\n          75% { transform: translateX(5px); }\r\n        }\r\n        .input-focus:focus {\r\n          border-color: #4f8cff !important;\r\n          box-shadow: 0 0 0 3px rgba(79, 140, 255, 0.1) !important;\r\n        }\r\n        .input-error {\r\n          animation: shake 0.4s ease-in-out;\r\n        }\r\n      `}</style>\r\n      \r\n      <div className=\"new-map-form-container\" style={{ \r\n        position: 'fixed',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '90%', \r\n        maxWidth: '540px', \r\n        padding: '0', \r\n        borderRadius: '20px', \r\n        boxShadow: '0 20px 60px rgba(0,0,0,0.3)',\r\n        background: 'white',\r\n        color: '#000',\r\n        fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif',\r\n        zIndex: 1000,\r\n        animation: 'slideUp 0.3s cubic-bezier(0.16, 1, 0.3, 1)',\r\n        overflow: 'hidden'\r\n      }} onClick={(e) => e.stopPropagation()}>\r\n        \r\n        {/* Header with gradient */}\r\n        <div style={{\r\n          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n          padding: '32px 40px',\r\n          position: 'relative',\r\n          overflow: 'hidden'\r\n        }}>\r\n          {/* Decorative circles */}\r\n          <div style={{\r\n            position: 'absolute',\r\n            top: '-20px',\r\n            right: '-20px',\r\n            width: '120px',\r\n            height: '120px',\r\n            borderRadius: '50%',\r\n            background: 'rgba(255,255,255,0.1)',\r\n            filter: 'blur(20px)'\r\n          }} />\r\n          <div style={{\r\n            position: 'absolute',\r\n            bottom: '-30px',\r\n            left: '-30px',\r\n            width: '100px',\r\n            height: '100px',\r\n            borderRadius: '50%',\r\n            background: 'rgba(255,255,255,0.1)',\r\n            filter: 'blur(15px)'\r\n          }} />\r\n          \r\n          {/* Icon */}\r\n          <div style={{\r\n            width: '64px',\r\n            height: '64px',\r\n            background: 'rgba(255,255,255,0.2)',\r\n            borderRadius: '16px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            marginBottom: '16px',\r\n            backdropFilter: 'blur(10px)',\r\n            border: '1px solid rgba(255,255,255,0.3)'\r\n          }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n              <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path>\r\n              <circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\r\n            </svg>\r\n          </div>\r\n          \r\n          <h2 style={{ \r\n            margin: 0,\r\n            color: 'white', \r\n            fontSize: '28px',\r\n            fontWeight: '700',\r\n            letterSpacing: '-0.5px',\r\n            position: 'relative',\r\n            zIndex: 1\r\n          }}>Create New Map</h2>\r\n          <p style={{\r\n            margin: '8px 0 0 0',\r\n            color: 'rgba(255,255,255,0.9)',\r\n            fontSize: '15px',\r\n            fontWeight: '400',\r\n            position: 'relative',\r\n            zIndex: 1\r\n          }}>\r\n            Start building your custom map\r\n          </p>\r\n        </div>\r\n        \r\n        {/* Form content */}\r\n        <form onSubmit={handleSubmit} style={{ padding: '32px 40px 40px' }}>\r\n          <div style={{ marginBottom: '24px' }}>\r\n            <label htmlFor=\"mapTitle\" style={{ \r\n              display: 'block', \r\n              marginBottom: '8px', \r\n              fontWeight: '600', \r\n              color: '#1a202c',\r\n              fontSize: '14px',\r\n              letterSpacing: '0.2px'\r\n            }}>\r\n              Map Title <span style={{ color: '#f56565' }}>*</span>\r\n            </label>\r\n            <div style={{ position: 'relative' }}>\r\n              <input\r\n                id=\"mapTitle\"\r\n                type=\"text\"\r\n                placeholder=\"e.g., Sales Territories 2024\"\r\n                value={mapTitle}\r\n                onChange={(e) => {\r\n                  setMapTitle(e.target.value);\r\n                  if (e.target.value.trim()) setError('');\r\n                }}\r\n                className={`input-focus ${error ? 'input-error' : ''}`}\r\n                style={{\r\n                  width: '100%',\r\n                  padding: '13px 16px 13px 44px',\r\n                  borderRadius: '12px',\r\n                  border: error ? '2px solid #f56565' : '2px solid #e2e8f0',\r\n                  fontSize: '15px',\r\n                  color: '#1a202c',\r\n                  background: '#f8fafc',\r\n                  transition: 'all 0.2s ease',\r\n                  outline: 'none',\r\n                  fontWeight: '500'\r\n                }}\r\n                required\r\n              />\r\n              <svg \r\n                style={{\r\n                  position: 'absolute',\r\n                  left: '14px',\r\n                  top: '50%',\r\n                  transform: 'translateY(-50%)',\r\n                  pointerEvents: 'none'\r\n                }}\r\n                xmlns=\"http://www.w3.org/2000/svg\" \r\n                width=\"20\" \r\n                height=\"20\" \r\n                viewBox=\"0 0 24 24\" \r\n                fill=\"none\" \r\n                stroke=\"#94a3b8\" \r\n                strokeWidth=\"2\" \r\n                strokeLinecap=\"round\" \r\n                strokeLinejoin=\"round\"\r\n              >\r\n                <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\r\n                <polyline points=\"14 2 14 8 20 8\"></polyline>\r\n                <line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"12\"></line>\r\n                <line x1=\"9\" y1=\"15\" x2=\"15\" y2=\"15\"></line>\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          \r\n          <div style={{ marginBottom: '28px' }}>\r\n            <label htmlFor=\"mapDescription\" style={{ \r\n              display: 'block', \r\n              marginBottom: '8px', \r\n              fontWeight: '600',\r\n              color: '#1a202c',\r\n              fontSize: '14px',\r\n              letterSpacing: '0.2px'\r\n            }}>\r\n              Description <span style={{ color: '#94a3b8', fontWeight: '400', fontSize: '13px' }}>(optional)</span>\r\n            </label>\r\n            <textarea\r\n              id=\"mapDescription\"\r\n              placeholder=\"Add context about this map, what it represents, or how you plan to use it...\"\r\n              value={mapDescription}\r\n              onChange={(e) => setMapDescription(e.target.value)}\r\n              className=\"input-focus\"\r\n              style={{\r\n                width: '100%',\r\n                padding: '13px 16px',\r\n                borderRadius: '12px',\r\n                border: '2px solid #e2e8f0',\r\n                fontSize: '15px',\r\n                color: '#1a202c',\r\n                background: '#f8fafc',\r\n                minHeight: '120px',\r\n                resize: 'vertical',\r\n                transition: 'all 0.2s ease',\r\n                outline: 'none',\r\n                fontWeight: '400',\r\n                lineHeight: '1.6',\r\n                fontFamily: 'inherit'\r\n              }}\r\n            />\r\n          </div>\r\n          \r\n          {error && (\r\n            <div style={{ \r\n              color: '#c53030', \r\n              marginBottom: '24px',\r\n              padding: '12px 16px 12px 44px',\r\n              background: 'linear-gradient(to right, #fff5f5, #fed7d7)',\r\n              borderRadius: '10px',\r\n              border: '1px solid #fc8181',\r\n              fontSize: '14px',\r\n              fontWeight: '500',\r\n              position: 'relative',\r\n              animation: 'shake 0.4s ease-in-out'\r\n            }}>\r\n              <svg \r\n                style={{\r\n                  position: 'absolute',\r\n                  left: '14px',\r\n                  top: '50%',\r\n                  transform: 'translateY(-50%)'\r\n                }}\r\n                xmlns=\"http://www.w3.org/2000/svg\" \r\n                width=\"20\" \r\n                height=\"20\" \r\n                viewBox=\"0 0 24 24\" \r\n                fill=\"none\" \r\n                stroke=\"#c53030\" \r\n                strokeWidth=\"2\" \r\n                strokeLinecap=\"round\" \r\n                strokeLinejoin=\"round\"\r\n              >\r\n                <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\r\n                <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\r\n              </svg>\r\n              {error}\r\n            </div>\r\n          )}\r\n          \r\n          <div style={{ \r\n            display: 'flex', \r\n            gap: '12px',\r\n            marginTop: '8px'\r\n          }}>\r\n            <button\r\n              type=\"button\"\r\n              onClick={onCancel}\r\n              style={{\r\n                padding: '13px 24px',\r\n                borderRadius: '12px',\r\n                border: '2px solid #e2e8f0',\r\n                background: 'white',\r\n                color: '#4a5568',\r\n                fontSize: '15px',\r\n                fontWeight: '600',\r\n                cursor: 'pointer',\r\n                transition: 'all 0.2s ease',\r\n                flex: '0 0 auto',\r\n                minWidth: '100px'\r\n              }}\r\n              onMouseOver={e => {\r\n                e.currentTarget.style.background = '#f7fafc';\r\n                e.currentTarget.style.borderColor = '#cbd5e0';\r\n              }}\r\n              onMouseOut={e => {\r\n                e.currentTarget.style.background = 'white';\r\n                e.currentTarget.style.borderColor = '#e2e8f0';\r\n              }}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              style={{\r\n                padding: '13px 28px',\r\n                borderRadius: '12px',\r\n                border: 'none',\r\n                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r\n                color: 'white',\r\n                fontSize: '15px',\r\n                fontWeight: '600',\r\n                cursor: 'pointer',\r\n                transition: 'all 0.2s ease',\r\n                boxShadow: '0 4px 14px rgba(102, 126, 234, 0.4)',\r\n                flex: '1',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                gap: '8px'\r\n              }}\r\n              onMouseOver={e => {\r\n                e.currentTarget.style.transform = 'translateY(-1px)';\r\n                e.currentTarget.style.boxShadow = '0 6px 20px rgba(102, 126, 234, 0.5)';\r\n              }}\r\n              onMouseOut={e => {\r\n                e.currentTarget.style.transform = 'translateY(0)';\r\n                e.currentTarget.style.boxShadow = '0 4px 14px rgba(102, 126, 234, 0.4)';\r\n              }}\r\n            >\r\n              Continue to Map Editor\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\r\n                <polyline points=\"12 5 19 12 12 19\"></polyline>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewMapForm;"
        }
    ]
}