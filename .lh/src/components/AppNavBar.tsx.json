{
    "sourceFile": "src/components/AppNavBar.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1761129928806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761129980107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,15 +10,12 @@\n   isAdminViewing?: boolean; // New prop to indicate admin is viewing a map\r\n }\r\n \r\n const AppNavBar: React.FC<AppNavBarProps> = ({ onLogout, onSaveMap, isAdminViewing = false }) => {\r\n-  const { isLoggedIn, user, logout } = useAuth();\r\n+  const { isLoggedIn, logout } = useAuth();\r\n   const navigate = useNavigate();\r\n   const location = useLocation();\r\n \r\n-  // Check if current user is admin\r\n-  const isAdmin = localStorage.getItem('isAdmin') === 'true';\r\n-\r\n   // No need for local state or localStorage checks as we're using AuthContext\r\n \r\n   const handleLogout = async () => {\r\n     // Auto-save before logout if we're on a map creation/editing page\r\n"
                }
            ],
            "date": 1761129928806,
            "name": "Commit-0",
            "content": "import React from 'react';\r\nimport './AppNavBar.css';\r\nimport mapitLogo from '../assets/mapit-logo.svg';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../hooks/useAuth';\r\n\r\ninterface AppNavBarProps { \r\n  onLogout?: () => void;\r\n  onSaveMap?: () => Promise<void>;\r\n  isAdminViewing?: boolean; // New prop to indicate admin is viewing a map\r\n}\r\n\r\nconst AppNavBar: React.FC<AppNavBarProps> = ({ onLogout, onSaveMap, isAdminViewing = false }) => {\r\n  const { isLoggedIn, user, logout } = useAuth();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Check if current user is admin\r\n  const isAdmin = localStorage.getItem('isAdmin') === 'true';\r\n\r\n  // No need for local state or localStorage checks as we're using AuthContext\r\n\r\n  const handleLogout = async () => {\r\n    // Auto-save before logout if we're on a map creation/editing page\r\n    const isOnMapPage = location.pathname === '/create-map' || \r\n                       location.pathname.startsWith('/edit-map/') ||\r\n                       location.pathname.startsWith('/view-map/');\r\n    \r\n    if (isOnMapPage && onSaveMap) {\r\n      try {\r\n        console.log('Auto-saving before logout...');\r\n        await onSaveMap();\r\n        console.log('Auto-save successful before logout');\r\n      } catch (error) {\r\n        console.error('Failed to auto-save before logout:', error);\r\n        // Show user a confirmation dialog\r\n        const confirmLogout = window.confirm(\r\n          'Failed to save your work. Do you want to logout anyway? Unsaved changes may be lost.'\r\n        );\r\n        if (!confirmLogout) return; // Don't logout if user cancels\r\n      }\r\n    }\r\n    \r\n    logout(); // Use the logout function from AuthContext\r\n    if (onLogout) onLogout();\r\n    navigate('/login');\r\n  };\r\n\r\n  const handleLogoClick = async (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    \r\n    // Check if we're on a map creation/editing page and need to auto-save\r\n    const isOnMapPage = location.pathname === '/create-map' || \r\n                       location.pathname.startsWith('/edit-map/') ||\r\n                       location.pathname.startsWith('/view-map/');\r\n    \r\n    if (isOnMapPage && onSaveMap) {\r\n      try {\r\n        console.log('Auto-saving before navigation...');\r\n        await onSaveMap();\r\n        console.log('Map auto-saved before navigation');\r\n      } catch (error) {\r\n        console.error('Failed to auto-save map:', error);\r\n        // Show user a warning but continue navigation\r\n        console.warn('Navigation continuing despite save failure');\r\n      }\r\n    }\r\n    \r\n    // Navigate to dashboard if logged in, otherwise go to home/login\r\n    if (isLoggedIn) {\r\n      navigate('/dashboard');\r\n    } else {\r\n      navigate('/');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <nav className=\"app-navbar creative-navbar\">\r\n      <div className=\"app-navbar-logo creative-navbar-logo\">\r\n        <div className=\"logo-link\" onClick={handleLogoClick} style={{ cursor: 'pointer' }}>\r\n          <img src={mapitLogo} alt=\"MapIt Logo\" className=\"modern-logo\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"app-navbar-actions creative-navbar-actions\">\r\n        {isAdminViewing ? (\r\n          // Admin viewing mode - show modern back button, no logout\r\n          <button \r\n            className=\"admin-back-button\"\r\n            onClick={() => navigate('/admin/dashboard')}\r\n            title=\"Back to Admin Dashboard\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" width=\"20\" height=\"20\">\r\n              <path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"/>\r\n            </svg>\r\n            <span>Back to Dashboard</span>\r\n          </button>\r\n        ) : isLoggedIn ? (\r\n          <button className=\"app-navbar-logout creative-navbar-logout\" onClick={handleLogout}>Logout</button>\r\n        ) : (\r\n          <div className=\"auth-buttons\">\r\n            <button \r\n              className=\"app-navbar-login\" \r\n              onClick={() => navigate('/login')}\r\n            >\r\n              Login\r\n            </button>\r\n            <button \r\n              className=\"app-navbar-signup\" \r\n              onClick={() => navigate('/register')}\r\n            >\r\n              Signup\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default AppNavBar;\r\n"
        }
    ]
}