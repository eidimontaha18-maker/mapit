{
    "sourceFile": "src/components/CountrySidebar.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1760957535654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760957572689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,8 @@\n import allCountries from '../assets/allCountries.json';\r\n import allCities from '../assets/allCities.json';\r\n import { COUNTRY_COORDINATES } from '../utils/countryCoordinates';\r\n \r\n-// Interface for coordinates\r\n-interface Coordinates {\r\n-  lat: number;\r\n-  lng: number;\r\n-}\r\n-\r\n // Props interface for the component\r\n interface CountrySidebarProps {\r\n   onSearch: (lat: number, lng: number, zoom: number, countryName?: string) => void;\r\n   showMaps?: boolean; // New prop to control whether to show maps section\r\n@@ -359,9 +353,8 @@\n                       onSearch(\r\n                         coords.lat + offset, \r\n                         coords.lng + offset, \r\n                         coords.zoom, \r\n-                        [], \r\n                         countryName\r\n                       );\r\n                     }, delay);\r\n                   });\r\n"
                },
                {
                    "date": 1760957852469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,54 +38,10 @@\n   const isLoggedIn = localStorage.getItem('mapit_logged_in') === 'true';\r\n   const [currentCoordinates, setCurrentCoordinates] = useState<{lat: number, lng: number} | null>(null);\r\n   const [isSaving, setIsSaving] = useState(false);\r\n \r\n-  // Initialize map on component mount\r\n-  useEffect(() => {\r\n-    // Show world view\r\n-    onSearch(20, 0, 2);\r\n-\r\n-    // Load saved maps when user is logged in\r\n-    if (isLoggedIn) {\r\n-      const savedMaps = localStorage.getItem('user_maps');\r\n-      if (savedMaps) {\r\n-        try {\r\n-          setMaps(JSON.parse(savedMaps));\r\n-        } catch (e) {\r\n-          console.error('Failed to parse saved maps', e);\r\n-        }\r\n-      }\r\n-    }\r\n-  }, [onSearch, isLoggedIn]);\r\n-\r\n-  // Handle country selection\r\n-  useEffect(() => {\r\n-    if (selectedCountry) {\r\n-      // Find corresponding coordinates\r\n-      const coordinates = COUNTRY_COORDINATES[selectedCountry];\r\n-      if (coordinates) {\r\n-        const { lat, lng } = coordinates;\r\n-        const zoom = 8; // Increased zoom level for deeper zoom into countries\r\n-        onSearch(lat, lng, zoom, selectedCountry);\r\n-        setLocation(selectedCountry); // Update input field\r\n-        setError('');\r\n-        \r\n-        // Load cities for the selected country\r\n-        const cities = getCitiesForCountry(selectedCountry);\r\n-        setCountryCities(cities);\r\n-      } else {\r\n-        setError(`Could not find coordinates for ${selectedCountry}`);\r\n-        // Show world view as fallback\r\n-        onSearch(20, 0, 2);\r\n-        setCountryCities([]);\r\n-      }\r\n-    } else {\r\n-      setCountryCities([]);\r\n-    }\r\n-  }, [selectedCountry, onSearch]);\r\n-\r\n   // Get cities for a selected country based on proximity\r\n-  const getCitiesForCountry = (countryName: string): Array<{name: string; lat: number; lng: number}> => {\r\n+  const getCitiesForCountry = React.useCallback((countryName: string): Array<{name: string; lat: number; lng: number}> => {\r\n     const countryCoords = COUNTRY_COORDINATES[countryName];\r\n     if (!countryCoords) return [];\r\n     \r\n     const cities: Array<{name: string; lat: number; lng: number; distance: number}> = [];\r\n"
                },
                {
                    "date": 1760957888739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,10 +82,54 @@\n     return cities\r\n       .sort((a, b) => a.distance - b.distance)\r\n       .slice(0, 15)\r\n       .map(({ name, lat, lng }) => ({ name, lat, lng }));\r\n-  };\r\n+  }, []);\r\n \r\n+  // Initialize map on component mount\r\n+  useEffect(() => {\r\n+    // Show world view\r\n+    onSearch(20, 0, 2);\r\n+\r\n+    // Load saved maps when user is logged in\r\n+    if (isLoggedIn) {\r\n+      const savedMaps = localStorage.getItem('user_maps');\r\n+      if (savedMaps) {\r\n+        try {\r\n+          setMaps(JSON.parse(savedMaps));\r\n+        } catch (e) {\r\n+          console.error('Failed to parse saved maps', e);\r\n+        }\r\n+      }\r\n+    }\r\n+  }, []); // Remove onSearch and isLoggedIn from dependencies\r\n+\r\n+  // Handle country selection\r\n+  useEffect(() => {\r\n+    if (selectedCountry) {\r\n+      // Find corresponding coordinates\r\n+      const coordinates = COUNTRY_COORDINATES[selectedCountry];\r\n+      if (coordinates) {\r\n+        const { lat, lng } = coordinates;\r\n+        const zoom = 8; // Increased zoom level for deeper zoom into countries\r\n+        onSearch(lat, lng, zoom, selectedCountry);\r\n+        setLocation(selectedCountry); // Update input field\r\n+        setError('');\r\n+        \r\n+        // Load cities for the selected country\r\n+        const cities = getCitiesForCountry(selectedCountry);\r\n+        setCountryCities(cities);\r\n+      } else {\r\n+        setError(`Could not find coordinates for ${selectedCountry}`);\r\n+        // Show world view as fallback\r\n+        onSearch(20, 0, 2);\r\n+        setCountryCities([]);\r\n+      }\r\n+    } else {\r\n+      setCountryCities([]);\r\n+    }\r\n+  }, [selectedCountry, getCitiesForCountry]); // Remove onSearch from dependencies\r\n+\r\n   // Handle search submit\r\n   const handleSearch = () => {\r\n     const countryName = location.trim();\r\n     if (countryName) {\r\n"
                },
                {
                    "date": 1760958109068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,10 @@\n           console.error('Failed to parse saved maps', e);\r\n         }\r\n       }\r\n     }\r\n-  }, []); // Remove onSearch and isLoggedIn from dependencies\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, []); // Intentionally empty - only run once on mount\r\n \r\n   // Handle country selection\r\n   useEffect(() => {\r\n     if (selectedCountry) {\r\n@@ -126,9 +127,10 @@\n       }\r\n     } else {\r\n       setCountryCities([]);\r\n     }\r\n-  }, [selectedCountry, getCitiesForCountry]); // Remove onSearch from dependencies\r\n+    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n+  }, [selectedCountry, getCitiesForCountry]); // onSearch intentionally excluded to prevent infinite loops\r\n \r\n   // Handle search submit\r\n   const handleSearch = () => {\r\n     const countryName = location.trim();\r\n"
                },
                {
                    "date": 1760958378517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n   const [selectedCountry, setSelectedCountry] = useState<string>('');\r\n   const [error, setError] = useState('');\r\n   const [countrySuggestions, setCountrySuggestions] = useState<string[]>([]);\r\n   const [countryCities, setCountryCities] = useState<Array<{name: string; lat: number; lng: number}>>([]);\r\n+  const [citySearchTerm, setCitySearchTerm] = useState('');\r\n   const [showMapForm, setShowMapForm] = useState(false);\r\n   const [mapTitle, setMapTitle] = useState('');\r\n   const [mapDescription, setMapDescription] = useState('');\r\n   const [maps, setMaps] = useState<Array<{ id: number; title: string; description: string; coordinates?: {lat: number, lng: number} }>>([]);\r\n"
                },
                {
                    "date": 1760958426663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import './MapFormStyles.css';\r\n import allCountries from '../assets/allCountries.json';\r\n import allCities from '../assets/allCities.json';\r\n import { COUNTRY_COORDINATES } from '../utils/countryCoordinates';\r\n+import { CITY_TO_COUNTRY } from '../utils/cityToCountry';\r\n \r\n // Props interface for the component\r\n interface CountrySidebarProps {\r\n   onSearch: (lat: number, lng: number, zoom: number, countryName?: string) => void;\r\n@@ -39,52 +40,25 @@\n   const isLoggedIn = localStorage.getItem('mapit_logged_in') === 'true';\r\n   const [currentCoordinates, setCurrentCoordinates] = useState<{lat: number, lng: number} | null>(null);\r\n   const [isSaving, setIsSaving] = useState(false);\r\n \r\n-  // Get cities for a selected country based on proximity\r\n+  // Get cities for a selected country based on country mapping\r\n   const getCitiesForCountry = React.useCallback((countryName: string): Array<{name: string; lat: number; lng: number}> => {\r\n-    const countryCoords = COUNTRY_COORDINATES[countryName];\r\n-    if (!countryCoords) return [];\r\n+    const cities: Array<{name: string; lat: number; lng: number}> = [];\r\n     \r\n-    const cities: Array<{name: string; lat: number; lng: number; distance: number}> = [];\r\n-    \r\n-    // Calculate distance between two coordinates\r\n-    const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {\r\n-      const R = 6371; // Earth's radius in km\r\n-      const dLat = (lat2 - lat1) * Math.PI / 180;\r\n-      const dLng = (lng2 - lng1) * Math.PI / 180;\r\n-      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n-                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n-                Math.sin(dLng/2) * Math.sin(dLng/2);\r\n-      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n-      return R * c;\r\n-    };\r\n-    \r\n-    // Find cities within reasonable distance from country center\r\n+    // Filter cities that belong to the selected country\r\n     Object.entries(allCities as Record<string, {lat: number; lng: number}>).forEach(([cityName, cityData]) => {\r\n-      const distance = calculateDistance(\r\n-        countryCoords.lat, \r\n-        countryCoords.lng, \r\n-        cityData.lat, \r\n-        cityData.lng\r\n-      );\r\n-      \r\n-      // Include cities within 500km of country center\r\n-      if (distance <= 500) {\r\n+      if (CITY_TO_COUNTRY[cityName] === countryName) {\r\n         cities.push({\r\n           name: cityName,\r\n           lat: cityData.lat,\r\n-          lng: cityData.lng,\r\n-          distance\r\n+          lng: cityData.lng\r\n         });\r\n       }\r\n     });\r\n     \r\n-    // Sort by distance and return top 15 cities\r\n-    return cities\r\n-      .sort((a, b) => a.distance - b.distance)\r\n-      .slice(0, 15)\r\n-      .map(({ name, lat, lng }) => ({ name, lat, lng }));\r\n+    // Sort cities alphabetically\r\n+    return cities.sort((a, b) => a.name.localeCompare(b.name));\r\n   }, []);\r\n \r\n   // Initialize map on component mount\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1760958439128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,24 +85,26 @@\n       // Find corresponding coordinates\r\n       const coordinates = COUNTRY_COORDINATES[selectedCountry];\r\n       if (coordinates) {\r\n         const { lat, lng } = coordinates;\r\n-        const zoom = 8; // Increased zoom level for deeper zoom into countries\r\n+        const zoom = 10; // Increased zoom level for much deeper zoom into countries\r\n         onSearch(lat, lng, zoom, selectedCountry);\r\n         setLocation(selectedCountry); // Update input field\r\n         setError('');\r\n         \r\n         // Load cities for the selected country\r\n         const cities = getCitiesForCountry(selectedCountry);\r\n         setCountryCities(cities);\r\n+        setCitySearchTerm(''); // Reset city search when country changes\r\n       } else {\r\n         setError(`Could not find coordinates for ${selectedCountry}`);\r\n         // Show world view as fallback\r\n         onSearch(20, 0, 2);\r\n         setCountryCities([]);\r\n       }\r\n     } else {\r\n       setCountryCities([]);\r\n+      setCitySearchTerm('');\r\n     }\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [selectedCountry, getCitiesForCountry]); // onSearch intentionally excluded to prevent infinite loops\r\n \r\n"
                },
                {
                    "date": 1760958449179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n       // Find country coordinates\r\n       const coordinates = COUNTRY_COORDINATES[countryName];\r\n       if (coordinates) {\r\n         const { lat, lng } = coordinates;\r\n-        const zoom = 8; // Increased zoom level for deeper zoom into countries\r\n+        const zoom = 10; // Increased zoom level for much deeper zoom into countries\r\n         onSearch(lat, lng, zoom, countryName);\r\n         setSelectedCountry(countryName);\r\n         setError('');\r\n       } else {\r\n"
                },
                {
                    "date": 1760958499918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,8 +388,9 @@\n                 setLocation('');\r\n                 setSelectedCountry('');\r\n                 setCountrySuggestions([]);\r\n                 setCountryCities([]);\r\n+                setCitySearchTerm('');\r\n                 // Focus back on the input after clearing\r\n                 const searchInput = document.querySelector('.sidebar-input') as HTMLInputElement;\r\n                 if (searchInput) searchInput.focus();\r\n               }}\r\n@@ -435,23 +436,80 @@\n               <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                 <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path>\r\n                 <circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\r\n               </svg>\r\n-              Cities in {selectedCountry}\r\n+              Cities in {selectedCountry} ({countryCities.length})\r\n             </div>\r\n+            \r\n+            {/* City search input */}\r\n+            {countryCities.length > 3 && (\r\n+              <div style={{ marginBottom: '10px', position: 'relative' }}>\r\n+                <input\r\n+                  type=\"text\"\r\n+                  placeholder=\"Search cities...\"\r\n+                  value={citySearchTerm}\r\n+                  onChange={(e) => setCitySearchTerm(e.target.value)}\r\n+                  style={{\r\n+                    width: '100%',\r\n+                    padding: '8px 32px 8px 10px',\r\n+                    border: '1px solid #cbd5e1',\r\n+                    borderRadius: '6px',\r\n+                    fontSize: '13px',\r\n+                    outline: 'none',\r\n+                    backgroundColor: 'white'\r\n+                  }}\r\n+                  onFocus={(e) => {\r\n+                    e.currentTarget.style.borderColor = '#4f8cff';\r\n+                    e.currentTarget.style.boxShadow = '0 0 0 2px rgba(79, 140, 255, 0.1)';\r\n+                  }}\r\n+                  onBlur={(e) => {\r\n+                    e.currentTarget.style.borderColor = '#cbd5e1';\r\n+                    e.currentTarget.style.boxShadow = 'none';\r\n+                  }}\r\n+                />\r\n+                {citySearchTerm && (\r\n+                  <button\r\n+                    onClick={() => setCitySearchTerm('')}\r\n+                    style={{\r\n+                      position: 'absolute',\r\n+                      right: '8px',\r\n+                      top: '50%',\r\n+                      transform: 'translateY(-50%)',\r\n+                      background: 'transparent',\r\n+                      border: 'none',\r\n+                      cursor: 'pointer',\r\n+                      padding: '4px',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      opacity: 0.5\r\n+                    }}\r\n+                    onMouseEnter={(e) => { e.currentTarget.style.opacity = '1'; }}\r\n+                    onMouseLeave={(e) => { e.currentTarget.style.opacity = '0.5'; }}\r\n+                  >\r\n+                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n+                      <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n+                      <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n+                    </svg>\r\n+                  </button>\r\n+                )}\r\n+              </div>\r\n+            )}\r\n+            \r\n             <div style={{\r\n               display: 'flex',\r\n               flexDirection: 'column',\r\n               gap: '6px',\r\n               maxHeight: '300px',\r\n               overflowY: 'auto'\r\n             }}>\r\n-              {countryCities.map((city) => (\r\n+              {countryCities\r\n+                .filter(city => city.name.toLowerCase().includes(citySearchTerm.toLowerCase()))\r\n+                .map((city) => (\r\n                 <button\r\n                   key={city.name}\r\n                   onClick={() => {\r\n                     // Zoom to city with high zoom level\r\n-                    onSearch(city.lat, city.lng, 12, selectedCountry);\r\n+                    onSearch(city.lat, city.lng, 13, selectedCountry);\r\n                   }}\r\n                   style={{\r\n                     padding: '10px 12px',\r\n                     backgroundColor: 'white',\r\n@@ -485,8 +543,20 @@\n                     <path d=\"M8 11h6\"></path>\r\n                   </svg>\r\n                 </button>\r\n               ))}\r\n+              \r\n+              {/* No results message */}\r\n+              {countryCities.filter(city => city.name.toLowerCase().includes(citySearchTerm.toLowerCase())).length === 0 && (\r\n+                <div style={{\r\n+                  padding: '20px',\r\n+                  textAlign: 'center',\r\n+                  color: '#64748b',\r\n+                  fontSize: '13px'\r\n+                }}>\r\n+                  No cities found matching \"{citySearchTerm}\"\r\n+                </div>\r\n+              )}\r\n             </div>\r\n           </div>\r\n         )}\r\n         \r\n"
                },
                {
                    "date": 1760958730473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n   const [error, setError] = useState('');\r\n   const [countrySuggestions, setCountrySuggestions] = useState<string[]>([]);\r\n   const [countryCities, setCountryCities] = useState<Array<{name: string; lat: number; lng: number}>>([]);\r\n   const [citySearchTerm, setCitySearchTerm] = useState('');\r\n+  const [isLoadingCities, setIsLoadingCities] = useState(false);\r\n   const [showMapForm, setShowMapForm] = useState(false);\r\n   const [mapTitle, setMapTitle] = useState('');\r\n   const [mapDescription, setMapDescription] = useState('');\r\n   const [maps, setMaps] = useState<Array<{ id: number; title: string; description: string; coordinates?: {lat: number, lng: number} }>>([]);\r\n@@ -40,25 +41,120 @@\n   const isLoggedIn = localStorage.getItem('mapit_logged_in') === 'true';\r\n   const [currentCoordinates, setCurrentCoordinates] = useState<{lat: number, lng: number} | null>(null);\r\n   const [isSaving, setIsSaving] = useState(false);\r\n \r\n-  // Get cities for a selected country based on country mapping\r\n-  const getCitiesForCountry = React.useCallback((countryName: string): Array<{name: string; lat: number; lng: number}> => {\r\n-    const cities: Array<{name: string; lat: number; lng: number}> = [];\r\n+  // Get cities for a selected country - try local data first, then fetch from map API\r\n+  const getCitiesForCountry = React.useCallback(async (countryName: string): Promise<Array<{name: string; lat: number; lng: number}>> => {\r\n+    // First, check if we have manually mapped cities\r\n+    const localCities: Array<{name: string; lat: number; lng: number}> = [];\r\n     \r\n-    // Filter cities that belong to the selected country\r\n     Object.entries(allCities as Record<string, {lat: number; lng: number}>).forEach(([cityName, cityData]) => {\r\n       if (CITY_TO_COUNTRY[cityName] === countryName) {\r\n-        cities.push({\r\n+        localCities.push({\r\n           name: cityName,\r\n           lat: cityData.lat,\r\n           lng: cityData.lng\r\n         });\r\n       }\r\n     });\r\n     \r\n-    // Sort cities alphabetically\r\n-    return cities.sort((a, b) => a.name.localeCompare(b.name));\r\n+    // If we have local cities, use them\r\n+    if (localCities.length > 0) {\r\n+      return localCities.sort((a, b) => a.name.localeCompare(b.name));\r\n+    }\r\n+    \r\n+    // Otherwise, fetch cities from Nominatim (OpenStreetMap) API\r\n+    try {\r\n+      setIsLoadingCities(true);\r\n+      \r\n+      // Use Nominatim API to search for cities in the country\r\n+      const response = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?` +\r\n+        `country=${encodeURIComponent(countryName)}` +\r\n+        `&featuretype=city` +\r\n+        `&format=json` +\r\n+        `&limit=20` +\r\n+        `&addressdetails=1`,\r\n+        {\r\n+          headers: {\r\n+            'User-Agent': 'MapIt-App/1.0' // Required by Nominatim\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      if (!response.ok) {\r\n+        throw new Error('Failed to fetch cities');\r\n+      }\r\n+      \r\n+      const data = await response.json();\r\n+      \r\n+      // Parse the response and extract cities\r\n+      const fetchedCities: Array<{name: string; lat: number; lng: number}> = [];\r\n+      const seenCities = new Set<string>();\r\n+      \r\n+      data.forEach((item: any) => {\r\n+        const cityName = item.address?.city || \r\n+                        item.address?.town || \r\n+                        item.address?.village || \r\n+                        item.name;\r\n+        \r\n+        if (cityName && !seenCities.has(cityName)) {\r\n+          seenCities.add(cityName);\r\n+          fetchedCities.push({\r\n+            name: cityName,\r\n+            lat: parseFloat(item.lat),\r\n+            lng: parseFloat(item.lon)\r\n+          });\r\n+        }\r\n+      });\r\n+      \r\n+      setIsLoadingCities(false);\r\n+      return fetchedCities.sort((a, b) => a.name.localeCompare(b.name));\r\n+      \r\n+    } catch (error) {\r\n+      console.error('Error fetching cities from Nominatim:', error);\r\n+      setIsLoadingCities(false);\r\n+      \r\n+      // Fallback: return cities from allCities.json based on proximity\r\n+      const countryCoords = COUNTRY_COORDINATES[countryName];\r\n+      if (!countryCoords) return [];\r\n+      \r\n+      const nearbyCities: Array<{name: string; lat: number; lng: number; distance: number}> = [];\r\n+      \r\n+      const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {\r\n+        const R = 6371;\r\n+        const dLat = (lat2 - lat1) * Math.PI / 180;\r\n+        const dLng = (lng2 - lng1) * Math.PI / 180;\r\n+        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n+                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n+                  Math.sin(dLng/2) * Math.sin(dLng/2);\r\n+        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n+        return R * c;\r\n+      };\r\n+      \r\n+      Object.entries(allCities as Record<string, {lat: number; lng: number}>).forEach(([cityName, cityData]) => {\r\n+        const distance = calculateDistance(\r\n+          countryCoords.lat, \r\n+          countryCoords.lng, \r\n+          cityData.lat, \r\n+          cityData.lng\r\n+        );\r\n+        \r\n+        if (distance <= 300) { // 300km radius as fallback\r\n+          nearbyCities.push({\r\n+            name: cityName,\r\n+            lat: cityData.lat,\r\n+            lng: cityData.lng,\r\n+            distance\r\n+          });\r\n+        }\r\n+      });\r\n+      \r\n+      return nearbyCities\r\n+        .sort((a, b) => a.distance - b.distance)\r\n+        .slice(0, 10)\r\n+        .map(({ name, lat, lng }) => ({ name, lat, lng }));\r\n+    }\r\n   }, []);\r\n \r\n   // Initialize map on component mount\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1760958743050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,32 +176,36 @@\n   }, []); // Intentionally empty - only run once on mount\r\n \r\n   // Handle country selection\r\n   useEffect(() => {\r\n-    if (selectedCountry) {\r\n-      // Find corresponding coordinates\r\n-      const coordinates = COUNTRY_COORDINATES[selectedCountry];\r\n-      if (coordinates) {\r\n-        const { lat, lng } = coordinates;\r\n-        const zoom = 10; // Increased zoom level for much deeper zoom into countries\r\n-        onSearch(lat, lng, zoom, selectedCountry);\r\n-        setLocation(selectedCountry); // Update input field\r\n-        setError('');\r\n-        \r\n-        // Load cities for the selected country\r\n-        const cities = getCitiesForCountry(selectedCountry);\r\n-        setCountryCities(cities);\r\n-        setCitySearchTerm(''); // Reset city search when country changes\r\n+    const loadCitiesForCountry = async () => {\r\n+      if (selectedCountry) {\r\n+        // Find corresponding coordinates\r\n+        const coordinates = COUNTRY_COORDINATES[selectedCountry];\r\n+        if (coordinates) {\r\n+          const { lat, lng } = coordinates;\r\n+          const zoom = 10; // Increased zoom level for much deeper zoom into countries\r\n+          onSearch(lat, lng, zoom, selectedCountry);\r\n+          setLocation(selectedCountry); // Update input field\r\n+          setError('');\r\n+          \r\n+          // Load cities for the selected country (async)\r\n+          const cities = await getCitiesForCountry(selectedCountry);\r\n+          setCountryCities(cities);\r\n+          setCitySearchTerm(''); // Reset city search when country changes\r\n+        } else {\r\n+          setError(`Could not find coordinates for ${selectedCountry}`);\r\n+          // Show world view as fallback\r\n+          onSearch(20, 0, 2);\r\n+          setCountryCities([]);\r\n+        }\r\n       } else {\r\n-        setError(`Could not find coordinates for ${selectedCountry}`);\r\n-        // Show world view as fallback\r\n-        onSearch(20, 0, 2);\r\n         setCountryCities([]);\r\n+        setCitySearchTerm('');\r\n       }\r\n-    } else {\r\n-      setCountryCities([]);\r\n-      setCitySearchTerm('');\r\n-    }\r\n+    };\r\n+    \r\n+    loadCitiesForCountry();\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n   }, [selectedCountry, getCitiesForCountry]); // onSearch intentionally excluded to prevent infinite loops\r\n \r\n   // Handle search submit\r\n"
                },
                {
                    "date": 1760958836690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,8 +90,9 @@\n       // Parse the response and extract cities\r\n       const fetchedCities: Array<{name: string; lat: number; lng: number}> = [];\r\n       const seenCities = new Set<string>();\r\n       \r\n+      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n       data.forEach((item: any) => {\r\n         const cityName = item.address?.city || \r\n                         item.address?.town || \r\n                         item.address?.village || \r\n@@ -515,9 +516,9 @@\n           </div>\r\n         )}\r\n         \r\n         {/* Display cities for selected country */}\r\n-        {selectedCountry && countryCities.length > 0 && (\r\n+        {selectedCountry && (\r\n           <div style={{\r\n             marginTop: '16px',\r\n             padding: '12px',\r\n             backgroundColor: '#f8fafc',\r\n@@ -536,13 +537,43 @@\n               <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                 <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path>\r\n                 <circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\r\n               </svg>\r\n-              Cities in {selectedCountry} ({countryCities.length})\r\n+              Cities in {selectedCountry} {countryCities.length > 0 && `(${countryCities.length})`}\r\n             </div>\r\n             \r\n+            {/* Loading indicator */}\r\n+            {isLoadingCities && (\r\n+              <div style={{\r\n+                padding: '20px',\r\n+                textAlign: 'center',\r\n+                color: '#64748b',\r\n+                fontSize: '13px',\r\n+                display: 'flex',\r\n+                flexDirection: 'column',\r\n+                alignItems: 'center',\r\n+                gap: '10px'\r\n+              }}>\r\n+                <div style={{\r\n+                  width: '24px',\r\n+                  height: '24px',\r\n+                  border: '3px solid #e2e8f0',\r\n+                  borderTop: '3px solid #4f8cff',\r\n+                  borderRadius: '50%',\r\n+                  animation: 'spin 1s linear infinite'\r\n+                }}></div>\r\n+                <style>{`\r\n+                  @keyframes spin {\r\n+                    0% { transform: rotate(0deg); }\r\n+                    100% { transform: rotate(360deg); }\r\n+                  }\r\n+                `}</style>\r\n+                Loading cities...\r\n+              </div>\r\n+            )}\r\n+            \r\n             {/* City search input */}\r\n-            {countryCities.length > 3 && (\r\n+            {!isLoadingCities && countryCities.length > 3 && (\r\n               <div style={{ marginBottom: '10px', position: 'relative' }}>\r\n                 <input\r\n                   type=\"text\"\r\n                   placeholder=\"Search cities...\"\r\n@@ -600,9 +631,9 @@\n               gap: '6px',\r\n               maxHeight: '300px',\r\n               overflowY: 'auto'\r\n             }}>\r\n-              {countryCities\r\n+              {!isLoadingCities && countryCities\r\n                 .filter(city => city.name.toLowerCase().includes(citySearchTerm.toLowerCase()))\r\n                 .map((city) => (\r\n                 <button\r\n                   key={city.name}\r\n"
                },
                {
                    "date": 1760958992834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,53 +65,98 @@\n     // Otherwise, fetch cities from Nominatim (OpenStreetMap) API\r\n     try {\r\n       setIsLoadingCities(true);\r\n       \r\n-      // Use Nominatim API to search for cities in the country\r\n-      const response = await fetch(\r\n-        `https://nominatim.openstreetmap.org/search?` +\r\n-        `country=${encodeURIComponent(countryName)}` +\r\n-        `&featuretype=city` +\r\n-        `&format=json` +\r\n-        `&limit=20` +\r\n-        `&addressdetails=1`,\r\n-        {\r\n-          headers: {\r\n-            'User-Agent': 'MapIt-App/1.0' // Required by Nominatim\r\n+      // Use multiple queries to get comprehensive city data\r\n+      const queries = [\r\n+        // Query 1: Search for cities\r\n+        fetch(\r\n+          `https://nominatim.openstreetmap.org/search?` +\r\n+          `country=${encodeURIComponent(countryName)}` +\r\n+          `&featuretype=city` +\r\n+          `&format=json` +\r\n+          `&limit=50` +\r\n+          `&addressdetails=1`,\r\n+          {\r\n+            headers: {\r\n+              'User-Agent': 'MapIt-App/1.0'\r\n+            }\r\n           }\r\n-        }\r\n-      );\r\n+        ),\r\n+        // Query 2: Search for administrative centers (capital cities, state capitals)\r\n+        fetch(\r\n+          `https://nominatim.openstreetmap.org/search?` +\r\n+          `country=${encodeURIComponent(countryName)}` +\r\n+          `&city=` +\r\n+          `&format=json` +\r\n+          `&limit=50` +\r\n+          `&addressdetails=1`,\r\n+          {\r\n+            headers: {\r\n+              'User-Agent': 'MapIt-App/1.0'\r\n+            }\r\n+          }\r\n+        )\r\n+      ];\r\n       \r\n-      if (!response.ok) {\r\n-        throw new Error('Failed to fetch cities');\r\n-      }\r\n+      const responses = await Promise.all(queries);\r\n+      const allData = await Promise.all(responses.map(r => r.json()));\r\n       \r\n-      const data = await response.json();\r\n-      \r\n-      // Parse the response and extract cities\r\n+      // Combine and parse all responses\r\n       const fetchedCities: Array<{name: string; lat: number; lng: number}> = [];\r\n       const seenCities = new Set<string>();\r\n       \r\n-      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n-      data.forEach((item: any) => {\r\n-        const cityName = item.address?.city || \r\n-                        item.address?.town || \r\n-                        item.address?.village || \r\n-                        item.name;\r\n-        \r\n-        if (cityName && !seenCities.has(cityName)) {\r\n-          seenCities.add(cityName);\r\n-          fetchedCities.push({\r\n-            name: cityName,\r\n-            lat: parseFloat(item.lat),\r\n-            lng: parseFloat(item.lon)\r\n-          });\r\n-        }\r\n+      allData.forEach(data => {\r\n+        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n+        data.forEach((item: any) => {\r\n+          // Try multiple fields to extract city name\r\n+          const cityName = item.address?.city || \r\n+                          item.address?.town || \r\n+                          item.address?.village ||\r\n+                          item.address?.municipality ||\r\n+                          item.address?.county ||\r\n+                          item.display_name?.split(',')[0] ||\r\n+                          item.name;\r\n+          \r\n+          if (cityName && !seenCities.has(cityName)) {\r\n+            // Filter out countries, regions, and non-city entities\r\n+            const type = item.type || '';\r\n+            const classType = item.class || '';\r\n+            \r\n+            // Only include if it's likely a city/town\r\n+            if (\r\n+              type === 'city' || \r\n+              type === 'town' || \r\n+              type === 'village' ||\r\n+              type === 'administrative' ||\r\n+              classType === 'place' ||\r\n+              item.address?.city ||\r\n+              item.address?.town\r\n+            ) {\r\n+              seenCities.add(cityName);\r\n+              fetchedCities.push({\r\n+                name: cityName,\r\n+                lat: parseFloat(item.lat),\r\n+                lng: parseFloat(item.lon)\r\n+              });\r\n+            }\r\n+          }\r\n+        });\r\n       });\r\n       \r\n       setIsLoadingCities(false);\r\n-      return fetchedCities.sort((a, b) => a.name.localeCompare(b.name));\r\n       \r\n+      // If we found cities, return them sorted\r\n+      if (fetchedCities.length > 0) {\r\n+        return fetchedCities\r\n+          .sort((a, b) => a.name.localeCompare(b.name))\r\n+          .slice(0, 30); // Limit to top 30 cities\r\n+      }\r\n+      \r\n+      // If no cities found, try overpass API as alternative\r\n+      console.log('No cities found via Nominatim, trying alternative method...');\r\n+      return await fetchCitiesViaOverpass(countryName);\r\n+      \r\n     } catch (error) {\r\n       console.error('Error fetching cities from Nominatim:', error);\r\n       setIsLoadingCities(false);\r\n       \r\n"
                },
                {
                    "date": 1760959043423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,113 @@\n   const isLoggedIn = localStorage.getItem('mapit_logged_in') === 'true';\r\n   const [currentCoordinates, setCurrentCoordinates] = useState<{lat: number, lng: number} | null>(null);\r\n   const [isSaving, setIsSaving] = useState(false);\r\n \r\n+  // Alternative method: Fetch cities using Overpass API (more comprehensive)\r\n+  const fetchCitiesViaOverpass = React.useCallback(async (countryName: string): Promise<Array<{name: string; lat: number; lng: number}>> => {\r\n+    try {\r\n+      // Get country ISO code for Overpass query\r\n+      const countryISOCodes: Record<string, string> = {\r\n+        'United States': 'US',\r\n+        'United Kingdom': 'GB',\r\n+        'France': 'FR',\r\n+        'Germany': 'DE',\r\n+        'Italy': 'IT',\r\n+        'Spain': 'ES',\r\n+        'Canada': 'CA',\r\n+        'Brazil': 'BR',\r\n+        'India': 'IN',\r\n+        'China': 'CN',\r\n+        'Japan': 'JP',\r\n+        'Australia': 'AU',\r\n+        'Lebanon': 'LB',\r\n+        'Syria': 'SY',\r\n+        'Egypt': 'EG',\r\n+        'United Arab Emirates': 'AE',\r\n+        'Saudi Arabia': 'SA',\r\n+        'Turkey': 'TR',\r\n+        'Russia': 'RU',\r\n+        'Mexico': 'MX',\r\n+        'Argentina': 'AR',\r\n+        'South Africa': 'ZA',\r\n+        'Nigeria': 'NG',\r\n+        'Kenya': 'KE',\r\n+        'Morocco': 'MA',\r\n+        'Algeria': 'DZ',\r\n+        'Indonesia': 'ID',\r\n+        'Thailand': 'TH',\r\n+        'Vietnam': 'VN',\r\n+        'Philippines': 'PH',\r\n+        'Malaysia': 'MY',\r\n+        'Singapore': 'SG',\r\n+        'Pakistan': 'PK',\r\n+        'Bangladesh': 'BD',\r\n+        'Netherlands': 'NL',\r\n+        'Belgium': 'BE',\r\n+        'Sweden': 'SE',\r\n+        'Norway': 'NO',\r\n+        'Denmark': 'DK',\r\n+        'Finland': 'FI',\r\n+        'Poland': 'PL',\r\n+        'Greece': 'GR',\r\n+        'Portugal': 'PT',\r\n+        'Switzerland': 'CH',\r\n+        'Austria': 'AT',\r\n+        'Ireland': 'IE',\r\n+        'New Zealand': 'NZ',\r\n+        'Chile': 'CL',\r\n+        'Colombia': 'CO',\r\n+        'Peru': 'PE',\r\n+        'Venezuela': 'VE',\r\n+        // Add more as needed\r\n+      };\r\n+      \r\n+      const isoCode = countryISOCodes[countryName];\r\n+      if (!isoCode) {\r\n+        throw new Error('Country ISO code not found');\r\n+      }\r\n+      \r\n+      // Query Overpass API for cities and towns\r\n+      const query = `\r\n+        [out:json][timeout:25];\r\n+        area[\"ISO3166-1\"=\"${isoCode}\"][admin_level=2];\r\n+        (\r\n+          node[\"place\"=\"city\"](area);\r\n+          node[\"place\"=\"town\"](area);\r\n+        );\r\n+        out body 50;\r\n+      `;\r\n+      \r\n+      const response = await fetch('https://overpass-api.de/api/interpreter', {\r\n+        method: 'POST',\r\n+        body: query\r\n+      });\r\n+      \r\n+      if (!response.ok) {\r\n+        throw new Error('Overpass API failed');\r\n+      }\r\n+      \r\n+      const data = await response.json();\r\n+      const cities: Array<{name: string; lat: number; lng: number}> = [];\r\n+      \r\n+      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n+      data.elements?.forEach((element: any) => {\r\n+        if (element.tags?.name) {\r\n+          cities.push({\r\n+            name: element.tags.name,\r\n+            lat: element.lat,\r\n+            lng: element.lon\r\n+          });\r\n+        }\r\n+      });\r\n+      \r\n+      return cities.sort((a, b) => a.name.localeCompare(b.name)).slice(0, 40);\r\n+    } catch (error) {\r\n+      console.error('Overpass API failed:', error);\r\n+      return [];\r\n+    }\r\n+  }, []);\r\n+\r\n   // Get cities for a selected country - try local data first, then fetch from map API\r\n   const getCitiesForCountry = React.useCallback(async (countryName: string): Promise<Array<{name: string; lat: number; lng: number}>> => {\r\n     // First, check if we have manually mapped cities\r\n     const localCities: Array<{name: string; lat: number; lng: number}> = [];\r\n"
                },
                {
                    "date": 1760959098955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,9 +304,9 @@\n         .sort((a, b) => a.distance - b.distance)\r\n         .slice(0, 10)\r\n         .map(({ name, lat, lng }) => ({ name, lat, lng }));\r\n     }\r\n-  }, []);\r\n+  }, [fetchCitiesViaOverpass]);\r\n \r\n   // Initialize map on component mount\r\n   useEffect(() => {\r\n     // Show world view\r\n"
                },
                {
                    "date": 1760959395803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,11 @@\n   }, []);\r\n \r\n   // Get cities for a selected country - try local data first, then fetch from map API\r\n   const getCitiesForCountry = React.useCallback(async (countryName: string): Promise<Array<{name: string; lat: number; lng: number}>> => {\r\n-    // First, check if we have manually mapped cities\r\n+    console.log(`🔍 Fetching cities for: ${countryName}`);\r\n+    \r\n+    // First, check if we have manually mapped cities for special cases (Lebanon, Syria, UAE)\r\n     const localCities: Array<{name: string; lat: number; lng: number}> = [];\r\n     \r\n     Object.entries(allCities as Record<string, {lat: number; lng: number}>).forEach(([cityName, cityData]) => {\r\n       if (CITY_TO_COUNTRY[cityName] === countryName) {\r\n@@ -161,14 +163,17 @@\n         });\r\n       }\r\n     });\r\n     \r\n-    // If we have local cities, use them\r\n-    if (localCities.length > 0) {\r\n+    // Only use local cities if we have 5+ (comprehensive coverage)\r\n+    // Countries like Lebanon (5 cities), Syria (10 cities), UAE (8 cities)\r\n+    if (localCities.length >= 5) {\r\n+      console.log(`✅ Using ${localCities.length} local cities for ${countryName}`);\r\n       return localCities.sort((a, b) => a.name.localeCompare(b.name));\r\n     }\r\n     \r\n-    // Otherwise, fetch cities from Nominatim (OpenStreetMap) API\r\n+    // Otherwise, fetch cities from APIs (Nominatim + Overpass)\r\n+    console.log(`🌐 Fetching cities from APIs for ${countryName}...`);\r\n     try {\r\n       setIsLoadingCities(true);\r\n       \r\n       // Use multiple queries to get comprehensive city data\r\n"
                },
                {
                    "date": 1760959712874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n       return localCities.sort((a, b) => a.name.localeCompare(b.name));\r\n     }\r\n     \r\n     // Otherwise, fetch cities from APIs (Nominatim + Overpass)\r\n-    console.log(`🌐 Fetching cities from APIs for ${countryName}...`);\r\n+    console.log(`🌐 Fetching cities from APIs for ${countryName}... (found ${localCities.length} local cities, need API fetch)`);\r\n     try {\r\n       setIsLoadingCities(true);\r\n       \r\n       // Use multiple queries to get comprehensive city data\r\n"
                },
                {
                    "date": 1760959948361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import allCountries from '../assets/allCountries.json';\r\n import allCities from '../assets/allCities.json';\r\n import { COUNTRY_COORDINATES } from '../utils/countryCoordinates';\r\n import { CITY_TO_COUNTRY } from '../utils/cityToCountry';\r\n+import { MAJOR_CITIES_BY_COUNTRY } from '../data/majorCitiesByCountry';\r\n \r\n // Props interface for the component\r\n interface CountrySidebarProps {\r\n   onSearch: (lat: number, lng: number, zoom: number, countryName?: string) => void;\r\n"
                },
                {
                    "date": 1760959984625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,13 +147,20 @@\n       return [];\r\n     }\r\n   }, []);\r\n \r\n-  // Get cities for a selected country - try local data first, then fetch from map API\r\n+  // Get cities for a selected country - try comprehensive database first, then APIs\r\n   const getCitiesForCountry = React.useCallback(async (countryName: string): Promise<Array<{name: string; lat: number; lng: number}>> => {\r\n     console.log(`🔍 Fetching cities for: ${countryName}`);\r\n     \r\n-    // First, check if we have manually mapped cities for special cases (Lebanon, Syria, UAE)\r\n+    // FIRST: Check our comprehensive major cities database\r\n+    if (MAJOR_CITIES_BY_COUNTRY[countryName]) {\r\n+      const majorCities = MAJOR_CITIES_BY_COUNTRY[countryName];\r\n+      console.log(`✅ Found ${majorCities.length} major cities for ${countryName} in database`);\r\n+      return majorCities.sort((a, b) => a.name.localeCompare(b.name));\r\n+    }\r\n+    \r\n+    // SECOND: Check if we have manually mapped cities for special cases\r\n     const localCities: Array<{name: string; lat: number; lng: number}> = [];\r\n     \r\n     Object.entries(allCities as Record<string, {lat: number; lng: number}>).forEach(([cityName, cityData]) => {\r\n       if (CITY_TO_COUNTRY[cityName] === countryName) {\r\n@@ -165,15 +172,14 @@\n       }\r\n     });\r\n     \r\n     // Only use local cities if we have 5+ (comprehensive coverage)\r\n-    // Countries like Lebanon (5 cities), Syria (10 cities), UAE (8 cities)\r\n     if (localCities.length >= 5) {\r\n       console.log(`✅ Using ${localCities.length} local cities for ${countryName}`);\r\n       return localCities.sort((a, b) => a.name.localeCompare(b.name));\r\n     }\r\n     \r\n-    // Otherwise, fetch cities from APIs (Nominatim + Overpass)\r\n+    // THIRD: Fetch cities from APIs (Nominatim + Overpass)\r\n     console.log(`🌐 Fetching cities from APIs for ${countryName}... (found ${localCities.length} local cities, need API fetch)`);\r\n     try {\r\n       setIsLoadingCities(true);\r\n       \r\n"
                },
                {
                    "date": 1760960158366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,47 +276,11 @@\n     } catch (error) {\r\n       console.error('Error fetching cities from Nominatim:', error);\r\n       setIsLoadingCities(false);\r\n       \r\n-      // Fallback: return cities from allCities.json based on proximity\r\n-      const countryCoords = COUNTRY_COORDINATES[countryName];\r\n-      if (!countryCoords) return [];\r\n-      \r\n-      const nearbyCities: Array<{name: string; lat: number; lng: number; distance: number}> = [];\r\n-      \r\n-      const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {\r\n-        const R = 6371;\r\n-        const dLat = (lat2 - lat1) * Math.PI / 180;\r\n-        const dLng = (lng2 - lng1) * Math.PI / 180;\r\n-        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n-                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n-                  Math.sin(dLng/2) * Math.sin(dLng/2);\r\n-        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n-        return R * c;\r\n-      };\r\n-      \r\n-      Object.entries(allCities as Record<string, {lat: number; lng: number}>).forEach(([cityName, cityData]) => {\r\n-        const distance = calculateDistance(\r\n-          countryCoords.lat, \r\n-          countryCoords.lng, \r\n-          cityData.lat, \r\n-          cityData.lng\r\n-        );\r\n-        \r\n-        if (distance <= 300) { // 300km radius as fallback\r\n-          nearbyCities.push({\r\n-            name: cityName,\r\n-            lat: cityData.lat,\r\n-            lng: cityData.lng,\r\n-            distance\r\n-          });\r\n-        }\r\n-      });\r\n-      \r\n-      return nearbyCities\r\n-        .sort((a, b) => a.distance - b.distance)\r\n-        .slice(0, 10)\r\n-        .map(({ name, lat, lng }) => ({ name, lat, lng }));\r\n+      // No fallback proximity search - return empty to avoid showing cities from neighboring countries\r\n+      console.log(`⚠️ Could not fetch cities for ${countryName}. No fallback used to prevent showing wrong cities.`);\r\n+      return [];\r\n     }\r\n   }, [fetchCitiesViaOverpass]);\r\n \r\n   // Initialize map on component mount\r\n"
                },
                {
                    "date": 1760960310058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n     \r\n     // FIRST: Check our comprehensive major cities database\r\n     if (MAJOR_CITIES_BY_COUNTRY[countryName]) {\r\n       const majorCities = MAJOR_CITIES_BY_COUNTRY[countryName];\r\n-      console.log(`✅ Found ${majorCities.length} major cities for ${countryName} in database`);\r\n+      console.log(`✅ Found ${majorCities.length} major cities for ${countryName} in database:`, majorCities.map(c => c.name).join(', '));\r\n       return majorCities.sort((a, b) => a.name.localeCompare(b.name));\r\n     }\r\n     \r\n     // SECOND: Check if we have manually mapped cities for special cases\r\n@@ -173,9 +173,9 @@\n     });\r\n     \r\n     // Only use local cities if we have 5+ (comprehensive coverage)\r\n     if (localCities.length >= 5) {\r\n-      console.log(`✅ Using ${localCities.length} local cities for ${countryName}`);\r\n+      console.log(`✅ Using ${localCities.length} local cities for ${countryName}:`, localCities.map(c => c.name).join(', '));\r\n       return localCities.sort((a, b) => a.name.localeCompare(b.name));\r\n     }\r\n     \r\n     // THIRD: Fetch cities from APIs (Nominatim + Overpass)\r\n"
                },
                {
                    "date": 1760960343507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,16 +263,23 @@\n       setIsLoadingCities(false);\r\n       \r\n       // If we found cities, return them sorted\r\n       if (fetchedCities.length > 0) {\r\n+        console.log(`✅ API returned ${fetchedCities.length} cities for ${countryName}:`, fetchedCities.slice(0, 10).map(c => c.name).join(', '), '...');\r\n         return fetchedCities\r\n           .sort((a, b) => a.name.localeCompare(b.name))\r\n           .slice(0, 30); // Limit to top 30 cities\r\n       }\r\n       \r\n       // If no cities found, try overpass API as alternative\r\n-      console.log('No cities found via Nominatim, trying alternative method...');\r\n-      return await fetchCitiesViaOverpass(countryName);\r\n+      console.log('No cities found via Nominatim, trying Overpass API...');\r\n+      const overpassCities = await fetchCitiesViaOverpass(countryName);\r\n+      if (overpassCities.length > 0) {\r\n+        console.log(`✅ Overpass API returned ${overpassCities.length} cities for ${countryName}:`, overpassCities.slice(0, 10).map(c => c.name).join(', '), '...');\r\n+      } else {\r\n+        console.log(`⚠️ No cities found for ${countryName} from any source`);\r\n+      }\r\n+      return overpassCities;\r\n       \r\n     } catch (error) {\r\n       console.error('Error fetching cities from Nominatim:', error);\r\n       setIsLoadingCities(false);\r\n"
                },
                {
                    "date": 1760960619921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,40 +147,14 @@\n       return [];\r\n     }\r\n   }, []);\r\n \r\n-  // Get cities for a selected country - try comprehensive database first, then APIs\r\n+  // Get cities for a selected country - ALWAYS fetch ALL cities from APIs\r\n   const getCitiesForCountry = React.useCallback(async (countryName: string): Promise<Array<{name: string; lat: number; lng: number}>> => {\r\n-    console.log(`🔍 Fetching cities for: ${countryName}`);\r\n+    console.log(`🔍 Fetching ALL cities for: ${countryName}`);\r\n     \r\n-    // FIRST: Check our comprehensive major cities database\r\n-    if (MAJOR_CITIES_BY_COUNTRY[countryName]) {\r\n-      const majorCities = MAJOR_CITIES_BY_COUNTRY[countryName];\r\n-      console.log(`✅ Found ${majorCities.length} major cities for ${countryName} in database:`, majorCities.map(c => c.name).join(', '));\r\n-      return majorCities.sort((a, b) => a.name.localeCompare(b.name));\r\n-    }\r\n-    \r\n-    // SECOND: Check if we have manually mapped cities for special cases\r\n-    const localCities: Array<{name: string; lat: number; lng: number}> = [];\r\n-    \r\n-    Object.entries(allCities as Record<string, {lat: number; lng: number}>).forEach(([cityName, cityData]) => {\r\n-      if (CITY_TO_COUNTRY[cityName] === countryName) {\r\n-        localCities.push({\r\n-          name: cityName,\r\n-          lat: cityData.lat,\r\n-          lng: cityData.lng\r\n-        });\r\n-      }\r\n-    });\r\n-    \r\n-    // Only use local cities if we have 5+ (comprehensive coverage)\r\n-    if (localCities.length >= 5) {\r\n-      console.log(`✅ Using ${localCities.length} local cities for ${countryName}:`, localCities.map(c => c.name).join(', '));\r\n-      return localCities.sort((a, b) => a.name.localeCompare(b.name));\r\n-    }\r\n-    \r\n-    // THIRD: Fetch cities from APIs (Nominatim + Overpass)\r\n-    console.log(`🌐 Fetching cities from APIs for ${countryName}... (found ${localCities.length} local cities, need API fetch)`);\r\n+    // Always fetch from APIs to get comprehensive city lists\r\n+    console.log(`🌐 Fetching all cities from APIs for ${countryName}...`);\r\n     try {\r\n       setIsLoadingCities(true);\r\n       \r\n       // Use multiple queries to get comprehensive city data\r\n"
                },
                {
                    "date": 1760960674601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,38 +156,43 @@\n     console.log(`🌐 Fetching all cities from APIs for ${countryName}...`);\r\n     try {\r\n       setIsLoadingCities(true);\r\n       \r\n-      // Use multiple queries to get comprehensive city data\r\n+      // Use multiple queries to get comprehensive city data (increased limits)\r\n       const queries = [\r\n-        // Query 1: Search for cities\r\n+        // Query 1: Search for cities with higher limit\r\n         fetch(\r\n           `https://nominatim.openstreetmap.org/search?` +\r\n           `country=${encodeURIComponent(countryName)}` +\r\n           `&featuretype=city` +\r\n           `&format=json` +\r\n-          `&limit=50` +\r\n+          `&limit=100` + // Increased from 50 to 100\r\n           `&addressdetails=1`,\r\n           {\r\n             headers: {\r\n               'User-Agent': 'MapIt-App/1.0'\r\n             }\r\n           }\r\n         ),\r\n-        // Query 2: Search for administrative centers (capital cities, state capitals)\r\n+        // Query 2: Search for towns\r\n         fetch(\r\n           `https://nominatim.openstreetmap.org/search?` +\r\n           `country=${encodeURIComponent(countryName)}` +\r\n-          `&city=` +\r\n+          `&featuretype=settlement` +\r\n           `&format=json` +\r\n-          `&limit=50` +\r\n+          `&limit=100` + // Increased from 50 to 100\r\n           `&addressdetails=1`,\r\n           {\r\n             headers: {\r\n               'User-Agent': 'MapIt-App/1.0'\r\n             }\r\n           }\r\n         )\r\n+      ];            headers: {\r\n+              'User-Agent': 'MapIt-App/1.0'\r\n+            }\r\n+          }\r\n+        )\r\n       ];\r\n       \r\n       const responses = await Promise.all(queries);\r\n       const allData = await Promise.all(responses.map(r => r.json()));\r\n@@ -235,14 +240,14 @@\n       });\r\n       \r\n       setIsLoadingCities(false);\r\n       \r\n-      // If we found cities, return them sorted\r\n+      // If we found cities, return them sorted (increased limit to 100)\r\n       if (fetchedCities.length > 0) {\r\n         console.log(`✅ API returned ${fetchedCities.length} cities for ${countryName}:`, fetchedCities.slice(0, 10).map(c => c.name).join(', '), '...');\r\n         return fetchedCities\r\n           .sort((a, b) => a.name.localeCompare(b.name))\r\n-          .slice(0, 30); // Limit to top 30 cities\r\n+          .slice(0, 100); // Increased from 30 to 100 cities\r\n       }\r\n       \r\n       // If no cities found, try overpass API as alternative\r\n       console.log('No cities found via Nominatim, trying Overpass API...');\r\n"
                },
                {
                    "date": 1760960708053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n         (\r\n           node[\"place\"=\"city\"](area);\r\n           node[\"place\"=\"town\"](area);\r\n         );\r\n-        out body 50;\r\n+        out body 100;\r\n       `;\r\n       \r\n       const response = await fetch('https://overpass-api.de/api/interpreter', {\r\n         method: 'POST',\r\n@@ -140,9 +140,9 @@\n           });\r\n         }\r\n       });\r\n       \r\n-      return cities.sort((a, b) => a.name.localeCompare(b.name)).slice(0, 40);\r\n+      return cities.sort((a, b) => a.name.localeCompare(b.name)).slice(0, 100); // Increased from 40 to 100\r\n     } catch (error) {\r\n       console.error('Overpass API failed:', error);\r\n       return [];\r\n     }\r\n"
                },
                {
                    "date": 1760960804273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,13 +186,8 @@\n               'User-Agent': 'MapIt-App/1.0'\r\n             }\r\n           }\r\n         )\r\n-      ];            headers: {\r\n-              'User-Agent': 'MapIt-App/1.0'\r\n-            }\r\n-          }\r\n-        )\r\n       ];\r\n       \r\n       const responses = await Promise.all(queries);\r\n       const allData = await Promise.all(responses.map(r => r.json()));\r\n"
                },
                {
                    "date": 1760960958171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,35 +158,48 @@\n       setIsLoadingCities(true);\r\n       \r\n       // Use multiple queries to get comprehensive city data (increased limits)\r\n       const queries = [\r\n-        // Query 1: Search for cities with higher limit\r\n+        // Query 1: Search for cities\r\n         fetch(\r\n           `https://nominatim.openstreetmap.org/search?` +\r\n           `country=${encodeURIComponent(countryName)}` +\r\n           `&featuretype=city` +\r\n           `&format=json` +\r\n-          `&limit=100` + // Increased from 50 to 100\r\n+          `&limit=100` +\r\n           `&addressdetails=1`,\r\n           {\r\n             headers: {\r\n               'User-Agent': 'MapIt-App/1.0'\r\n             }\r\n           }\r\n         ),\r\n-        // Query 2: Search for towns\r\n+        // Query 2: Search for settlements (towns, villages)\r\n         fetch(\r\n           `https://nominatim.openstreetmap.org/search?` +\r\n           `country=${encodeURIComponent(countryName)}` +\r\n           `&featuretype=settlement` +\r\n           `&format=json` +\r\n-          `&limit=100` + // Increased from 50 to 100\r\n+          `&limit=100` +\r\n           `&addressdetails=1`,\r\n           {\r\n             headers: {\r\n               'User-Agent': 'MapIt-App/1.0'\r\n             }\r\n           }\r\n+        ),\r\n+        // Query 3: Search using place parameter for cities and towns\r\n+        fetch(\r\n+          `https://nominatim.openstreetmap.org/search?` +\r\n+          `country=${encodeURIComponent(countryName)}` +\r\n+          `&format=json` +\r\n+          `&limit=100` +\r\n+          `&addressdetails=1`,\r\n+          {\r\n+            headers: {\r\n+              'User-Agent': 'MapIt-App/1.0'\r\n+            }\r\n+          }\r\n         )\r\n       ];\r\n       \r\n       const responses = await Promise.all(queries);\r\n@@ -203,34 +216,21 @@\n           const cityName = item.address?.city || \r\n                           item.address?.town || \r\n                           item.address?.village ||\r\n                           item.address?.municipality ||\r\n-                          item.address?.county ||\r\n+                          item.address?.suburb ||\r\n+                          item.address?.hamlet ||\r\n                           item.display_name?.split(',')[0] ||\r\n                           item.name;\r\n           \r\n           if (cityName && !seenCities.has(cityName)) {\r\n-            // Filter out countries, regions, and non-city entities\r\n-            const type = item.type || '';\r\n-            const classType = item.class || '';\r\n-            \r\n-            // Only include if it's likely a city/town\r\n-            if (\r\n-              type === 'city' || \r\n-              type === 'town' || \r\n-              type === 'village' ||\r\n-              type === 'administrative' ||\r\n-              classType === 'place' ||\r\n-              item.address?.city ||\r\n-              item.address?.town\r\n-            ) {\r\n-              seenCities.add(cityName);\r\n-              fetchedCities.push({\r\n-                name: cityName,\r\n-                lat: parseFloat(item.lat),\r\n-                lng: parseFloat(item.lon)\r\n-              });\r\n-            }\r\n+            // Accept all place types - be very permissive to get maximum cities\r\n+            seenCities.add(cityName);\r\n+            fetchedCities.push({\r\n+              name: cityName,\r\n+              lat: parseFloat(item.lat),\r\n+              lng: parseFloat(item.lon)\r\n+            });\r\n           }\r\n         });\r\n       });\r\n       \r\n"
                },
                {
                    "date": 1760961125622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,13 +204,16 @@\n       \r\n       const responses = await Promise.all(queries);\r\n       const allData = await Promise.all(responses.map(r => r.json()));\r\n       \r\n+      console.log(`📦 Raw API data for ${countryName}:`, allData.map(d => `${d.length} items`).join(', '));\r\n+      \r\n       // Combine and parse all responses\r\n       const fetchedCities: Array<{name: string; lat: number; lng: number}> = [];\r\n       const seenCities = new Set<string>();\r\n       \r\n       allData.forEach(data => {\r\n+        console.log(`Processing ${data.length} items from API...`);\r\n         // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n         data.forEach((item: any) => {\r\n           // Try multiple fields to extract city name\r\n           const cityName = item.address?.city || \r\n@@ -235,23 +238,25 @@\n       });\r\n       \r\n       setIsLoadingCities(false);\r\n       \r\n+      console.log(`✅ Total unique cities collected: ${fetchedCities.length}`);\r\n+      \r\n       // If we found cities, return them sorted (increased limit to 100)\r\n       if (fetchedCities.length > 0) {\r\n-        console.log(`✅ API returned ${fetchedCities.length} cities for ${countryName}:`, fetchedCities.slice(0, 10).map(c => c.name).join(', '), '...');\r\n+        console.log(`✅ API returned ${fetchedCities.length} cities for ${countryName}:`, fetchedCities.slice(0, 10).map(c => c.name).join(', '), fetchedCities.length > 10 ? '...' : '');\r\n         return fetchedCities\r\n           .sort((a, b) => a.name.localeCompare(b.name))\r\n           .slice(0, 100); // Increased from 30 to 100 cities\r\n       }\r\n       \r\n       // If no cities found, try overpass API as alternative\r\n-      console.log('No cities found via Nominatim, trying Overpass API...');\r\n+      console.log('⚠️ No cities found via Nominatim, trying Overpass API...');\r\n       const overpassCities = await fetchCitiesViaOverpass(countryName);\r\n       if (overpassCities.length > 0) {\r\n-        console.log(`✅ Overpass API returned ${overpassCities.length} cities for ${countryName}:`, overpassCities.slice(0, 10).map(c => c.name).join(', '), '...');\r\n+        console.log(`✅ Overpass API returned ${overpassCities.length} cities for ${countryName}:`, overpassCities.slice(0, 10).map(c => c.name).join(', '), overpassCities.length > 10 ? '...' : '');\r\n       } else {\r\n-        console.log(`⚠️ No cities found for ${countryName} from any source`);\r\n+        console.log(`❌ No cities found for ${countryName} from any source`);\r\n       }\r\n       return overpassCities;\r\n       \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1760961253816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,13 @@\n                           item.address?.hamlet ||\r\n                           item.display_name?.split(',')[0] ||\r\n                           item.name;\r\n           \r\n-          if (cityName && !seenCities.has(cityName)) {\r\n+          // Skip if it's the country name itself or empty\r\n+          if (cityName && \r\n+              !seenCities.has(cityName) && \r\n+              cityName !== countryName &&\r\n+              cityName.toLowerCase() !== countryName.toLowerCase()) {\r\n             // Accept all place types - be very permissive to get maximum cities\r\n             seenCities.add(cityName);\r\n             fetchedCities.push({\r\n               name: cityName,\r\n"
                },
                {
                    "date": 1760961346586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,24 +214,26 @@\n       allData.forEach(data => {\r\n         console.log(`Processing ${data.length} items from API...`);\r\n         // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n         data.forEach((item: any) => {\r\n-          // Try multiple fields to extract city name\r\n-          const cityName = item.address?.city || \r\n-                          item.address?.town || \r\n-                          item.address?.village ||\r\n-                          item.address?.municipality ||\r\n-                          item.address?.suburb ||\r\n-                          item.address?.hamlet ||\r\n-                          item.display_name?.split(',')[0] ||\r\n-                          item.name;\r\n+          // Prioritize address fields over name to avoid getting country names\r\n+          let cityName = item.address?.city || \r\n+                        item.address?.town || \r\n+                        item.address?.village ||\r\n+                        item.address?.municipality ||\r\n+                        item.address?.suburb ||\r\n+                        item.address?.hamlet;\r\n           \r\n+          // If no address field found, try item.name only if it's explicitly a place type\r\n+          if (!cityName && (item.type === 'city' || item.type === 'town' || item.type === 'village' || item.type === 'administrative')) {\r\n+            cityName = item.name;\r\n+          }\r\n+          \r\n           // Skip if it's the country name itself or empty\r\n           if (cityName && \r\n               !seenCities.has(cityName) && \r\n               cityName !== countryName &&\r\n               cityName.toLowerCase() !== countryName.toLowerCase()) {\r\n-            // Accept all place types - be very permissive to get maximum cities\r\n             seenCities.add(cityName);\r\n             fetchedCities.push({\r\n               name: cityName,\r\n               lat: parseFloat(item.lat),\r\n"
                }
            ],
            "date": 1760957535654,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport './CountrySidebar.css';\r\nimport './MapCardStyles.css';\r\nimport './MapFormStyles.css';\r\nimport allCountries from '../assets/allCountries.json';\r\nimport allCities from '../assets/allCities.json';\r\nimport { COUNTRY_COORDINATES } from '../utils/countryCoordinates';\r\n\r\n// Interface for coordinates\r\ninterface Coordinates {\r\n  lat: number;\r\n  lng: number;\r\n}\r\n\r\n// Props interface for the component\r\ninterface CountrySidebarProps {\r\n  onSearch: (lat: number, lng: number, zoom: number, countryName?: string) => void;\r\n  showMaps?: boolean; // New prop to control whether to show maps section\r\n  onSaveMap?: () => void; // New prop to handle saving the map directly to database\r\n  currentMapData?: {\r\n    title: string;\r\n    description: string;\r\n    position: { lat: number; lng: number; zoom: number };\r\n    isEditing?: boolean;\r\n  };\r\n}\r\n\r\nconst CountrySidebar: React.FC<CountrySidebarProps> = ({ \r\n  onSearch, \r\n  showMaps = true,\r\n  onSaveMap,\r\n  currentMapData\r\n}) => {\r\n  const [location, setLocation] = useState('');\r\n  const [selectedCountry, setSelectedCountry] = useState<string>('');\r\n  const [error, setError] = useState('');\r\n  const [countrySuggestions, setCountrySuggestions] = useState<string[]>([]);\r\n  const [countryCities, setCountryCities] = useState<Array<{name: string; lat: number; lng: number}>>([]);\r\n  const [showMapForm, setShowMapForm] = useState(false);\r\n  const [mapTitle, setMapTitle] = useState('');\r\n  const [mapDescription, setMapDescription] = useState('');\r\n  const [maps, setMaps] = useState<Array<{ id: number; title: string; description: string; coordinates?: {lat: number, lng: number} }>>([]);\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\r\n  const isLoggedIn = localStorage.getItem('mapit_logged_in') === 'true';\r\n  const [currentCoordinates, setCurrentCoordinates] = useState<{lat: number, lng: number} | null>(null);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n\r\n  // Initialize map on component mount\r\n  useEffect(() => {\r\n    // Show world view\r\n    onSearch(20, 0, 2);\r\n\r\n    // Load saved maps when user is logged in\r\n    if (isLoggedIn) {\r\n      const savedMaps = localStorage.getItem('user_maps');\r\n      if (savedMaps) {\r\n        try {\r\n          setMaps(JSON.parse(savedMaps));\r\n        } catch (e) {\r\n          console.error('Failed to parse saved maps', e);\r\n        }\r\n      }\r\n    }\r\n  }, [onSearch, isLoggedIn]);\r\n\r\n  // Handle country selection\r\n  useEffect(() => {\r\n    if (selectedCountry) {\r\n      // Find corresponding coordinates\r\n      const coordinates = COUNTRY_COORDINATES[selectedCountry];\r\n      if (coordinates) {\r\n        const { lat, lng } = coordinates;\r\n        const zoom = 8; // Increased zoom level for deeper zoom into countries\r\n        onSearch(lat, lng, zoom, selectedCountry);\r\n        setLocation(selectedCountry); // Update input field\r\n        setError('');\r\n        \r\n        // Load cities for the selected country\r\n        const cities = getCitiesForCountry(selectedCountry);\r\n        setCountryCities(cities);\r\n      } else {\r\n        setError(`Could not find coordinates for ${selectedCountry}`);\r\n        // Show world view as fallback\r\n        onSearch(20, 0, 2);\r\n        setCountryCities([]);\r\n      }\r\n    } else {\r\n      setCountryCities([]);\r\n    }\r\n  }, [selectedCountry, onSearch]);\r\n\r\n  // Get cities for a selected country based on proximity\r\n  const getCitiesForCountry = (countryName: string): Array<{name: string; lat: number; lng: number}> => {\r\n    const countryCoords = COUNTRY_COORDINATES[countryName];\r\n    if (!countryCoords) return [];\r\n    \r\n    const cities: Array<{name: string; lat: number; lng: number; distance: number}> = [];\r\n    \r\n    // Calculate distance between two coordinates\r\n    const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {\r\n      const R = 6371; // Earth's radius in km\r\n      const dLat = (lat2 - lat1) * Math.PI / 180;\r\n      const dLng = (lng2 - lng1) * Math.PI / 180;\r\n      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\r\n                Math.sin(dLng/2) * Math.sin(dLng/2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n      return R * c;\r\n    };\r\n    \r\n    // Find cities within reasonable distance from country center\r\n    Object.entries(allCities as Record<string, {lat: number; lng: number}>).forEach(([cityName, cityData]) => {\r\n      const distance = calculateDistance(\r\n        countryCoords.lat, \r\n        countryCoords.lng, \r\n        cityData.lat, \r\n        cityData.lng\r\n      );\r\n      \r\n      // Include cities within 500km of country center\r\n      if (distance <= 500) {\r\n        cities.push({\r\n          name: cityName,\r\n          lat: cityData.lat,\r\n          lng: cityData.lng,\r\n          distance\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Sort by distance and return top 15 cities\r\n    return cities\r\n      .sort((a, b) => a.distance - b.distance)\r\n      .slice(0, 15)\r\n      .map(({ name, lat, lng }) => ({ name, lat, lng }));\r\n  };\r\n\r\n  // Handle search submit\r\n  const handleSearch = () => {\r\n    const countryName = location.trim();\r\n    if (countryName) {\r\n      // Find country coordinates\r\n      const coordinates = COUNTRY_COORDINATES[countryName];\r\n      if (coordinates) {\r\n        const { lat, lng } = coordinates;\r\n        const zoom = 8; // Increased zoom level for deeper zoom into countries\r\n        onSearch(lat, lng, zoom, countryName);\r\n        setSelectedCountry(countryName);\r\n        setError('');\r\n      } else {\r\n        setError(`Could not find coordinates for \"${countryName}\". Try another location.`);\r\n      }\r\n    } else {\r\n      // Show world view\r\n      onSearch(20, 0, 2);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`country-sidebar ${isSidebarOpen ? 'open' : 'closed'}`}>\r\n      <button\r\n        className=\"sidebar-toggle-btn\"\r\n        onClick={() => setIsSidebarOpen(!isSidebarOpen)}\r\n        aria-label={isSidebarOpen ? 'Close sidebar' : 'Open sidebar'}\r\n      >\r\n        <span className=\"chevron-icon\"></span>\r\n      </button>\r\n      \r\n      {isLoggedIn && showMapForm ? (\r\n        <div className=\"sidebar-header\">\r\n          <h2>Create New Map</h2>\r\n        </div>\r\n      ) : (\r\n        <div className=\"sidebar-header\">\r\n          <h2>Location Search</h2>\r\n          <p>Search for countries, cities or coordinates</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Add Save to Database button when currentMapData is available */}\r\n      {currentMapData && !showMapForm && (\r\n        <div style={{\r\n          padding: '16px',\r\n          borderBottom: '1px solid #e2e8f0',\r\n          marginBottom: '16px'\r\n        }}>\r\n          <div style={{ \r\n            fontWeight: 600, \r\n            fontSize: '15px', \r\n            marginBottom: '8px',\r\n            color: '#000'\r\n          }}>\r\n            Current Map: {currentMapData.title}\r\n          </div>\r\n          <button\r\n            onClick={async () => {\r\n              if (onSaveMap) {\r\n                setIsSaving(true);\r\n                try {\r\n                  await onSaveMap();\r\n                  // Show success message or update UI if needed\r\n                } catch (error) {\r\n                  console.error(\"Error saving map:\", error);\r\n                  // Show error message if needed\r\n                } finally {\r\n                  setTimeout(() => setIsSaving(false), 1000);\r\n                }\r\n              }\r\n            }}\r\n            style={{\r\n              width: '100%',\r\n              padding: '12px',\r\n              fontSize: '15px',\r\n              background: '#4f8cff',\r\n              color: '#fff',\r\n              border: 'none',\r\n              borderRadius: '10px',\r\n              cursor: 'pointer',\r\n              fontWeight: 600,\r\n              boxShadow: '0 3px 10px rgba(79,140,255,0.2)',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              gap: '8px',\r\n              marginTop: '12px'\r\n            }}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n              <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\r\n              <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\r\n              <polyline points=\"7 3 7 8 15 8\"></polyline>\r\n            </svg>\r\n            {isSaving ? 'Saving...' : 'Save Map to Database'}\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {!showMapForm && (\r\n        <div className=\"sidebar-search\">\r\n        <div className=\"search-row\">\r\n          <div style={{ position: 'relative', width: '100%' }}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Type a country or city name...\"\r\n              value={location}\r\n              onChange={e => {\r\n                setLocation(e.target.value);\r\n                // Handle country input\r\n                const input = e.target.value;\r\n                if (input.length >= 2) {\r\n                  // Filter countries first\r\n                  const countryMatches = Object.keys(allCountries)\r\n                    .filter(country => country.toLowerCase().includes(input.toLowerCase()))\r\n                    .slice(0, 5);\r\n                  setCountrySuggestions(countryMatches);\r\n                } else {\r\n                  setCountrySuggestions([]);\r\n                }\r\n              }}\r\n              onKeyDown={e => {\r\n                if (e.key === 'Enter') {\r\n                  handleSearch();\r\n                  // Flash the search button to provide visual feedback\r\n                  const searchBtn = document.querySelector('.search-button') as HTMLElement;\r\n                  if (searchBtn) {\r\n                    searchBtn.style.backgroundColor = '#3a7cd8';\r\n                    setTimeout(() => {\r\n                      searchBtn.style.backgroundColor = '';\r\n                    }, 300);\r\n                  }\r\n                }\r\n              }}\r\n              className=\"sidebar-input\"\r\n              autoComplete=\"off\"\r\n              style={{\r\n                border: error ? '1px solid #ff6b6b' : '1px solid #b6d0f7',\r\n                boxShadow: selectedCountry ? '0 0 0 2px rgba(79, 140, 255, 0.3)' : 'none',\r\n                paddingRight: '36px' // Make room for the clear button\r\n              }}\r\n            />\r\n            {location && (\r\n              <button\r\n                className=\"search-input-clear\"\r\n                onClick={() => {\r\n                  setLocation('');\r\n                  setSelectedCountry(''); // Also clear selected country\r\n                  setCountrySuggestions([]);\r\n                  // Focus back on the input after clearing\r\n                  const searchInput = document.querySelector('.sidebar-input') as HTMLInputElement;\r\n                  if (searchInput) searchInput.focus();\r\n                }}\r\n                title=\"Delete country\"\r\n                aria-label=\"Delete country\"\r\n              >\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                  <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n                  <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n                </svg>\r\n              </button>\r\n            )}\r\n          </div>\r\n          <button \r\n            className=\"sidebar-btn search-button\" \r\n            onClick={() => {\r\n              // Provide visual feedback\r\n              const btn = document.querySelector('.search-button') as HTMLElement;\r\n              if (btn) {\r\n                btn.style.transform = 'scale(0.95)';\r\n                btn.style.backgroundColor = '#3a6fbf';\r\n                btn.innerHTML = '<span style=\"font-weight: bold\">Searching...</span>';\r\n                \r\n                // Reset after animation\r\n                setTimeout(() => {\r\n                  btn.style.transform = 'scale(1.05)';\r\n                  btn.style.backgroundColor = '#4f8cff';\r\n                  btn.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\"><path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\"/></svg>';\r\n                }, 1500);\r\n              }\r\n              \r\n              // Get the current input\r\n              const searchInput = document.querySelector('.sidebar-input') as HTMLInputElement;\r\n              const searchValue = searchInput?.value?.trim() || location;\r\n              \r\n              console.log('Search button clicked for:', searchValue);\r\n              \r\n              if (searchValue) {\r\n                // First store the input if it's not already set\r\n                if (searchValue !== location) {\r\n                  setLocation(searchValue);\r\n                }\r\n                \r\n                // DIRECT COUNTRY MAPPING - most reliable approach\r\n                const countryMapping: Record<string, {lat: number, lng: number, zoom: number}> = {\r\n                  'lebanon': { lat: 33.8547, lng: 35.8623, zoom: 8 },\r\n                  'syria': { lat: 34.8021, lng: 38.9968, zoom: 7 },\r\n                  'jordan': { lat: 30.5852, lng: 36.2384, zoom: 7 },\r\n                  'israel': { lat: 31.0461, lng: 34.8516, zoom: 8 },\r\n                  'united arab emirates': { lat: 23.4241, lng: 53.8478, zoom: 7 },\r\n                  'kuwait': { lat: 29.3117, lng: 47.4818, zoom: 8 },\r\n                  'qatar': { lat: 25.3548, lng: 51.1839, zoom: 8 },\r\n                  'russia': { lat: 61.5240, lng: 105.3188, zoom: 3 }\r\n                };\r\n                \r\n                // Direct country match check (case insensitive)\r\n                const lowerSearchValue = searchValue.toLowerCase();\r\n                if (countryMapping[lowerSearchValue]) {\r\n                  console.log(`Direct coordinates found for ${searchValue}`);\r\n                  const coords = countryMapping[lowerSearchValue];\r\n                  const countryName = searchValue.charAt(0).toUpperCase() + searchValue.slice(1);\r\n                  \r\n                  // First zoom attempt\r\n                  onSearch(coords.lat, coords.lng, coords.zoom, countryName);\r\n                  \r\n                  // Follow-up zoom attempts with slight delays\r\n                  [300, 800, 1500, 2500].forEach((delay, index) => {\r\n                    setTimeout(() => {\r\n                      // Add tiny offset to force map update\r\n                      const offset = 0.0001 * (index + 1);\r\n                      onSearch(\r\n                        coords.lat + offset, \r\n                        coords.lng + offset, \r\n                        coords.zoom, \r\n                        [], \r\n                        countryName\r\n                      );\r\n                    }, delay);\r\n                  });\r\n                } else {\r\n                  // Normal search for other countries\r\n                  handleSearch();\r\n                }\r\n              } else {\r\n                handleSearch(); // Empty search shows world map\r\n              }\r\n            }} \r\n            title=\"Search for this location\"\r\n            style={{\r\n              backgroundColor: '#4f8cff',\r\n              color: 'white',\r\n              transition: 'all 0.2s ease',\r\n              transform: 'scale(1.05)',\r\n              boxShadow: '0 3px 8px rgba(79, 140, 255, 0.4)',\r\n              fontWeight: 'bold'\r\n            }}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n              <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\"/>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        <div className=\"auto-search-hint\" style={{ \r\n          fontSize: '0.75rem', \r\n          color: '#666', \r\n          marginTop: '4px', \r\n          textAlign: 'center' \r\n        }}>\r\n          Just type to auto-zoom to matching locations\r\n        </div>\r\n        \r\n        {/* Display selected country with delete button */}\r\n        {selectedCountry && (\r\n          <div className=\"selected-country-pill\" style={{\r\n            display: 'inline-flex',\r\n            alignItems: 'center',\r\n            backgroundColor: '#e9f0ff',\r\n            border: '1px solid #c2d8ff',\r\n            borderRadius: '16px',\r\n            padding: '4px 12px 4px 16px',\r\n            margin: '10px 0',\r\n            fontSize: '14px',\r\n            color: '#1e40af'\r\n          }}>\r\n            {selectedCountry}\r\n            <button\r\n              onClick={() => {\r\n                setLocation('');\r\n                setSelectedCountry('');\r\n                setCountrySuggestions([]);\r\n                setCountryCities([]);\r\n                // Focus back on the input after clearing\r\n                const searchInput = document.querySelector('.sidebar-input') as HTMLInputElement;\r\n                if (searchInput) searchInput.focus();\r\n              }}\r\n              style={{\r\n                background: 'transparent',\r\n                border: 'none',\r\n                cursor: 'pointer',\r\n                marginLeft: '8px',\r\n                padding: '0',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n              }}\r\n              title=\"Delete country\"\r\n              aria-label=\"Delete country\"\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n                <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        )}\r\n        \r\n        {/* Display cities for selected country */}\r\n        {selectedCountry && countryCities.length > 0 && (\r\n          <div style={{\r\n            marginTop: '16px',\r\n            padding: '12px',\r\n            backgroundColor: '#f8fafc',\r\n            borderRadius: '8px',\r\n            border: '1px solid #e2e8f0'\r\n          }}>\r\n            <div style={{\r\n              fontSize: '13px',\r\n              fontWeight: '600',\r\n              color: '#334155',\r\n              marginBottom: '10px',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: '6px'\r\n            }}>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path>\r\n                <circle cx=\"12\" cy=\"10\" r=\"3\"></circle>\r\n              </svg>\r\n              Cities in {selectedCountry}\r\n            </div>\r\n            <div style={{\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              gap: '6px',\r\n              maxHeight: '300px',\r\n              overflowY: 'auto'\r\n            }}>\r\n              {countryCities.map((city) => (\r\n                <button\r\n                  key={city.name}\r\n                  onClick={() => {\r\n                    // Zoom to city with high zoom level\r\n                    onSearch(city.lat, city.lng, 12, selectedCountry);\r\n                  }}\r\n                  style={{\r\n                    padding: '10px 12px',\r\n                    backgroundColor: 'white',\r\n                    border: '1px solid #e2e8f0',\r\n                    borderRadius: '6px',\r\n                    cursor: 'pointer',\r\n                    textAlign: 'left',\r\n                    fontSize: '13px',\r\n                    color: '#1e293b',\r\n                    transition: 'all 0.2s ease',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'space-between'\r\n                  }}\r\n                  onMouseEnter={(e) => {\r\n                    e.currentTarget.style.backgroundColor = '#f1f5f9';\r\n                    e.currentTarget.style.borderColor = '#cbd5e1';\r\n                    e.currentTarget.style.transform = 'translateX(2px)';\r\n                  }}\r\n                  onMouseLeave={(e) => {\r\n                    e.currentTarget.style.backgroundColor = 'white';\r\n                    e.currentTarget.style.borderColor = '#e2e8f0';\r\n                    e.currentTarget.style.transform = 'translateX(0)';\r\n                  }}\r\n                >\r\n                  <span style={{ fontWeight: '500' }}>{city.name}</span>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" style={{ opacity: 0.5 }}>\r\n                    <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\r\n                    <path d=\"m21 21-4.35-4.35\"></path>\r\n                    <path d=\"M11 8v6\"></path>\r\n                    <path d=\"M8 11h6\"></path>\r\n                  </svg>\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n        \r\n        {countrySuggestions.length > 0 && (\r\n          <ul className=\"country-suggestions\">\r\n            {countrySuggestions.map(s => {\r\n              const isCountry = s in allCountries;\r\n              return (\r\n                <li \r\n                  key={s} \r\n                  onClick={() => {\r\n                    // Handle country suggestion click\r\n                    setLocation(s);\r\n                    setCountrySuggestions([]);\r\n                    // Check if it's a country\r\n                    if (s in allCountries) {\r\n                      setSelectedCountry(s);\r\n                      // Zoom to country center\r\n                      const { lat, lng } = (allCountries as Record<string, { lat: number; lng: number }>)[s];\r\n                      onSearch(lat, lng, 7, s);\r\n                    }\r\n                  }}\r\n                  style={{ color: isCountry ? '#000000' : '' }}\r\n                >\r\n                  {s}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        )}\r\n      </div>\r\n      )}\r\n\r\n      {/* Remove the plus button as we have an Add Map button in the maps list */}\r\n\r\n      {/* New map form modal/inline */}\r\n      {showMapForm && (\r\n        <div className=\"map-form\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"map-title\">Map Title</label>\r\n            <input\r\n              id=\"map-title\"\r\n              type=\"text\"\r\n              placeholder=\"Enter a title for your map\"\r\n              value={mapTitle}\r\n              onChange={(e) => setMapTitle(e.target.value)}\r\n              className=\"form-control\"\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"map-description\">Map Description</label>\r\n            <textarea\r\n              id=\"map-description\"\r\n              placeholder=\"Enter a brief description\"\r\n              value={mapDescription}\r\n              onChange={(e) => setMapDescription(e.target.value)}\r\n              className=\"form-control\"\r\n              rows={4}\r\n            ></textarea>\r\n          </div>\r\n\r\n          <div className=\"form-group coordinates-display\">\r\n            <div className=\"coordinates-label\" style={{ color: '#000' }}>Current Map Center:</div>\r\n            <div className=\"coordinates-value\" style={{ color: '#000' }}>\r\n              {currentCoordinates ? \r\n                `Lat: ${currentCoordinates.lat.toFixed(4)}, Lng: ${currentCoordinates.lng.toFixed(4)}` : \r\n                'Move the map to set coordinates'}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"form-actions\">\r\n            <button\r\n              className=\"sidebar-btn save-btn\"\r\n              onClick={() => {\r\n                if (!mapTitle.trim()) {\r\n                  setError('Title is required');\r\n                  return;\r\n                }\r\n                setError('');\r\n                \r\n                // In a real app, this would send data to a backend API\r\n                // For now, we'll just store in localStorage\r\n                const newMap = {\r\n                  id: Date.now(),\r\n                  title: mapTitle,\r\n                  description: mapDescription,\r\n                  coordinates: currentCoordinates || undefined\r\n                };\r\n                \r\n                const updatedMaps = [...maps, newMap];\r\n                localStorage.setItem('user_maps', JSON.stringify(updatedMaps));\r\n                setMaps(updatedMaps);\r\n                setShowMapForm(false);\r\n                setMapTitle('');\r\n                setMapDescription('');\r\n              }}\r\n            >\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                <path d=\"M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.75.75 0 0 1 1.06-1.06L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0z\"/>\r\n              </svg>\r\n              Save Map\r\n            </button>\r\n            <button \r\n              className=\"sidebar-btn cancel-btn\" \r\n              onClick={() => setShowMapForm(false)}>\r\n              Cancel\r\n            </button>\r\n          </div>\r\n          \r\n          {error && <div className=\"sidebar-error\">{error}</div>}\r\n        </div>\r\n      )}\r\n\r\n      {/* List of maps in sidebar - only show when showMaps prop is true */}\r\n      {isLoggedIn && !showMapForm && showMaps && (\r\n        <div className=\"sidebar-maps-list\">\r\n          <h4>My Maps</h4>\r\n          {maps.length > 0 ? (\r\n            <div className=\"maps-container\">\r\n              {maps.map(map => (\r\n                <div key={map.id} className=\"map-card\">\r\n                  <div className=\"map-card-title\">{map.title}</div>\r\n                  <div className=\"map-card-description\">{map.description}</div>\r\n                  {map.coordinates && (\r\n                    <div className=\"map-card-coordinates\">\r\n                      Lat: {map.coordinates.lat.toFixed(2)}, Lng: {map.coordinates.lng.toFixed(2)}\r\n                    </div>\r\n                  )}\r\n                  <div className=\"map-card-actions\">\r\n                    <button className=\"map-card-btn\" onClick={() => {\r\n                      if (map.coordinates) {\r\n                        onSearch(map.coordinates.lat, map.coordinates.lng, 10);\r\n                      }\r\n                    }}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                        <path d=\"M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                      </svg>\r\n                      View\r\n                    </button>\r\n                    <button className=\"map-card-btn\">\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n                        <path d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\"/>\r\n                      </svg>\r\n                      Edit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"no-maps-message\">You haven't created any maps yet.</div>\r\n          )}\r\n          \r\n          <button className=\"add-map-btn\" onClick={() => {\r\n            setShowMapForm(true);\r\n            // Get current map position for new map\r\n            navigator.geolocation.getCurrentPosition(\r\n              (position) => {\r\n                setCurrentCoordinates({\r\n                  lat: position.coords.latitude,\r\n                  lng: position.coords.longitude\r\n                });\r\n              },\r\n              () => {\r\n                // Default coordinates if geolocation fails\r\n                setCurrentCoordinates({ lat: 20, lng: 0 });\r\n              }\r\n            );\r\n          }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\r\n              <path d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\"/>\r\n            </svg>\r\n            <span>Create New Map</span>\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {error && <div className=\"sidebar-error\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountrySidebar;\r\n"
        }
    ]
}