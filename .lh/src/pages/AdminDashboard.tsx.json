{
    "sourceFile": "src/pages/AdminDashboard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1761127643454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761127916590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import React, { useState, useEffect } from 'react';\r\n+import { useState, useEffect } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n import '../styles/AdminDashboard.css';\r\n \r\n interface Map {\r\n"
                }
            ],
            "date": 1761127643454,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../styles/AdminDashboard.css';\r\n\r\ninterface Map {\r\n  map_id: number;\r\n  title: string;\r\n  description: string;\r\n  map_code: string;\r\n  created_at: string;\r\n  active: boolean;\r\n  country: string;\r\n  customer_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  registration_date: string;\r\n  zone_count: number;\r\n}\r\n\r\ninterface Stats {\r\n  totalMaps: number;\r\n  totalCustomers: number;\r\n  totalZones: number;\r\n  activeMaps: number;\r\n}\r\n\r\nconst AdminDashboard = () => {\r\n  const [maps, setMaps] = useState<Map[]>([]);\r\n  const [stats, setStats] = useState<Stats | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterActive, setFilterActive] = useState<'all' | 'active' | 'inactive'>('all');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [sortField, setSortField] = useState<keyof Map>('created_at');\r\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');\r\n  const navigate = useNavigate();\r\n  const itemsPerPage = 10;\r\n\r\n  useEffect(() => {\r\n    // Check if user is admin\r\n    const isAdmin = localStorage.getItem('isAdmin');\r\n    if (!isAdmin || isAdmin !== 'true') {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n\r\n    fetchData();\r\n  }, [navigate]);\r\n\r\n  const fetchData = async () => {\r\n    setIsLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      // Fetch maps and stats in parallel\r\n      const [mapsResponse, statsResponse] = await Promise.all([\r\n        fetch('/api/admin/maps'),\r\n        fetch('/api/admin/stats')\r\n      ]);\r\n\r\n      if (!mapsResponse.ok || !statsResponse.ok) {\r\n        throw new Error('Failed to fetch data');\r\n      }\r\n\r\n      const mapsData = await mapsResponse.json();\r\n      const statsData = await statsResponse.json();\r\n\r\n      if (mapsData.success) {\r\n        setMaps(mapsData.maps);\r\n      }\r\n\r\n      if (statsData.success) {\r\n        setStats(statsData.stats);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching admin data:', err);\r\n      setError('Failed to load dashboard data. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('adminUser');\r\n    localStorage.removeItem('isAdmin');\r\n    navigate('/login');\r\n  };\r\n\r\n  const handleSort = (field: keyof Map) => {\r\n    if (sortField === field) {\r\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\r\n    } else {\r\n      setSortField(field);\r\n      setSortDirection('desc');\r\n    }\r\n  };\r\n\r\n  const handleViewMap = (mapId: number) => {\r\n    window.open(`/view-map/${mapId}`, '_blank');\r\n  };\r\n\r\n  // Filter and sort maps\r\n  const filteredMaps = maps\r\n    .filter(map => {\r\n      // Apply active filter\r\n      if (filterActive === 'active' && !map.active) return false;\r\n      if (filterActive === 'inactive' && map.active) return false;\r\n\r\n      // Apply search filter\r\n      if (searchTerm) {\r\n        const term = searchTerm.toLowerCase();\r\n        return (\r\n          map.title.toLowerCase().includes(term) ||\r\n          map.email.toLowerCase().includes(term) ||\r\n          map.first_name.toLowerCase().includes(term) ||\r\n          map.last_name.toLowerCase().includes(term) ||\r\n          (map.country && map.country.toLowerCase().includes(term))\r\n        );\r\n      }\r\n\r\n      return true;\r\n    })\r\n    .sort((a, b) => {\r\n      const aValue = a[sortField];\r\n      const bValue = b[sortField];\r\n      \r\n      if (aValue === null || aValue === undefined) return 1;\r\n      if (bValue === null || bValue === undefined) return -1;\r\n      \r\n      let comparison = 0;\r\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n        comparison = aValue.localeCompare(bValue);\r\n      } else if (typeof aValue === 'number' && typeof bValue === 'number') {\r\n        comparison = aValue - bValue;\r\n      } else {\r\n        comparison = String(aValue).localeCompare(String(bValue));\r\n      }\r\n      \r\n      return sortDirection === 'asc' ? comparison : -comparison;\r\n    });\r\n\r\n  // Pagination\r\n  const totalPages = Math.ceil(filteredMaps.length / itemsPerPage);\r\n  const startIndex = (currentPage - 1) * itemsPerPage;\r\n  const paginatedMaps = filteredMaps.slice(startIndex, startIndex + itemsPerPage);\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"admin-dashboard\">\r\n        <div className=\"loading-container\">\r\n          <div className=\"spinner-large\"></div>\r\n          <p>Loading dashboard...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      {/* Header */}\r\n      <header className=\"admin-header\">\r\n        <div className=\"admin-header-content\">\r\n          <div className=\"admin-branding\">\r\n            <div className=\"admin-logo\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                <path d=\"M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5zm0 10.99h7c-.53 4.12-3.28 7.79-7 8.94V12H5V7.89l7-3.11v8.2z\"/>\r\n              </svg>\r\n            </div>\r\n            <div>\r\n              <h1>Admin Dashboard</h1>\r\n              <p>MapIt Administration Portal</p>\r\n            </div>\r\n          </div>\r\n          <button className=\"btn-logout\" onClick={handleLogout}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n              <path d=\"M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.58L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z\"/>\r\n            </svg>\r\n            Logout\r\n          </button>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Stats Cards */}\r\n      {stats && (\r\n        <div className=\"stats-container\">\r\n          <div className=\"stat-card\">\r\n            <div className=\"stat-icon stat-icon-maps\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                <path d=\"M20.5 3l-.16.03L15 5.1 9 3 3.36 4.9c-.21.07-.36.25-.36.48V20.5c0 .28.22.5.5.5l.16-.03L9 18.9l6 2.1 5.64-1.9c.21-.07.36-.25.36-.48V3.5c0-.28-.22-.5-.5-.5zM15 19l-6-2.11V5l6 2.11V19z\"/>\r\n              </svg>\r\n            </div>\r\n            <div className=\"stat-content\">\r\n              <h3>Total Maps</h3>\r\n              <p className=\"stat-value\">{stats.totalMaps}</p>\r\n              <span className=\"stat-label\">{stats.activeMaps} active</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"stat-card\">\r\n            <div className=\"stat-icon stat-icon-customers\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                <path d=\"M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z\"/>\r\n              </svg>\r\n            </div>\r\n            <div className=\"stat-content\">\r\n              <h3>Total Customers</h3>\r\n              <p className=\"stat-value\">{stats.totalCustomers}</p>\r\n              <span className=\"stat-label\">registered users</span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"stat-card\">\r\n            <div className=\"stat-icon stat-icon-zones\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\"/>\r\n              </svg>\r\n            </div>\r\n            <div className=\"stat-content\">\r\n              <h3>Total Zones</h3>\r\n              <p className=\"stat-value\">{stats.totalZones}</p>\r\n              <span className=\"stat-label\">drawn on maps</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Controls */}\r\n      <div className=\"dashboard-controls\">\r\n        <div className=\"search-bar\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n          </svg>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search by title, customer, email, or country...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"filter-buttons\">\r\n          <button\r\n            className={`filter-btn ${filterActive === 'all' ? 'active' : ''}`}\r\n            onClick={() => setFilterActive('all')}\r\n          >\r\n            All Maps\r\n          </button>\r\n          <button\r\n            className={`filter-btn ${filterActive === 'active' ? 'active' : ''}`}\r\n            onClick={() => setFilterActive('active')}\r\n          >\r\n            Active\r\n          </button>\r\n          <button\r\n            className={`filter-btn ${filterActive === 'inactive' ? 'active' : ''}`}\r\n            onClick={() => setFilterActive('inactive')}\r\n          >\r\n            Inactive\r\n          </button>\r\n        </div>\r\n\r\n        <button className=\"btn-refresh\" onClick={fetchData}>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n            <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"/>\r\n          </svg>\r\n          Refresh\r\n        </button>\r\n      </div>\r\n\r\n      {/* Error Message */}\r\n      {error && (\r\n        <div className=\"alert alert-error\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n            <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\r\n          </svg>\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      {/* Maps Table */}\r\n      <div className=\"table-container\">\r\n        <div className=\"table-header\">\r\n          <h2>All Maps ({filteredMaps.length})</h2>\r\n        </div>\r\n\r\n        <div className=\"table-responsive\">\r\n          <table className=\"maps-table\">\r\n            <thead>\r\n              <tr>\r\n                <th onClick={() => handleSort('map_id')}>\r\n                  ID {sortField === 'map_id' && (sortDirection === 'asc' ? '↑' : '↓')}\r\n                </th>\r\n                <th onClick={() => handleSort('title')}>\r\n                  Map Title {sortField === 'title' && (sortDirection === 'asc' ? '↑' : '↓')}\r\n                </th>\r\n                <th onClick={() => handleSort('email')}>\r\n                  Customer {sortField === 'email' && (sortDirection === 'asc' ? '↑' : '↓')}\r\n                </th>\r\n                <th onClick={() => handleSort('country')}>\r\n                  Country {sortField === 'country' && (sortDirection === 'asc' ? '↑' : '↓')}\r\n                </th>\r\n                <th onClick={() => handleSort('zone_count')}>\r\n                  Zones {sortField === 'zone_count' && (sortDirection === 'asc' ? '↑' : '↓')}\r\n                </th>\r\n                <th onClick={() => handleSort('created_at')}>\r\n                  Created {sortField === 'created_at' && (sortDirection === 'asc' ? '↑' : '↓')}\r\n                </th>\r\n                <th>Status</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {paginatedMaps.length === 0 ? (\r\n                <tr>\r\n                  <td colSpan={8} className=\"no-data\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\r\n                    </svg>\r\n                    <p>No maps found</p>\r\n                  </td>\r\n                </tr>\r\n              ) : (\r\n                paginatedMaps.map((map) => (\r\n                  <tr key={map.map_id}>\r\n                    <td className=\"cell-id\">{map.map_id}</td>\r\n                    <td className=\"cell-title\">\r\n                      <div className=\"title-wrapper\">\r\n                        <strong>{map.title}</strong>\r\n                        {map.description && (\r\n                          <span className=\"description\">{map.description}</span>\r\n                        )}\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"cell-customer\">\r\n                      <div className=\"customer-info\">\r\n                        <span className=\"customer-name\">{map.first_name} {map.last_name}</span>\r\n                        <span className=\"customer-email\">{map.email}</span>\r\n                      </div>\r\n                    </td>\r\n                    <td>{map.country || '-'}</td>\r\n                    <td className=\"cell-zones\">\r\n                      <span className=\"badge badge-zones\">{map.zone_count}</span>\r\n                    </td>\r\n                    <td className=\"cell-date\">{formatDate(map.created_at)}</td>\r\n                    <td>\r\n                      <span className={`badge ${map.active ? 'badge-active' : 'badge-inactive'}`}>\r\n                        {map.active ? 'Active' : 'Inactive'}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"cell-actions\">\r\n                      <button\r\n                        className=\"btn-action btn-view\"\r\n                        onClick={() => handleViewMap(map.map_id)}\r\n                        title=\"View Map\"\r\n                      >\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                          <path d=\"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"/>\r\n                        </svg>\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {/* Pagination */}\r\n        {totalPages > 1 && (\r\n          <div className=\"pagination\">\r\n            <button\r\n              className=\"pagination-btn\"\r\n              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\r\n              disabled={currentPage === 1}\r\n            >\r\n              Previous\r\n            </button>\r\n            \r\n            <div className=\"pagination-info\">\r\n              Page {currentPage} of {totalPages}\r\n            </div>\r\n            \r\n            <button\r\n              className=\"pagination-btn\"\r\n              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\r\n              disabled={currentPage === totalPages}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"
        }
    ]
}