{
    "sourceFile": "src/pages/CreateMapPage.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1760434202283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760438406259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,10 +145,10 @@\n         const existingMapId = sessionStorage.getItem('editing_map_id');\r\n         const isEditing = Boolean(existingMapId);\r\n         \r\n         const DB_API_ENDPOINT = isEditing \r\n-          ? `/api/db/tables/map/${existingMapId}`\r\n-          : '/api/db/tables/map';\r\n+          ? `/api/map/${existingMapId}`\r\n+          : '/api/map';\r\n         \r\n         try {\r\n           console.log(`${isEditing ? 'Updating' : 'Creating'} map at endpoint: ${DB_API_ENDPOINT}`);\r\n           const res = await fetch(DB_API_ENDPOINT, {\r\n@@ -167,9 +167,9 @@\n             sessionStorage.removeItem('new_map_title');\r\n             sessionStorage.removeItem('new_map_description');\r\n             sessionStorage.removeItem('editing_map_id');\r\n             \r\n-            const createdMapId = data.record?.map_id;\r\n+            const createdMapId = data.map?.map_id;\r\n             setMapId(createdMapId);\r\n             \r\n             // Save pending zones if any and show success message\r\n             if (createdMapId && user.customer_id) {\r\n@@ -307,15 +307,14 @@\n     const newlySavedZones: Zone[] = [];\r\n     \r\n     for (const zone of pendingZones) {\r\n       try {\r\n-        const response = await fetch('/api/db/tables/zones', {\r\n+        const response = await fetch('/api/zone', {\r\n           method: 'POST',\r\n           headers: {\r\n             'Content-Type': 'application/json',\r\n           },\r\n           body: JSON.stringify({\r\n-            id: zone.id,\r\n             map_id: createdMapId,\r\n             customer_id: customerId,\r\n             name: zone.name,\r\n             color: zone.color,\r\n"
                },
                {
                    "date": 1760438870907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,10 @@\n     }\r\n     \r\n     setIsSaving(true);\r\n     console.log('Current user data:', user);\r\n+    console.log('üì¶ Pending zones at save time:', pendingZones);\r\n+    console.log('üì¶ Number of pending zones:', pendingZones.length);\r\n     // Get existing mapId from session storage if available - for map editing\r\n     const existingMapId = sessionStorage.getItem('editing_map_id');\r\n     const isEditing = Boolean(existingMapId);\r\n     console.log(`Map operation: ${isEditing ? 'UPDATING' : 'CREATING'} map ${isEditing ? existingMapId : ''}`);\r\n@@ -287,11 +289,14 @@\n     setPendingZones(prev => {\r\n       // Check if zone already exists to avoid duplicates\r\n       const exists = prev.find(z => z.id === zone.id);\r\n       if (exists) {\r\n+        console.log('‚ö†Ô∏è  Zone already exists in pending zones, skipping duplicate');\r\n         return prev;\r\n       }\r\n-      return [...prev, zone];\r\n+      const newPendingZones = [...prev, zone];\r\n+      console.log(`‚úÖ Zone added to pending zones. Total pending: ${newPendingZones.length}`);\r\n+      return newPendingZones;\r\n     });\r\n     setHasUnsavedChanges(true);\r\n   }, []);\r\n \r\n"
                }
            ],
            "date": 1760434202283,
            "name": "Commit-0",
            "content": "import React, { useState, useCallback } from 'react';\r\nimport { ErrorBoundary } from '../components/ErrorBoundary';\r\nimport AppNavBar from '../components/AppNavBar';\r\nimport WorldMap from '../components/WorldMap';\r\nimport CountrySidebar from '../components/CountrySidebar';\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport type { Zone } from '../types/zones';\r\n\r\n// Map page component for creating new maps\r\n\r\nconst CreateMapPage: React.FC = () => {\r\n  const { user } = useAuth();\r\n  const navigate = useNavigate();\r\n  // Get map title and description from session storage\r\n  const [mapTitle, setMapTitle] = useState(() => \r\n    sessionStorage.getItem('new_map_title') || ''\r\n  );\r\n  const [mapDescription, setMapDescription] = useState(() => \r\n    sessionStorage.getItem('new_map_description') || ''\r\n  );\r\n  const [error, setError] = useState('');\r\n  const [mapId, setMapId] = useState<number | null>(null);\r\n  const [mapCode, setMapCode] = useState<string>('');\r\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\r\n  const [pendingZones, setPendingZones] = useState<Zone[]>([]);\r\n  const [savedZones, setSavedZones] = useState<Zone[]>([]);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  // Add state for map position\r\n  const [mapPosition, setMapPosition] = useState({\r\n    lat: 20,\r\n    lng: 0,\r\n    zoom: 2\r\n  });\r\n  const [highlightedCountry, setHighlightedCountry] = useState<string | undefined>(undefined);\r\n\r\n  // Generate map code on component mount if not already set\r\n  React.useEffect(() => {\r\n    if (!mapCode) {\r\n      const newCode = generateMapCode();\r\n      setMapCode(newCode);\r\n      console.log('üîñ Generated map code:', newCode);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // Auto-save function that can be called from navigation\r\n  const handleAutoSave = async (): Promise<void> => {\r\n    if (!hasUnsavedChanges || !mapTitle.trim()) {\r\n      return; // Nothing to save or no title\r\n    }\r\n    \r\n    try {\r\n      await handleSave();\r\n      setHasUnsavedChanges(false);\r\n    } catch (error) {\r\n      console.error('Auto-save failed:', error);\r\n      throw error; // Re-throw so navigation can handle it\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!mapTitle.trim()) {\r\n      setError('Title is required');\r\n      return;\r\n    }\r\n    \r\n    if (!user || !user.customer_id) {\r\n      console.error('User or customer_id is missing:', user);\r\n      setError('You must be logged in with a valid account to save maps');\r\n      return;\r\n    }\r\n    \r\n    setIsSaving(true);\r\n    console.log('Current user data:', user);\r\n    // Get existing mapId from session storage if available - for map editing\r\n    const existingMapId = sessionStorage.getItem('editing_map_id');\r\n    const isEditing = Boolean(existingMapId);\r\n    console.log(`Map operation: ${isEditing ? 'UPDATING' : 'CREATING'} map ${isEditing ? existingMapId : ''}`);\r\n    setError('');\r\n    \r\n    try {\r\n      // First, check if the database is available\r\n      try {\r\n        console.log('üîç Checking database connection...');\r\n        \r\n        const API_ENDPOINT = '/api/db/status';\r\n        \r\n        try {\r\n          console.log(`Checking database connection at: ${API_ENDPOINT}`);\r\n          const dbCheckResponse = await fetch(API_ENDPOINT, {\r\n            method: 'GET'\r\n          });\r\n          \r\n          const responseData = await dbCheckResponse.json();\r\n          console.log('Database status response:', responseData);\r\n          \r\n          if (dbCheckResponse.ok) {\r\n            console.log('‚úÖ Database connection confirmed');\r\n          } else {\r\n            console.warn('‚ö†Ô∏è Database connection check returned error, but will try to save anyway');\r\n          }\r\n        } catch (endpointError) {\r\n          console.warn(`‚ö†Ô∏è Could not connect to ${API_ENDPOINT}:`, endpointError);\r\n          console.warn('‚ö†Ô∏è Will try to save map anyway');\r\n        }\r\n      } catch (dbCheckError) {\r\n        console.warn('‚ö†Ô∏è Could not verify database connection:', dbCheckError);\r\n      }\r\n      \r\n      // Generate a unique map code (only if not already set)\r\n      const generatedMapCode = mapCode || generateMapCode();\r\n      setMapCode(generatedMapCode);\r\n\r\n      // Prepare map data for saving\r\n      const mapData = {\r\n        title: mapTitle,\r\n        description: mapDescription,\r\n        map_data: { \r\n          lat: mapPosition.lat, \r\n          lng: mapPosition.lng, \r\n          zoom: mapPosition.zoom \r\n        },\r\n        map_bounds: { \r\n          center: [mapPosition.lat, mapPosition.lng], \r\n          zoom: mapPosition.zoom \r\n        },\r\n        active: true,\r\n        country: highlightedCountry || null,\r\n        map_code: generatedMapCode,\r\n        customer_id: user.customer_id\r\n      };\r\n\r\n      console.log('Saving map data:', mapData);\r\n      \r\n      // Try to save directly to the database using the DB API\r\n      try {\r\n        console.log('üîç Attempting to save map directly to database...');\r\n        \r\n        // Debug info before starting API calls\r\n        console.log('User data at save time:', user);\r\n        console.log('Map data being saved:', mapData);\r\n        \r\n        // Choose endpoint based on whether we're editing an existing map\r\n        const existingMapId = sessionStorage.getItem('editing_map_id');\r\n        const isEditing = Boolean(existingMapId);\r\n        \r\n        const DB_API_ENDPOINT = isEditing \r\n          ? `/api/db/tables/map/${existingMapId}`\r\n          : '/api/db/tables/map';\r\n        \r\n        try {\r\n          console.log(`${isEditing ? 'Updating' : 'Creating'} map at endpoint: ${DB_API_ENDPOINT}`);\r\n          const res = await fetch(DB_API_ENDPOINT, {\r\n            method: isEditing ? 'PUT' : 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(mapData)\r\n          });\r\n          \r\n          console.log(`Save response status: ${res.status}`);\r\n          const data = await res.json();\r\n          console.log('Save response data:', data);\r\n          \r\n          if (data.success) {\r\n            // Clear session storage since we've successfully saved\r\n            // Clear all related session storage items\r\n            sessionStorage.removeItem('new_map_title');\r\n            sessionStorage.removeItem('new_map_description');\r\n            sessionStorage.removeItem('editing_map_id');\r\n            \r\n            const createdMapId = data.record?.map_id;\r\n            setMapId(createdMapId);\r\n            \r\n            // Save pending zones if any and show success message\r\n            if (createdMapId && user.customer_id) {\r\n              const zonesResult = await savePendingZones(createdMapId, user.customer_id);\r\n              if (zonesResult.success) {\r\n                setError(`Map ${isEditing ? 'updated' : 'saved'} successfully! Code: ${generatedMapCode} | ${zonesResult.count} zone(s) saved to database`);\r\n              } else {\r\n                setError(`Map ${isEditing ? 'updated' : 'saved'} successfully! Code: ${generatedMapCode} | Warning: Some zones may not have saved`);\r\n              }\r\n            } else {\r\n              setError(`Map ${isEditing ? 'updated' : 'saved'} successfully with code: ${generatedMapCode}`);\r\n            }\r\n            \r\n            setHasUnsavedChanges(false);\r\n            setIsSaving(false);\r\n            \r\n            // Wait 2 seconds to show success message before redirecting\r\n            setTimeout(() => {\r\n              navigate('/dashboard');\r\n            }, 2000);\r\n            return;\r\n          } else {\r\n            console.error('‚ùå Direct database save failed:', data.error || 'Unknown error');\r\n            setError('Could not save map directly to database. Trying alternate method...');\r\n          }\r\n        } catch (endpointError) {\r\n          console.error(`‚ùå Error saving to ${DB_API_ENDPOINT}:`, endpointError);\r\n          setError('Could not save map directly to database. Trying alternate method...');\r\n        }\r\n      } catch (directSaveError) {\r\n        console.error('‚ùå Error in direct database save process:', directSaveError);\r\n        // Continue with fallback method if direct save fails\r\n      }\r\n      \r\n      // Save map to the configured endpoint using Vite proxy\r\n      const existingMapId = sessionStorage.getItem('editing_map_id');\r\n      const isEditing = Boolean(existingMapId);\r\n      \r\n      const API_URL = isEditing \r\n        ? `/api/map/${existingMapId}`\r\n        : '/api/map';\r\n      \r\n      let success = false;\r\n      let responseData = null;\r\n      \r\n      try {\r\n        console.log(`${isEditing ? 'Updating' : 'Creating'} map via: ${API_URL}`);\r\n        const res = await fetch(API_URL, {\r\n          method: isEditing ? 'PUT' : 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(mapData)\r\n        });\r\n        \r\n        console.log('Save response status:', res.status);\r\n        const data = await res.json();\r\n        \r\n        if (data.success) {\r\n          success = true;\r\n          responseData = data;\r\n          console.log('‚úÖ Map saved successfully to database');\r\n        } else {\r\n          console.error('‚ùå Error saving map:', data.error || 'Unknown error');\r\n        }\r\n      } catch (err) {\r\n        console.error(`‚ùå Error saving map to ${API_URL}:`, err);\r\n      }\r\n      \r\n      // After trying all fallback URLs, handle the result\r\n      if (success && responseData) {\r\n        // Clear session storage since we've successfully saved\r\n        sessionStorage.removeItem('new_map_title');\r\n        sessionStorage.removeItem('new_map_description');\r\n        \r\n        // Clear all related session storage items\r\n        sessionStorage.removeItem('new_map_title');\r\n        sessionStorage.removeItem('new_map_description');\r\n        sessionStorage.removeItem('editing_map_id');\r\n        \r\n        const createdMapId = responseData.record?.map_id;\r\n        setMapId(createdMapId);\r\n        \r\n        // Save pending zones if any and show success message\r\n        if (createdMapId && user.customer_id) {\r\n          const zonesResult = await savePendingZones(createdMapId, user.customer_id);\r\n          if (zonesResult.success) {\r\n            setError(`Map ${isEditing ? 'updated' : 'saved'} successfully! Code: ${generatedMapCode} | ${zonesResult.count} zone(s) saved to database`);\r\n          } else {\r\n            setError(`Map ${isEditing ? 'updated' : 'saved'} successfully! Code: ${generatedMapCode} | Warning: Some zones may not have saved`);\r\n          }\r\n        } else {\r\n          setError(`Map ${isEditing ? 'updated' : 'saved'} with code: ${generatedMapCode}`);\r\n        }\r\n        \r\n        setHasUnsavedChanges(false);\r\n        setIsSaving(false);\r\n        \r\n        // Wait 2 seconds to show success message before redirecting\r\n        setTimeout(() => {\r\n          navigate('/dashboard');\r\n        }, 2000);\r\n      } else {\r\n        setError('Failed to create map. Please try again.');\r\n        setIsSaving(false);\r\n      }\r\n    } catch (error) {\r\n      setError('Error creating map');\r\n      console.error(error);\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  // Handle zones created when no mapId exists yet\r\n  const handleZoneCreated = useCallback((zone: Zone) => {\r\n    console.log('üéØ Zone created, storing temporarily until map is saved:', zone);\r\n    setPendingZones(prev => {\r\n      // Check if zone already exists to avoid duplicates\r\n      const exists = prev.find(z => z.id === zone.id);\r\n      if (exists) {\r\n        return prev;\r\n      }\r\n      return [...prev, zone];\r\n    });\r\n    setHasUnsavedChanges(true);\r\n  }, []);\r\n\r\n  // Function to save all pending zones to database after map is created\r\n  const savePendingZones = async (createdMapId: number, customerId: number): Promise<{success: boolean, count: number}> => {\r\n    if (pendingZones.length === 0) {\r\n      return { success: true, count: 0 };\r\n    }\r\n    \r\n    console.log(`üíæ Saving ${pendingZones.length} pending zones to map ${createdMapId}...`);\r\n    \r\n    let successCount = 0;\r\n    const newlySavedZones: Zone[] = [];\r\n    \r\n    for (const zone of pendingZones) {\r\n      try {\r\n        const response = await fetch('/api/db/tables/zones', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            id: zone.id,\r\n            map_id: createdMapId,\r\n            customer_id: customerId,\r\n            name: zone.name,\r\n            color: zone.color,\r\n            coordinates: zone.coordinates\r\n          })\r\n        });\r\n        \r\n        const result = await response.json();\r\n        if (result.success) {\r\n          console.log(`‚úÖ Zone \"${zone.name}\" saved successfully to database`);\r\n          successCount++;\r\n          newlySavedZones.push(zone);\r\n        } else {\r\n          console.error(`‚ùå Failed to save zone \"${zone.name}\":`, result.error);\r\n        }\r\n      } catch (err) {\r\n        console.error(`‚ùå Error saving zone \"${zone.name}\":`, err);\r\n      }\r\n    }\r\n    \r\n    // Update saved zones list\r\n    setSavedZones(prev => [...prev, ...newlySavedZones]);\r\n    \r\n    // Clear pending zones after saving\r\n    setPendingZones([]);\r\n    \r\n    return {\r\n      success: successCount === pendingZones.length,\r\n      count: successCount\r\n    };\r\n  };\r\n\r\n  // Generate a unique map code\r\n  const generateMapCode = (): string => {\r\n    // Create a code with pattern: MAP-XXXX-XXXX where X is alphanumeric\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n    let result = 'MAP-';\r\n    \r\n    // Generate first part\r\n    for (let i = 0; i < 4; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * characters.length));\r\n    }\r\n    \r\n    result += '-';\r\n    \r\n    // Generate second part\r\n    for (let i = 0; i < 4; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() * characters.length));\r\n    }\r\n    \r\n    return result;\r\n  };\r\n\r\n  // Enhanced search handler function for the sidebar with direct map controls\r\n  const handleSearch = (lat: number, lng: number, zoom: number, countryName?: string) => {\r\n    console.log('Search params received:', { lat, lng, zoom, countryName });\r\n    \r\n    // Ensure we have valid coordinates\r\n    if (isNaN(lat) || isNaN(lng) || isNaN(zoom)) {\r\n      console.error('Invalid coordinates received:', { lat, lng, zoom });\r\n      return;\r\n    }\r\n    \r\n    // Comprehensive country size categorization for appropriate zoom levels\r\n    let adjustedZoom;\r\n    if (countryName) {\r\n      const countryZoomLevels: Record<string, number> = {\r\n        'Lebanon': 8,\r\n        'Israel': 8,\r\n        'Palestine': 9,\r\n        'Cyprus': 8,\r\n        'Kuwait': 8,\r\n        'Qatar': 8,\r\n        'Bahrain': 9,\r\n        'Singapore': 11,\r\n        'Luxembourg': 9,\r\n        'Montenegro': 8,\r\n        'United Kingdom': 6,\r\n        'Italy': 6,\r\n        'Greece': 6,\r\n        'Romania': 6,\r\n        'Syria': 7,\r\n        'Jordan': 7,\r\n        'United Arab Emirates': 7,\r\n        'Mexico': 5,\r\n        'Indonesia': 5,\r\n        'Saudi Arabia': 5,\r\n        'Iran': 5,\r\n        'Mongolia': 5,\r\n        'Peru': 5,\r\n        'Egypt': 6,\r\n        'Turkey': 5,\r\n        'India': 4,\r\n        'Argentina': 4,\r\n        'Kazakhstan': 4,\r\n        'Algeria': 4,\r\n        'Canada': 3,\r\n        'United States': 3,\r\n        'China': 3,\r\n        'Brazil': 3,\r\n        'Australia': 3,\r\n        'Russia': 2\r\n      };\r\n      adjustedZoom = countryZoomLevels[countryName] || 6;\r\n    } else {\r\n      adjustedZoom = Math.max(zoom, 11);\r\n    }\r\n    if (zoom > adjustedZoom) {\r\n      adjustedZoom = zoom;\r\n    }\r\n    setMapPosition({ lat, lng, zoom: adjustedZoom });\r\n    // No longer setting city markers\r\n    setHighlightedCountry(countryName || undefined);\r\n  };\r\n\r\n  return (\r\n    <div style={{ \r\n      minHeight: '100vh', \r\n      width: '100vw', \r\n      background: '#f7f9fc', \r\n      position: 'relative', \r\n      color: '#000', \r\n      fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif' \r\n    }}>\r\n      <AppNavBar onSaveMap={handleAutoSave} />\r\n      <div style={{ \r\n        width: '100%', \r\n        maxWidth: 700, \r\n        margin: '0 auto', \r\n        background: '#fff', \r\n        borderRadius: '16px', \r\n        boxShadow: '0 4px 20px rgba(0,0,0,0.06)', \r\n        padding: '40px', \r\n        marginTop: '80px', \r\n        marginBottom: '32px', \r\n        display: 'flex', \r\n        flexDirection: 'column', \r\n        alignItems: 'center' \r\n      }}>\r\n        <h2 style={{ \r\n          marginBottom: '36px', \r\n          color: '#000', \r\n          fontWeight: 700, \r\n          fontSize: '28px',\r\n          textAlign: 'center'\r\n        }}>\r\n          Map Details\r\n        </h2>\r\n        \r\n        <div style={{ width: '100%', marginBottom: '24px' }}>\r\n          <label style={{ \r\n            fontWeight: '600', \r\n            marginBottom: '10px', \r\n            display: 'block', \r\n            fontSize: '15px', \r\n            color: '#2d3748'\r\n          }}>\r\n            Map Title\r\n          </label>\r\n          <div style={{ \r\n            fontSize: '16px', \r\n            padding: '14px 16px', \r\n            borderRadius: '10px', \r\n            border: '1px solid #e2e8f0', \r\n            background: '#f8fafc',\r\n            color: '#000',\r\n            marginBottom: '10px',\r\n            boxShadow: '0 1px 3px rgba(0,0,0,0.02)',\r\n          }}>\r\n            {mapTitle}\r\n          </div>\r\n          <button \r\n            style={{ \r\n              background: 'none', \r\n              border: 'none', \r\n              color: '#4f8cff', \r\n              cursor: 'pointer',\r\n              padding: '8px 0',\r\n              fontSize: '14px',\r\n              fontWeight: '500',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: '4px'\r\n            }}\r\n            onClick={() => {\r\n              const newTitle = prompt('Edit map title:', mapTitle);\r\n              if (newTitle !== null) {\r\n                setMapTitle(newTitle);\r\n                setHasUnsavedChanges(true);\r\n              }\r\n            }}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n              <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n            </svg>\r\n            Edit Title\r\n          </button>\r\n        </div>\r\n        \r\n        <div style={{ width: '100%', marginBottom: '28px' }}>\r\n          <label style={{ \r\n            fontWeight: '600', \r\n            marginBottom: '10px', \r\n            display: 'block', \r\n            fontSize: '15px', \r\n            color: '#2d3748'\r\n          }}>\r\n            Map Description\r\n          </label>\r\n          <div style={{ \r\n            fontSize: '16px', \r\n            padding: '14px 16px', \r\n            borderRadius: '10px', \r\n            border: '1px solid #e2e8f0', \r\n            background: '#f8fafc',\r\n            color: '#000',\r\n            marginBottom: '10px',\r\n            minHeight: '90px',\r\n            boxShadow: '0 1px 3px rgba(0,0,0,0.02)',\r\n            lineHeight: '1.5'\r\n          }}>\r\n            {mapDescription || <em style={{ color: '#94a3b8' }}>No description provided</em>}\r\n          </div>\r\n          <button \r\n            style={{ \r\n              background: 'none', \r\n              border: 'none', \r\n              color: '#4f8cff', \r\n              cursor: 'pointer',\r\n              padding: '8px 0',\r\n              fontSize: '14px',\r\n              fontWeight: '500',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: '4px'\r\n            }}\r\n            onClick={() => {\r\n              const newDescription = prompt('Edit map description:', mapDescription);\r\n              if (newDescription !== null) {\r\n                setMapDescription(newDescription);\r\n                setHasUnsavedChanges(true);\r\n              }\r\n            }}\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n              <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n              <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n            </svg>\r\n            Edit Description\r\n          </button>\r\n        </div>\r\n        <div style={{ width: '100%', marginBottom: '28px' }}>\r\n          <div style={{ \r\n            marginBottom: '16px',\r\n            background: '#f8fafc', \r\n            padding: '14px 16px', \r\n            borderRadius: '10px', \r\n            border: '1px solid #e2e8f0',\r\n            boxShadow: '0 1px 3px rgba(0,0,0,0.02)'\r\n          }}>\r\n            <span style={{ \r\n              fontSize: '15px', \r\n              color: '#2d3748', \r\n              fontWeight: 600,\r\n              display: 'block',\r\n              marginBottom: '8px'\r\n            }}>\r\n              Current Map Center:\r\n            </span>\r\n            <div style={{ \r\n              fontSize: '16px', \r\n              color: '#000',\r\n              fontFamily: 'monospace',\r\n              background: '#edf2f7',\r\n              display: 'inline-block',\r\n              padding: '6px 10px',\r\n              borderRadius: '6px'\r\n            }}>\r\n              Lat: {mapPosition.lat.toFixed(4)}, Lng: {mapPosition.lng.toFixed(4)}\r\n            </div>\r\n          </div>\r\n          \r\n          {mapCode && (\r\n            <div style={{ \r\n              marginBottom: '16px', \r\n              padding: '16px', \r\n              backgroundColor: '#ebf5ff', \r\n              borderRadius: '10px', \r\n              border: '1px solid #bcdaff',\r\n              boxShadow: '0 2px 4px rgba(79,140,255,0.06)'\r\n            }}>\r\n              <span style={{ \r\n                fontSize: '15px', \r\n                color: '#2d3748', \r\n                fontWeight: 600,\r\n                display: 'block',\r\n                marginBottom: '8px'\r\n              }}>\r\n                Map Code:\r\n              </span>\r\n              <div style={{ \r\n                fontSize: '18px', \r\n                color: '#000', \r\n                fontWeight: 600,\r\n                fontFamily: 'monospace',\r\n                letterSpacing: '0.5px'\r\n              }}>\r\n                {mapCode}\r\n              </div>\r\n              <div style={{ \r\n                fontSize: '14px', \r\n                color: '#4a5568', \r\n                marginTop: '8px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                gap: '6px' \r\n              }}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                  <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                  <path d=\"M12 8v4\"></path>\r\n                  <path d=\"M12 16h.01\"></path>\r\n                </svg>\r\n                Use this code to access your map later\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Display pending zones that will be saved */}\r\n          {(pendingZones.length > 0 || savedZones.length > 0) && (\r\n            <div style={{ \r\n              marginBottom: '16px', \r\n              padding: '16px', \r\n              backgroundColor: '#f0fdf4', \r\n              borderRadius: '10px', \r\n              border: '1px solid #86efac',\r\n              boxShadow: '0 2px 4px rgba(34,197,94,0.06)'\r\n            }}>\r\n              <span style={{ \r\n                fontSize: '15px', \r\n                color: '#2d3748', \r\n                fontWeight: 600,\r\n                marginBottom: '12px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                gap: '8px'\r\n              }}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                  <path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\"></path>\r\n                  <polyline points=\"3.27 6.96 12 12.01 20.73 6.96\"></polyline>\r\n                  <line x1=\"12\" y1=\"22.08\" x2=\"12\" y2=\"12\"></line>\r\n                </svg>\r\n                Created Zones ({pendingZones.length + savedZones.length})\r\n              </span>\r\n              <div style={{ \r\n                maxHeight: '200px', \r\n                overflowY: 'auto',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                gap: '8px'\r\n              }}>\r\n                {savedZones.map(zone => (\r\n                  <div key={zone.id} style={{ \r\n                    display: 'flex', \r\n                    alignItems: 'center', \r\n                    gap: '10px',\r\n                    padding: '8px 10px',\r\n                    background: '#dcfce7',\r\n                    borderRadius: '6px',\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    <div style={{ \r\n                      width: '16px', \r\n                      height: '16px', \r\n                      backgroundColor: zone.color, \r\n                      borderRadius: '3px',\r\n                      border: '1px solid rgba(0,0,0,0.1)'\r\n                    }}></div>\r\n                    <span style={{ flex: 1, color: '#000', fontWeight: 500 }}>{zone.name}</span>\r\n                    <span style={{ \r\n                      color: '#059669', \r\n                      fontSize: '12px',\r\n                      fontWeight: 600,\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '4px'\r\n                    }}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <polyline points=\"20 6 9 17 4 12\"></polyline>\r\n                      </svg>\r\n                      Saved\r\n                    </span>\r\n                  </div>\r\n                ))}\r\n                {pendingZones.map(zone => (\r\n                  <div key={zone.id} style={{ \r\n                    display: 'flex', \r\n                    alignItems: 'center', \r\n                    gap: '10px',\r\n                    padding: '8px 10px',\r\n                    background: '#fef3c7',\r\n                    borderRadius: '6px',\r\n                    fontSize: '14px'\r\n                  }}>\r\n                    <div style={{ \r\n                      width: '16px', \r\n                      height: '16px', \r\n                      backgroundColor: zone.color, \r\n                      borderRadius: '3px',\r\n                      border: '1px solid rgba(0,0,0,0.1)'\r\n                    }}></div>\r\n                    <span style={{ flex: 1, color: '#000', fontWeight: 500 }}>{zone.name}</span>\r\n                    <span style={{ \r\n                      color: '#d97706', \r\n                      fontSize: '12px',\r\n                      fontWeight: 600,\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      gap: '4px'\r\n                    }}>\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                        <polyline points=\"12 6 12 12 16 14\"></polyline>\r\n                      </svg>\r\n                      Pending\r\n                    </span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              {pendingZones.length > 0 && (\r\n                <div style={{ \r\n                  marginTop: '12px', \r\n                  fontSize: '13px', \r\n                  color: '#65a30d',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: '6px'\r\n                }}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                    <path d=\"M12 16v-4\"></path>\r\n                    <path d=\"M12 8h.01\"></path>\r\n                  </svg>\r\n                  Click \"Save Map\" to save these zones to the database\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <button\r\n          style={{ \r\n            width: '100%', \r\n            padding: '16px', \r\n            fontSize: '16px', \r\n            background: isSaving ? '#94a3b8' : '#4f8cff', \r\n            color: '#fff', \r\n            border: 'none', \r\n            borderRadius: '12px', \r\n            cursor: isSaving ? 'not-allowed' : 'pointer', \r\n            fontWeight: 600, \r\n            boxShadow: '0 4px 12px rgba(79,140,255,0.25)', \r\n            marginBottom: '12px',\r\n            transition: 'all 0.2s ease',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            gap: '8px',\r\n            opacity: isSaving ? 0.7 : 1\r\n          }}\r\n          onClick={handleSave}\r\n          disabled={isSaving}\r\n        >\r\n          {isSaving ? (\r\n            <>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" style={{ animation: 'spin 1s linear infinite' }}>\r\n                <line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"6\"></line>\r\n                <line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"22\"></line>\r\n                <line x1=\"4.93\" y1=\"4.93\" x2=\"7.76\" y2=\"7.76\"></line>\r\n                <line x1=\"16.24\" y1=\"16.24\" x2=\"19.07\" y2=\"19.07\"></line>\r\n                <line x1=\"2\" y1=\"12\" x2=\"6\" y2=\"12\"></line>\r\n                <line x1=\"18\" y1=\"12\" x2=\"22\" y2=\"12\"></line>\r\n                <line x1=\"4.93\" y1=\"19.07\" x2=\"7.76\" y2=\"16.24\"></line>\r\n                <line x1=\"16.24\" y1=\"7.76\" x2=\"19.07\" y2=\"4.93\"></line>\r\n              </svg>\r\n              Saving Map & Zones...\r\n            </>\r\n          ) : (\r\n            <>\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path>\r\n                <polyline points=\"17 21 17 13 7 13 7 21\"></polyline>\r\n                <polyline points=\"7 3 7 8 15 8\"></polyline>\r\n              </svg>\r\n              Save Map {pendingZones.length > 0 ? `& ${pendingZones.length} Zone(s)` : ''}\r\n            </>\r\n          )}\r\n        </button>\r\n        \r\n        {error && \r\n          <div style={{ \r\n            color: mapId ? '#047857' : '#e53e3e', \r\n            marginTop: '16px', \r\n            fontWeight: 500,\r\n            padding: '12px 16px',\r\n            background: mapId ? '#ecfdf5' : '#fef2f2',\r\n            borderRadius: '8px',\r\n            border: `1px solid ${mapId ? '#a7f3d0' : '#fecaca'}`,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            gap: '8px'\r\n          }}>\r\n            {mapId ? (\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n                <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\r\n              </svg>\r\n            ) : (\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n                <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\r\n                <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\r\n              </svg>\r\n            )}\r\n            {error}\r\n          </div>\r\n        }\r\n      </div>\r\n      {/* Use a full-screen map container */}\r\n      <div style={{ \r\n        position: 'fixed',\r\n        top: '56px', /* Match NAVBAR_HEIGHT */\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        width: '100vw',\r\n        zIndex: 10\r\n      }}>\r\n        <WorldMap \r\n          lat={mapPosition.lat} \r\n          lng={mapPosition.lng} \r\n          zoom={mapPosition.zoom} \r\n          highlightedCountry={highlightedCountry}\r\n          onZoneCreated={handleZoneCreated}\r\n        />\r\n        <CountrySidebar \r\n          onSearch={handleSearch} \r\n          showMaps={false} \r\n          onSaveMap={handleSave}\r\n          currentMapData={{\r\n            title: mapTitle,\r\n            description: mapDescription,\r\n            position: mapPosition\r\n          }}\r\n        />\r\n      </div>\r\n      <style>{`\r\n        /* Spinner animation */\r\n        @keyframes spin {\r\n          from {\r\n            transform: rotate(0deg);\r\n          }\r\n          to {\r\n            transform: rotate(360deg);\r\n          }\r\n        }\r\n        \r\n        /* General responsive styles for the map details section */\r\n        @media (max-width: 900px) {\r\n          div[style*='maxWidth: 700'] {\r\n            padding: 24px 16px !important;\r\n            margin-top: 60px !important;\r\n            width: 94% !important;\r\n            border-radius: 12px !important;\r\n            max-width: 90% !important;\r\n          }\r\n          h2 {\r\n            font-size: 22px !important;\r\n          }\r\n          button[style*='padding: 16px'] {\r\n            padding: 14px !important;\r\n          }\r\n          \r\n          /* Ensure the map window is properly sized */\r\n          div[style*='position: fixed'] {\r\n            top: 50px !important;\r\n          }\r\n        }\r\n        \r\n        @media (max-width: 768px) {\r\n          div[style*='maxWidth: 700'] {\r\n            padding: 20px 16px !important;\r\n            margin-top: 40px !important;\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.05) !important;\r\n          }\r\n          \r\n          /* Map position adjustments */\r\n          .leaflet-container {\r\n            height: calc(100vh - 50px) !important;\r\n          }\r\n          \r\n          /* Adjust sidebar for better mobile experience */\r\n          .country-sidebar {\r\n            width: 280px !important;\r\n          }\r\n          \r\n          .country-sidebar.closed {\r\n            transform: translateX(calc(100% - 36px)) !important;\r\n          }\r\n        }\r\n        \r\n        @media (max-width: 480px) {\r\n          div[style*='maxWidth: 700'] {\r\n            padding: 16px 12px !important;\r\n            width: calc(100% - 24px) !important;\r\n            margin-top: 30px !important;\r\n          }\r\n          \r\n          div[style*='padding: 14px 16px'] {\r\n            padding: 12px 10px !important;\r\n          }\r\n          \r\n          .save-button-text {\r\n            font-size: 15px !important;\r\n          }\r\n          \r\n          /* Make sidebar take up more space on small screens */\r\n          .country-sidebar {\r\n            width: 85% !important;\r\n          }\r\n          \r\n          /* Improve form spacing */\r\n          div[style*='marginBottom: 28px'],\r\n          div[style*='marginBottom: 24px'] {\r\n            margin-bottom: 16px !important;\r\n          }\r\n        }\r\n        \r\n        /* Style adjustments for the sidebar in create-map page */\r\n        .country-sidebar {\r\n          position: absolute;\r\n          top: 0;\r\n          right: 0;\r\n          height: 100%;\r\n          z-index: 1000;\r\n          box-shadow: -2px 0 15px rgba(0,0,0,0.08);\r\n          background-color: white;\r\n          color: #000;\r\n        }\r\n        \r\n        /* Make search button more prominent */\r\n        .search-button {\r\n          background-color: #4f8cff !important;\r\n          color: white !important;\r\n          font-weight: 600 !important;\r\n          border-radius: 8px !important;\r\n        }\r\n        \r\n        /* Button hover effects */\r\n        button:hover {\r\n          opacity: 0.95;\r\n          transform: translateY(-1px);\r\n        }\r\n        \r\n        button:active {\r\n          transform: translateY(0);\r\n        }\r\n        \r\n        /* Ensure map container is visible */\r\n        .leaflet-container {\r\n          z-index: 1;\r\n          height: 100% !important;\r\n          width: 100% !important;\r\n        }\r\n        \r\n        /* Ensure all text in forms is black */\r\n        input, textarea, label, div, p, span, h1, h2, h3, h4, h5, h6 {\r\n          color: #000;\r\n        }\r\n        \r\n        /* Current map center section */\r\n        .coordinates-display, .coordinates-label, .coordinates-value {\r\n          color: #000 !important;\r\n        }\r\n        \r\n        /* Placeholders */\r\n        ::placeholder {\r\n          color: #94a3b8 !important;\r\n          opacity: 0.8;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function CreateMapPageWithBoundary() {\r\n  return (\r\n    <ErrorBoundary>\r\n      <CreateMapPage />\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n"
        }
    ]
}