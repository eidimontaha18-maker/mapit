{
    "sourceFile": "src/db/dbOperations.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1760435924645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760955672566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,36 +5,27 @@\n  * CRUD operations (Create, Read, Update, Delete) on tables.\r\n  */\r\n \r\n import pg from 'pg';\r\n+import { pool, dbConfig } from '../../config/database.js';\r\n+\r\n const { Pool } = pg;\r\n \r\n-// Configuration based on provided values\r\n+// Configuration from centralized config\r\n const config = {\r\n   server: {\r\n-    host: '127.0.0.1',\r\n-    port: 3100\r\n+    host: dbConfig.host,\r\n+    port: dbConfig.port\r\n   },\r\n   db: {\r\n-    uri: 'postgres://postgres:NewStrongPass123@localhost:5432/mapit',\r\n+    uri: dbConfig.connectionString,\r\n     schemas: ['public'],\r\n     anonRole: 'anon'\r\n-  },\r\n-  cors: {\r\n-    origins: [\r\n-      'http://localhost:8080', \r\n-      'http://127.0.0.1:8080', \r\n-      'http://localhost:5173', \r\n-      'http://127.0.0.1:5173'\r\n-    ],\r\n-    maxAge: 86400\r\n   }\r\n };\r\n \r\n-// Create and export the connection pool\r\n-export const pool = new Pool({\r\n-  connectionString: config.db.uri\r\n-});\r\n+// Use the shared pool from config\r\n+export { pool };\r\n \r\n /**\r\n  * Tests the database connection\r\n  * @returns {Promise<boolean>} Whether the connection was successful\r\n"
                }
            ],
            "date": 1760435924645,
            "name": "Commit-0",
            "content": "/**\r\n * PostgreSQL Database Operations\r\n * \r\n * This file provides functions to connect to PostgreSQL and perform\r\n * CRUD operations (Create, Read, Update, Delete) on tables.\r\n */\r\n\r\nimport pg from 'pg';\r\nconst { Pool } = pg;\r\n\r\n// Configuration based on provided values\r\nconst config = {\r\n  server: {\r\n    host: '127.0.0.1',\r\n    port: 3100\r\n  },\r\n  db: {\r\n    uri: 'postgres://postgres:NewStrongPass123@localhost:5432/mapit',\r\n    schemas: ['public'],\r\n    anonRole: 'anon'\r\n  },\r\n  cors: {\r\n    origins: [\r\n      'http://localhost:8080', \r\n      'http://127.0.0.1:8080', \r\n      'http://localhost:5173', \r\n      'http://127.0.0.1:5173'\r\n    ],\r\n    maxAge: 86400\r\n  }\r\n};\r\n\r\n// Create and export the connection pool\r\nexport const pool = new Pool({\r\n  connectionString: config.db.uri\r\n});\r\n\r\n/**\r\n * Tests the database connection\r\n * @returns {Promise<boolean>} Whether the connection was successful\r\n */\r\nexport async function testConnection() {\r\n  try {\r\n    const client = await pool.connect();\r\n    const result = await client.query('SELECT NOW() as now');\r\n    console.log('‚úÖ Connected to PostgreSQL database!');\r\n    console.log('üïí Database time:', result.rows[0].now);\r\n    client.release();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('‚ùå Connection failed:', error instanceof Error ? error.message : String(error));\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Get information about the database\r\n * @returns {Promise<Object>} Database metadata\r\n */\r\nexport async function getDatabaseInfo() {\r\n  try {\r\n    const result = await pool.query(`\r\n      SELECT current_database() as database, \r\n             current_schema() as schema,\r\n             current_user as user\r\n    `);\r\n    return result.rows[0];\r\n  } catch (error) {\r\n    console.error('Error retrieving database info:', error instanceof Error ? error.message : String(error));\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Lists all tables in the current schema\r\n * @returns {Promise<Array<string>>} List of table names\r\n */\r\nexport async function listTables() {\r\n  try {\r\n    const result = await pool.query(`\r\n      SELECT table_name\r\n      FROM information_schema.tables\r\n      WHERE table_schema = $1\r\n      ORDER BY table_name\r\n    `, [config.db.schemas[0]]);\r\n    \r\n    return result.rows.map(row => row.table_name);\r\n  } catch (error) {\r\n    console.error('Error listing tables:', error instanceof Error ? error.message : String(error));\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the structure of a specific table\r\n * @param {string} tableName - The name of the table\r\n * @returns {Promise<Array<Object>>} List of columns and their properties\r\n */\r\nexport async function getTableStructure(tableName) {\r\n  try {\r\n    const result = await pool.query(`\r\n      SELECT column_name, data_type, is_nullable, column_default\r\n      FROM information_schema.columns\r\n      WHERE table_schema = $1 AND table_name = $2\r\n      ORDER BY ordinal_position\r\n    `, [config.db.schemas[0], tableName]);\r\n    \r\n    return result.rows;\r\n  } catch (error) {\r\n    console.error(`Error getting structure for table ${tableName}:`, \r\n      error instanceof Error ? error.message : String(error));\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Generic query execution function\r\n * @param {string} queryText - SQL query text with parameterized values ($1, $2, etc.)\r\n * @param {Array} params - Parameter values for the query\r\n * @returns {Promise<Object>} Query result\r\n */\r\nexport async function executeQuery(queryText, params = []) {\r\n  try {\r\n    return await pool.query(queryText, params);\r\n  } catch (error) {\r\n    console.error('Error executing query:', error instanceof Error ? error.message : String(error));\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Get all rows from a table\r\n * @param {string} tableName - Name of the table\r\n * @param {string} orderBy - Optional column to order by\r\n * @returns {Promise<Array<Object>>} Array of rows\r\n */\r\nexport async function getAll(tableName, orderBy) {\r\n  try {\r\n    const orderClause = orderBy ? `ORDER BY ${orderBy}` : '';\r\n    const result = await pool.query(`SELECT * FROM ${tableName} ${orderClause}`);\r\n    return result.rows;\r\n  } catch (error) {\r\n    console.error(`Error retrieving data from ${tableName}:`, \r\n      error instanceof Error ? error.message : String(error));\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Get a single row by ID\r\n * @param {string} tableName - Name of the table\r\n * @param {string|number} id - Primary key value\r\n * @param {string} idColumn - Name of the ID column (defaults to 'id')\r\n * @returns {Promise<Object|null>} The row object or null if not found\r\n */\r\nexport async function getById(tableName, id, idColumn = 'id') {\r\n  try {\r\n    const result = await pool.query(\r\n      `SELECT * FROM ${tableName} WHERE ${idColumn} = $1`, \r\n      [id]\r\n    );\r\n    return result.rows.length > 0 ? result.rows[0] : null;\r\n  } catch (error) {\r\n    console.error(`Error retrieving ${tableName} with ${idColumn}=${id}:`, \r\n      error instanceof Error ? error.message : String(error));\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Insert a new row into a table\r\n * @param {string} tableName - Name of the table\r\n * @param {Object} data - Object containing column-value pairs to insert\r\n * @returns {Promise<Object>} The inserted row\r\n */\r\nexport async function insert(tableName, data) {\r\n  console.log(`üîç DB Operation: Insert into ${tableName}`);\r\n  \r\n  // Extract column names and values from the data object\r\n  const columns = Object.keys(data);\r\n  const values = Object.values(data);\r\n  \r\n  console.log(`Columns: ${columns.join(', ')}`);\r\n  console.log(`Values: ${values.map(v => \r\n    typeof v === 'object' ? JSON.stringify(v) : v).join(', ')}`);\r\n  \r\n  // Create parameterized query with $1, $2, etc.\r\n  const placeholders = columns.map((_, idx) => `$${idx + 1}`).join(', ');\r\n  \r\n  const queryString = `INSERT INTO ${tableName} (${columns.join(', ')}) \r\n       VALUES (${placeholders}) \r\n       RETURNING *`;\r\n       \r\n  console.log(`Executing SQL: ${queryString}`);\r\n  \r\n  try {\r\n    const result = await pool.query(queryString, values);\r\n    \r\n    console.log(`‚úÖ Insert into ${tableName} successful. Row count: ${result.rowCount}`);\r\n    console.log(`Returned data: ${JSON.stringify(result.rows[0], null, 2)}`);\r\n    \r\n    return result.rows[0];\r\n  } catch (error) {\r\n    console.error(`‚ùå Error inserting into ${tableName}:`, \r\n      error instanceof Error ? error.message : String(error));\r\n    \r\n    if (error instanceof Error && error.stack) {\r\n      console.error('Stack trace:', error.stack);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Update a row in the table\r\n * @param {string} tableName - Name of the table\r\n * @param {string|number} id - Primary key value\r\n * @param {Object} data - Object containing column-value pairs to update\r\n * @param {string} idColumn - Name of the ID column (defaults to 'id')\r\n * @returns {Promise<Object>} The updated row\r\n */\r\nexport async function update(tableName, id, data, idColumn = 'id') {\r\n  // Extract column names and values from the data object\r\n  const columns = Object.keys(data);\r\n  const values = Object.values(data);\r\n  \r\n  // Create SET clause with $1, $2, etc.\r\n  const setClause = columns\r\n    .map((col, idx) => `${col} = $${idx + 1}`)\r\n    .join(', ');\r\n  \r\n  try {\r\n    const result = await pool.query(\r\n      `UPDATE ${tableName} \r\n       SET ${setClause} \r\n       WHERE ${idColumn} = $${columns.length + 1} \r\n       RETURNING *`,\r\n      [...values, id]\r\n    );\r\n    \r\n    if (result.rowCount === 0) {\r\n      throw new Error(`No ${tableName} found with ${idColumn}=${id}`);\r\n    }\r\n    \r\n    return result.rows[0];\r\n  } catch (error) {\r\n    console.error(`Error updating ${tableName} with ${idColumn}=${id}:`, \r\n      error instanceof Error ? error.message : String(error));\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Delete a row from the table\r\n * @param {string} tableName - Name of the table\r\n * @param {string|number} id - Primary key value\r\n * @param {string} idColumn - Name of the ID column (defaults to 'id')\r\n * @returns {Promise<boolean>} True if the row was deleted\r\n */\r\nexport async function remove(tableName, id, idColumn = 'id') {\r\n  try {\r\n    const result = await pool.query(\r\n      `DELETE FROM ${tableName} WHERE ${idColumn} = $1`,\r\n      [id]\r\n    );\r\n    \r\n    if (result.rowCount === 0) {\r\n      throw new Error(`No ${tableName} found with ${idColumn}=${id}`);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Error deleting from ${tableName} with ${idColumn}=${id}:`, \r\n      error instanceof Error ? error.message : String(error));\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Direct query method for convenience\r\n * @param {string} sql - SQL query\r\n * @param {Array} params - Query parameters\r\n * @returns {Promise<Object>} Query result\r\n */\r\nexport async function query(sql, params) {\r\n  return await pool.query(sql, params);\r\n}\r\n\r\nexport default {\r\n  pool,\r\n  query,\r\n  testConnection,\r\n  getDatabaseInfo,\r\n  listTables,\r\n  getTableStructure,\r\n  executeQuery,\r\n  getAll,\r\n  getById,\r\n  insert,\r\n  update,\r\n  remove\r\n};"
        }
    ]
}